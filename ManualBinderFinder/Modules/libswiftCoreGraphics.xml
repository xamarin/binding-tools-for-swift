<manualbinderfinder version="1.011" encoding="UTF - 8">
<Module name="libswiftCoreGraphics">
	<Classes>
	</Classes>
	<Structs>
		<Struct name="CoreGraphics.CGAffineTransform">
		</Struct>
		<Struct name="CoreGraphics.CGFloat">
			<Property>
				<name="binade">
				<signature="var binade: CoreGraphics.CGFloat">
				<Static="False">
			</Property>
			<Property>
				<name="bitPattern">
				<signature="var bitPattern: UInt">
				<Static="False">
			</Property>
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="exponent">
				<signature="var exponent: Int">
				<Static="False">
			</Property>
			<Property>
				<name="exponentBitCount">
				<signature="static var exponentBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="exponentBitPattern">
				<signature="var exponentBitPattern: UInt">
				<Static="False">
			</Property>
			<Property>
				<name="floatingPointClass">
				<signature="var floatingPointClass: Swift.FloatingPointClassification">
				<Static="False">
			</Property>
			<Property>
				<name="greatestFiniteMagnitude">
				<signature="static var greatestFiniteMagnitude: CoreGraphics.CGFloat">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="infinity">
				<signature="static var infinity: CoreGraphics.CGFloat">
				<Static="False">
			</Property>
			<Property>
				<name="isCanonical">
				<signature="var isCanonical: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isFinite">
				<signature="var isFinite: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isInfinite">
				<signature="var isInfinite: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isNaN">
				<signature="var isNaN: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isNormal">
				<signature="var isNormal: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isSignaling">
				<signature="var isSignaling: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isSignalingNaN">
				<signature="var isSignalingNaN: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isSubnormal">
				<signature="var isSubnormal: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isZero">
				<signature="var isZero: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="leastNonzeroMagnitude">
				<signature="static var leastNonzeroMagnitude: CoreGraphics.CGFloat">
				<Static="False">
			</Property>
			<Property>
				<name="leastNormalMagnitude">
				<signature="static var leastNormalMagnitude: CoreGraphics.CGFloat">
				<Static="False">
			</Property>
			<Property>
				<name="magnitude">
				<signature="var magnitude: CoreGraphics.CGFloat">
				<Static="False">
			</Property>
			<Property>
				<name="max">
				<signature="static var max: CoreGraphics.CGFloat">
				<Static="False">
			</Property>
			<Property>
				<name="min">
				<signature="static var min: CoreGraphics.CGFloat">
				<Static="False">
			</Property>
			<Property>
				<name="nan">
				<signature="static var nan: CoreGraphics.CGFloat">
				<Static="False">
			</Property>
			<Property>
				<name="native">
				<signature="var native: Double">
				<Static="False">
			</Property>
			<Property>
				<name="nextUp">
				<signature="var nextUp: CoreGraphics.CGFloat">
				<Static="False">
			</Property>
			<Property>
				<name="pi">
				<signature="static var pi: CoreGraphics.CGFloat">
				<Static="False">
			</Property>
			<Property>
				<name="quietNaN">
				<signature="static var quietNaN: CoreGraphics.CGFloat">
				<Static="False">
			</Property>
			<Property>
				<name="sign">
				<signature="var sign: Swift.FloatingPointSign">
				<Static="False">
			</Property>
			<Property>
				<name="signalingNaN">
				<signature="static var signalingNaN: CoreGraphics.CGFloat">
				<Static="False">
			</Property>
			<Property>
				<name="significand">
				<signature="var significand: CoreGraphics.CGFloat">
				<Static="False">
			</Property>
			<Property>
				<name="significandBitCount">
				<signature="static var significandBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="significandBitPattern">
				<signature="var significandBitPattern: UInt">
				<Static="False">
			</Property>
			<Property>
				<name="significandWidth">
				<signature="var significandWidth: Int">
				<Static="False">
			</Property>
			<Property>
				<name="ulp">
				<signature="var ulp: CoreGraphics.CGFloat">
				<Static="False">
			</Property>
			<Method>
				<name="*">
				<signature="static func *(CoreGraphics.CGFloat, CoreGraphics.CGFloat) -> CoreGraphics.CGFloat">
				<isStatic="True">
				<returnType="CoreGraphics.CGFloat">
				<Parameters>
					<Parameter="CoreGraphics.CGFloat">
					<Parameter="CoreGraphics.CGFloat">
				</Parameters>
			</Method>
			<Method>
				<name="*=">
				<signature="static func *=(CoreGraphics.CGFloat, CoreGraphics.CGFloat)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="CoreGraphics.CGFloat">
					<Parameter="CoreGraphics.CGFloat">
				</Parameters>
			</Method>
			<Method>
				<name="+">
				<signature="static func +(CoreGraphics.CGFloat, CoreGraphics.CGFloat) -> CoreGraphics.CGFloat">
				<isStatic="True">
				<returnType="CoreGraphics.CGFloat">
				<Parameters>
					<Parameter="CoreGraphics.CGFloat">
					<Parameter="CoreGraphics.CGFloat">
				</Parameters>
			</Method>
			<Method>
				<name="+=">
				<signature="static func +=(CoreGraphics.CGFloat, CoreGraphics.CGFloat)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="CoreGraphics.CGFloat">
					<Parameter="CoreGraphics.CGFloat">
				</Parameters>
			</Method>
			<Method>
				<name="-">
				<signature="static func -(CoreGraphics.CGFloat, CoreGraphics.CGFloat) -> CoreGraphics.CGFloat">
				<isStatic="True">
				<returnType="CoreGraphics.CGFloat">
				<Parameters>
					<Parameter="CoreGraphics.CGFloat">
					<Parameter="CoreGraphics.CGFloat">
				</Parameters>
			</Method>
			<Method>
				<name="-=">
				<signature="static func -=(CoreGraphics.CGFloat, CoreGraphics.CGFloat)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="CoreGraphics.CGFloat">
					<Parameter="CoreGraphics.CGFloat">
				</Parameters>
			</Method>
			<Method>
				<name="/">
				<signature="static func /(CoreGraphics.CGFloat, CoreGraphics.CGFloat) -> CoreGraphics.CGFloat">
				<isStatic="True">
				<returnType="CoreGraphics.CGFloat">
				<Parameters>
					<Parameter="CoreGraphics.CGFloat">
					<Parameter="CoreGraphics.CGFloat">
				</Parameters>
			</Method>
			<Method>
				<name="/=">
				<signature="static func /=(CoreGraphics.CGFloat, CoreGraphics.CGFloat)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="CoreGraphics.CGFloat">
					<Parameter="CoreGraphics.CGFloat">
				</Parameters>
			</Method>
			<Method>
				<name="addProduct">
				<signature="func addProduct(CoreGraphics.CGFloat, CoreGraphics.CGFloat)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="CoreGraphics.CGFloat">
					<Parameter="CoreGraphics.CGFloat">
				</Parameters>
			</Method>
			<Method>
				<name="advanced">
				<signature="func advanced(by: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat">
				<isStatic="False">
				<returnType="CoreGraphics.CGFloat">
				<Parameters>
					<Parameter="by: CoreGraphics.CGFloat">
				</Parameters>
			</Method>
			<Method>
				<name="distance">
				<signature="func distance(to: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat">
				<isStatic="False">
				<returnType="CoreGraphics.CGFloat">
				<Parameters>
					<Parameter="to: CoreGraphics.CGFloat">
				</Parameters>
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(to: Swift.Encoder)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="to: Swift.Encoder">
				</Parameters>
			</Method>
			<Method>
				<name="formRemainder">
				<signature="func formRemainder(dividingBy: CoreGraphics.CGFloat)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="dividingBy: CoreGraphics.CGFloat">
				</Parameters>
			</Method>
			<Method>
				<name="formSquareRoot">
				<signature="func formSquareRoot()">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="formTruncatingRemainder">
				<signature="func formTruncatingRemainder(dividingBy: CoreGraphics.CGFloat)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="dividingBy: CoreGraphics.CGFloat">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
			<Method>
				<name="isEqual">
				<signature="func isEqual(to: CoreGraphics.CGFloat) -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
					<Parameter="to: CoreGraphics.CGFloat">
				</Parameters>
			</Method>
			<Method>
				<name="isLess">
				<signature="func isLess(than: CoreGraphics.CGFloat) -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
					<Parameter="than: CoreGraphics.CGFloat">
				</Parameters>
			</Method>
			<Method>
				<name="isLessThanOrEqualTo">
				<signature="func isLessThanOrEqualToCoreGraphics.CGFloat -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="negate">
				<signature="func negate()">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="round">
				<signature="func roundSwift.FloatingPointRoundingRule">
				<isStatic="False">
				<returnType="()">
				<Parameters>
				</Parameters>
			</Method>
		</Struct>
		<Struct name="CoreGraphics.CGPoint">
		</Struct>
		<Struct name="CoreGraphics.CGRect">
		</Struct>
		<Struct name="CoreGraphics.CGSize">
		</Struct>
		<Struct name="CoreGraphics.CGVector">
		</Struct>
	</Structs>
	<Enums>
		<Enum name="CoreGraphics.CGPathFillRule">
			<Property>
				<name="rawValue">
				<signature="var rawValue: Int">
				<Static="False">
			</Property>
		</Enum>
	</Enums>
	<Protocols>
	</Protocols>
</Module>
