<manualbinderfinder version="1.011" encoding="UTF - 8">
<Module name="libswiftCore">
	<Classes>
		<Class name="Swift.AnyKeyPath">
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="rootType">
				<signature="static var rootType: Existential Metatype Swift.Any">
				<Static="False">
			</Property>
			<Property>
				<name="valueType">
				<signature="static var valueType: Existential Metatype Swift.Any">
				<Static="False">
			</Property>
			<Method>
				<name="==">
				<signature="static func ==(Swift.AnyKeyPath, Swift.AnyKeyPath) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.AnyKeyPath">
					<Parameter="Swift.AnyKeyPath">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Class>
		<Class name="Swift.AnyObject">
		</Class>
		<Class name="Swift.KeyPath">
		</Class>
		<Class name="Swift.ManagedBuffer">
			<Property>
				<name="capacity">
				<signature="var capacity: Int">
				<Static="False">
			</Property>
			<Property>
				<name="firstElementAddress">
				<signature="var firstElementAddress: Swift.UnsafeMutablePointer(???)">
				<Static="False">
			</Property>
			<Property>
				<name="header">
				<signature="var header: Self">
				<Static="False">
			</Property>
			<Property>
				<name="headerAddress">
				<signature="var headerAddress: Swift.UnsafeMutablePointer(Self)">
				<Static="False">
			</Property>
			<Method>
				<name="create">
				<signature="static func create(minimumCapacity: Int, makingHeaderWith: Swift.ManagedBuffer(Self, ???) -> Self) -> Swift.ManagedBuffer(Self, ???)">
				<isStatic="True">
				<returnType="Swift.ManagedBuffer<(0,0), (0,1)>">
				<Parameters>
					<Parameter="minimumCapacity: Int">
					<Parameter="makingHeaderWith: Swift.ManagedBuffer(Self">
					<Parameter="???">
				</Parameters>
			</Method>
			<Method>
				<name="withUnsafeMutablePointerToElements">
				<signature="func withUnsafeMutablePointerToElementsSwift.UnsafeMutablePointer(???) -> ??? -> ???">
				<isStatic="False">
				<returnType="(1,0)">
				<Parameters>
					<Parameter="???">
				</Parameters>
			</Method>
			<Method>
				<name="withUnsafeMutablePointerToHeader">
				<signature="func withUnsafeMutablePointerToHeaderSwift.UnsafeMutablePointer(Self) -> ??? -> ???">
				<isStatic="False">
				<returnType="(1,0)">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="withUnsafeMutablePointers">
				<signature="func withUnsafeMutablePointers(Swift.UnsafeMutablePointer(Self), Swift.UnsafeMutablePointer(???)) -> ??? -> ???">
				<isStatic="False">
				<returnType="(1,0)">
				<Parameters>
					<Parameter="Swift.UnsafeMutablePointer(Self">
				</Parameters>
			</Method>
		</Class>
		<Class name="Swift.PartialKeyPath">
		</Class>
		<Class name="Swift.ReferenceWritableKeyPath">
		</Class>
		<Class name="Swift.WritableKeyPath">
		</Class>
	</Classes>
	<Structs>
		<Struct name="Swift.AnyBidirectionalCollection">
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Swift.AnyIndex">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Swift.AnyIndex">
				<Static="False">
			</Property>
			<Property>
				<name="underestimatedCount">
				<signature="var underestimatedCount: Int">
				<Static="False">
			</Property>
			<Method>
				<name="distance">
				<signature="func distance(from: Swift.AnyIndex, to: Swift.AnyIndex) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="from: Swift.AnyIndex">
					<Parameter="to: Swift.AnyIndex">
				</Parameters>
			</Method>
			<Method>
				<name="drop">
				<signature="func drop(while: Self -> Bool) -> Swift.AnyBidirectionalCollection(Self)">
				<isStatic="False">
				<returnType="Swift.AnyBidirectionalCollection<(0,0)>">
				<Parameters>
					<Parameter="while: Self -> Bool">
				</Parameters>
			</Method>
			<Method>
				<name="dropFirst">
				<signature="func dropFirstInt -> Swift.AnyBidirectionalCollection(Self)">
				<isStatic="False">
				<returnType="Swift.AnyBidirectionalCollection<(0,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="dropLast">
				<signature="func dropLastInt -> Swift.AnyBidirectionalCollection(Self)">
				<isStatic="False">
				<returnType="Swift.AnyBidirectionalCollection<(0,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="filter">
				<signature="func filterSelf -> Bool -> Swift.Array(Self)">
				<isStatic="False">
				<returnType="Swift.Array<(0,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="forEach">
				<signature="func forEachSelf">
				<isStatic="False">
				<returnType="()">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="formIndex">
				<signature="func formIndex(after: Swift.AnyIndex)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="after: Swift.AnyIndex">
				</Parameters>
			</Method>
			<Method>
				<name="index">
				<signature="func index(after: Swift.AnyIndex) -> Swift.AnyIndex">
				<isStatic="False">
				<returnType="Swift.AnyIndex">
				<Parameters>
					<Parameter="after: Swift.AnyIndex">
				</Parameters>
			</Method>
			<Method>
				<name="makeIterator">
				<signature="func makeIterator() -> Swift.AnyIterator(Self)">
				<isStatic="False">
				<returnType="Swift.AnyIterator<(0,0)>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="map">
				<signature="func mapSelf -> ??? -> Swift.Array(???)">
				<isStatic="False">
				<returnType="Swift.Array<(1,0)>">
				<Parameters>
					<Parameter="???">
				</Parameters>
			</Method>
			<Method>
				<name="prefix">
				<signature="func prefix(while: Self -> Bool) -> Swift.AnyBidirectionalCollection(Self)">
				<isStatic="False">
				<returnType="Swift.AnyBidirectionalCollection<(0,0)>">
				<Parameters>
					<Parameter="while: Self -> Bool">
				</Parameters>
			</Method>
			<Method>
				<name="suffix">
				<signature="func suffixInt -> Swift.AnyBidirectionalCollection(Self)">
				<isStatic="False">
				<returnType="Swift.AnyBidirectionalCollection<(0,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.AnyCollection">
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Swift.AnyIndex">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Swift.AnyIndex">
				<Static="False">
			</Property>
			<Property>
				<name="underestimatedCount">
				<signature="var underestimatedCount: Int">
				<Static="False">
			</Property>
			<Method>
				<name="distance">
				<signature="func distance(from: Swift.AnyIndex, to: Swift.AnyIndex) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="from: Swift.AnyIndex">
					<Parameter="to: Swift.AnyIndex">
				</Parameters>
			</Method>
			<Method>
				<name="drop">
				<signature="func drop(while: Self -> Bool) -> Swift.AnyCollection(Self)">
				<isStatic="False">
				<returnType="Swift.AnyCollection<(0,0)>">
				<Parameters>
					<Parameter="while: Self -> Bool">
				</Parameters>
			</Method>
			<Method>
				<name="dropFirst">
				<signature="func dropFirstInt -> Swift.AnyCollection(Self)">
				<isStatic="False">
				<returnType="Swift.AnyCollection<(0,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="dropLast">
				<signature="func dropLastInt -> Swift.AnyCollection(Self)">
				<isStatic="False">
				<returnType="Swift.AnyCollection<(0,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="filter">
				<signature="func filterSelf -> Bool -> Swift.Array(Self)">
				<isStatic="False">
				<returnType="Swift.Array<(0,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="forEach">
				<signature="func forEachSelf">
				<isStatic="False">
				<returnType="()">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="formIndex">
				<signature="func formIndex(after: Swift.AnyIndex)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="after: Swift.AnyIndex">
				</Parameters>
			</Method>
			<Method>
				<name="index">
				<signature="func index(after: Swift.AnyIndex) -> Swift.AnyIndex">
				<isStatic="False">
				<returnType="Swift.AnyIndex">
				<Parameters>
					<Parameter="after: Swift.AnyIndex">
				</Parameters>
			</Method>
			<Method>
				<name="makeIterator">
				<signature="func makeIterator() -> Swift.AnyIterator(Self)">
				<isStatic="False">
				<returnType="Swift.AnyIterator<(0,0)>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="map">
				<signature="func mapSelf -> ??? -> Swift.Array(???)">
				<isStatic="False">
				<returnType="Swift.Array<(1,0)>">
				<Parameters>
					<Parameter="???">
				</Parameters>
			</Method>
			<Method>
				<name="prefix">
				<signature="func prefix(while: Self -> Bool) -> Swift.AnyCollection(Self)">
				<isStatic="False">
				<returnType="Swift.AnyCollection<(0,0)>">
				<Parameters>
					<Parameter="while: Self -> Bool">
				</Parameters>
			</Method>
			<Method>
				<name="suffix">
				<signature="func suffixInt -> Swift.AnyCollection(Self)">
				<isStatic="False">
				<returnType="Swift.AnyCollection<(0,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.AnyHashable">
			<Property>
				<name="base">
				<signature="var base: Swift.Any">
				<Static="False">
			</Property>
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Method>
				<name="==">
				<signature="static func ==(Swift.AnyHashable, Swift.AnyHashable) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.AnyHashable">
					<Parameter="Swift.AnyHashable">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.AnyIndex">
			<Method>
				<name="<">
				<signature="static func ((Swift.AnyIndex, Swift.AnyIndex) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="(Swift.AnyIndex">
					<Parameter="Swift.AnyIndex">
				</Parameters>
			</Method>
			<Method>
				<name="==">
				<signature="static func ==(Swift.AnyIndex, Swift.AnyIndex) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.AnyIndex">
					<Parameter="Swift.AnyIndex">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.AnyIterator">
			<Method>
				<name="next">
				<signature="func next() -> Self?">
				<isStatic="False">
				<returnType="Swift.Optional<(0,0)>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.AnyRandomAccessCollection">
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Swift.AnyIndex">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Swift.AnyIndex">
				<Static="False">
			</Property>
			<Property>
				<name="underestimatedCount">
				<signature="var underestimatedCount: Int">
				<Static="False">
			</Property>
			<Method>
				<name="distance">
				<signature="func distance(from: Swift.AnyIndex, to: Swift.AnyIndex) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="from: Swift.AnyIndex">
					<Parameter="to: Swift.AnyIndex">
				</Parameters>
			</Method>
			<Method>
				<name="drop">
				<signature="func drop(while: Self -> Bool) -> Swift.AnyRandomAccessCollection(Self)">
				<isStatic="False">
				<returnType="Swift.AnyRandomAccessCollection<(0,0)>">
				<Parameters>
					<Parameter="while: Self -> Bool">
				</Parameters>
			</Method>
			<Method>
				<name="dropFirst">
				<signature="func dropFirstInt -> Swift.AnyRandomAccessCollection(Self)">
				<isStatic="False">
				<returnType="Swift.AnyRandomAccessCollection<(0,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="dropLast">
				<signature="func dropLastInt -> Swift.AnyRandomAccessCollection(Self)">
				<isStatic="False">
				<returnType="Swift.AnyRandomAccessCollection<(0,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="filter">
				<signature="func filterSelf -> Bool -> Swift.Array(Self)">
				<isStatic="False">
				<returnType="Swift.Array<(0,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="forEach">
				<signature="func forEachSelf">
				<isStatic="False">
				<returnType="()">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="formIndex">
				<signature="func formIndex(after: Swift.AnyIndex)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="after: Swift.AnyIndex">
				</Parameters>
			</Method>
			<Method>
				<name="index">
				<signature="func index(after: Swift.AnyIndex) -> Swift.AnyIndex">
				<isStatic="False">
				<returnType="Swift.AnyIndex">
				<Parameters>
					<Parameter="after: Swift.AnyIndex">
				</Parameters>
			</Method>
			<Method>
				<name="makeIterator">
				<signature="func makeIterator() -> Swift.AnyIterator(Self)">
				<isStatic="False">
				<returnType="Swift.AnyIterator<(0,0)>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="map">
				<signature="func mapSelf -> ??? -> Swift.Array(???)">
				<isStatic="False">
				<returnType="Swift.Array<(1,0)>">
				<Parameters>
					<Parameter="???">
				</Parameters>
			</Method>
			<Method>
				<name="prefix">
				<signature="func prefix(while: Self -> Bool) -> Swift.AnyRandomAccessCollection(Self)">
				<isStatic="False">
				<returnType="Swift.AnyRandomAccessCollection<(0,0)>">
				<Parameters>
					<Parameter="while: Self -> Bool">
				</Parameters>
			</Method>
			<Method>
				<name="suffix">
				<signature="func suffixInt -> Swift.AnyRandomAccessCollection(Self)">
				<isStatic="False">
				<returnType="Swift.AnyRandomAccessCollection<(0,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.AnySequence">
			<Property>
				<name="underestimatedCount">
				<signature="var underestimatedCount: Int">
				<Static="False">
			</Property>
			<Method>
				<name="drop">
				<signature="func drop(while: Self -> Bool) -> Swift.AnySequence(Self)">
				<isStatic="False">
				<returnType="Swift.AnySequence<(0,0)>">
				<Parameters>
					<Parameter="while: Self -> Bool">
				</Parameters>
			</Method>
			<Method>
				<name="dropFirst">
				<signature="func dropFirstInt -> Swift.AnySequence(Self)">
				<isStatic="False">
				<returnType="Swift.AnySequence<(0,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="dropLast">
				<signature="func dropLastInt -> Swift.Array(Self)">
				<isStatic="False">
				<returnType="Swift.Array<(0,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="filter">
				<signature="func filterSelf -> Bool -> Swift.Array(Self)">
				<isStatic="False">
				<returnType="Swift.Array<(0,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="forEach">
				<signature="func forEachSelf">
				<isStatic="False">
				<returnType="()">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="makeIterator">
				<signature="func makeIterator() -> Swift.AnyIterator(Self)">
				<isStatic="False">
				<returnType="Swift.AnyIterator<(0,0)>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="map">
				<signature="func mapSelf -> ??? -> Swift.Array(???)">
				<isStatic="False">
				<returnType="Swift.Array<(1,0)>">
				<Parameters>
					<Parameter="???">
				</Parameters>
			</Method>
			<Method>
				<name="prefix">
				<signature="func prefix(while: Self -> Bool) -> Swift.Array(Self)">
				<isStatic="False">
				<returnType="Swift.Array<(0,0)>">
				<Parameters>
					<Parameter="while: Self -> Bool">
				</Parameters>
			</Method>
			<Method>
				<name="suffix">
				<signature="func suffixInt -> Swift.Array(Self)">
				<isStatic="False">
				<returnType="Swift.Array<(0,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Array">
			<Property>
				<name="capacity">
				<signature="var capacity: Int">
				<Static="False">
			</Property>
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Int">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Int">
				<Static="False">
			</Property>
			<Method>
				<name="+">
				<signature="static func +(Swift.Array(Self), Swift.Array(Self)) -> Swift.Array(Self)">
				<isStatic="True">
				<returnType="Swift.Array<(0,0)>">
				<Parameters>
					<Parameter="Swift.Array(Self">
				</Parameters>
			</Method>
			<Method>
				<name="+=">
				<signature="static func +=(Swift.Array(Self), Swift.Array(Self))">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Array(Self">
				</Parameters>
			</Method>
			<Method>
				<name="distance">
				<signature="func distance(from: Int, to: Int) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="from: Int">
					<Parameter="to: Int">
				</Parameters>
			</Method>
			<Method>
				<name="formIndex">
				<signature="func formIndex(after: Int)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="after: Int">
				</Parameters>
			</Method>
			<Method>
				<name="index">
				<signature="func index(after: Int) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="after: Int">
				</Parameters>
			</Method>
			<Method>
				<name="remove">
				<signature="func remove(at: Int) -> Self">
				<isStatic="False">
				<returnType="(0,0)">
				<Parameters>
					<Parameter="at: Int">
				</Parameters>
			</Method>
			<Method>
				<name="removeAll">
				<signature="func removeAll(keepingCapacity: Bool)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="keepingCapacity: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="reserveCapacity">
				<signature="func reserveCapacityInt">
				<isStatic="False">
				<returnType="()">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="reserveCapacityForAppend">
				<signature="func reserveCapacityForAppend(newElementsCount: Int)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="newElementsCount: Int">
				</Parameters>
			</Method>
			<Method>
				<name="withContiguousMutableStorageIfAvailable">
				<signature="func withContiguousMutableStorageIfAvailableSwift.UnsafeMutableBufferPointer(Self) -> ??? -> ????">
				<isStatic="False">
				<returnType="Swift.Optional<(1,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="withContiguousStorageIfAvailable">
				<signature="func withContiguousStorageIfAvailableSwift.UnsafeBufferPointer(Self) -> ??? -> ????">
				<isStatic="False">
				<returnType="Swift.Optional<(1,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="withUnsafeBufferPointer">
				<signature="func withUnsafeBufferPointerSwift.UnsafeBufferPointer(Self) -> ??? -> ???">
				<isStatic="False">
				<returnType="(1,0)">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="withUnsafeBytes">
				<signature="func withUnsafeBytesSwift.UnsafeRawBufferPointer -> ??? -> ???">
				<isStatic="False">
				<returnType="(1,0)">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="withUnsafeMutableBufferPointer">
				<signature="func withUnsafeMutableBufferPointerSwift.UnsafeMutableBufferPointer(Self) -> ??? -> ???">
				<isStatic="False">
				<returnType="(1,0)">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="withUnsafeMutableBytes">
				<signature="func withUnsafeMutableBytesSwift.UnsafeMutableRawBufferPointer -> ??? -> ???">
				<isStatic="False">
				<returnType="(1,0)">
				<Parameters>
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.ArraySlice">
			<Property>
				<name="capacity">
				<signature="var capacity: Int">
				<Static="False">
			</Property>
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Int">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Int">
				<Static="False">
			</Property>
			<Method>
				<name="distance">
				<signature="func distance(from: Int, to: Int) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="from: Int">
					<Parameter="to: Int">
				</Parameters>
			</Method>
			<Method>
				<name="formIndex">
				<signature="func formIndex(after: Int)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="after: Int">
				</Parameters>
			</Method>
			<Method>
				<name="index">
				<signature="func index(after: Int) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="after: Int">
				</Parameters>
			</Method>
			<Method>
				<name="remove">
				<signature="func remove(at: Int) -> Self">
				<isStatic="False">
				<returnType="(0,0)">
				<Parameters>
					<Parameter="at: Int">
				</Parameters>
			</Method>
			<Method>
				<name="removeAll">
				<signature="func removeAll(keepingCapacity: Bool)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="keepingCapacity: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="reserveCapacity">
				<signature="func reserveCapacityInt">
				<isStatic="False">
				<returnType="()">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="reserveCapacityForAppend">
				<signature="func reserveCapacityForAppend(newElementsCount: Int)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="newElementsCount: Int">
				</Parameters>
			</Method>
			<Method>
				<name="withContiguousMutableStorageIfAvailable">
				<signature="func withContiguousMutableStorageIfAvailableSwift.UnsafeMutableBufferPointer(Self) -> ??? -> ????">
				<isStatic="False">
				<returnType="Swift.Optional<(1,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="withContiguousStorageIfAvailable">
				<signature="func withContiguousStorageIfAvailableSwift.UnsafeBufferPointer(Self) -> ??? -> ????">
				<isStatic="False">
				<returnType="Swift.Optional<(1,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="withUnsafeBufferPointer">
				<signature="func withUnsafeBufferPointerSwift.UnsafeBufferPointer(Self) -> ??? -> ???">
				<isStatic="False">
				<returnType="(1,0)">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="withUnsafeBytes">
				<signature="func withUnsafeBytesSwift.UnsafeRawBufferPointer -> ??? -> ???">
				<isStatic="False">
				<returnType="(1,0)">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="withUnsafeMutableBufferPointer">
				<signature="func withUnsafeMutableBufferPointerSwift.UnsafeMutableBufferPointer(Self) -> ??? -> ???">
				<isStatic="False">
				<returnType="(1,0)">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="withUnsafeMutableBytes">
				<signature="func withUnsafeMutableBytesSwift.UnsafeMutableRawBufferPointer -> ??? -> ???">
				<isStatic="False">
				<returnType="(1,0)">
				<Parameters>
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.AutoreleasingUnsafeMutablePointer">
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="pointee">
				<signature="var pointee: Self">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Bool">
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Method>
				<name="!">
				<signature="static func !Bool -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="&&">
				<signature="static func &&(Bool, () -> Bool) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Bool">
					<Parameter="(">
				</Parameters>
			</Method>
			<Method>
				<name="==">
				<signature="static func ==(Bool, Bool) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Bool">
					<Parameter="Bool">
				</Parameters>
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(to: Swift.Encoder)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="to: Swift.Encoder">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
			<Method>
				<name="random">
				<signature="static func random(using: Self) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="using: Self">
				</Parameters>
			</Method>
			<Method>
				<name="toggle">
				<signature="func toggle()">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="||">
				<signature="static func ||(Bool, () -> Bool) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Bool">
					<Parameter="(">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.CVaListPointer">
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Character">
			<Property>
				<name="asciiValue">
				<signature="var asciiValue: UInt8?">
				<Static="False">
			</Property>
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="hexDigitValue">
				<signature="var hexDigitValue: Int?">
				<Static="False">
			</Property>
			<Property>
				<name="isASCII">
				<signature="var isASCII: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isCased">
				<signature="var isCased: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isCurrencySymbol">
				<signature="var isCurrencySymbol: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isHexDigit">
				<signature="var isHexDigit: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isLetter">
				<signature="var isLetter: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isLowercase">
				<signature="var isLowercase: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isMathSymbol">
				<signature="var isMathSymbol: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isNewline">
				<signature="var isNewline: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isNumber">
				<signature="var isNumber: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isPunctuation">
				<signature="var isPunctuation: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isSymbol">
				<signature="var isSymbol: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isUppercase">
				<signature="var isUppercase: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isWhitespace">
				<signature="var isWhitespace: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isWholeNumber">
				<signature="var isWholeNumber: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="unicodeScalars">
				<signature="var unicodeScalars: Swift.String.UnicodeScalarView">
				<Static="False">
			</Property>
			<Property>
				<name="utf16">
				<signature="var utf16: Swift.String.UTF16View">
				<Static="False">
			</Property>
			<Property>
				<name="utf8">
				<signature="var utf8: Swift.String.UTF8View">
				<Static="False">
			</Property>
			<Property>
				<name="wholeNumberValue">
				<signature="var wholeNumberValue: Int?">
				<Static="False">
			</Property>
			<Method>
				<name="<">
				<signature="static func ((Swift.Character, Swift.Character) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="(Swift.Character">
					<Parameter="Swift.Character">
				</Parameters>
			</Method>
			<Method>
				<name="==">
				<signature="static func ==(Swift.Character, Swift.Character) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.Character">
					<Parameter="Swift.Character">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
			<Method>
				<name="lowercased">
				<signature="func lowercased() -> Swift.String">
				<isStatic="False">
				<returnType="Swift.String">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="uppercased">
				<signature="func uppercased() -> Swift.String">
				<isStatic="False">
				<returnType="Swift.String">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="write">
				<signature="func write(to: Self)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="to: Self">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.ClosedRange">
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="isEmpty">
				<signature="var isEmpty: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="lowerBound">
				<signature="var lowerBound: Self">
				<Static="False">
			</Property>
			<Property>
				<name="upperBound">
				<signature="var upperBound: Self">
				<Static="False">
			</Property>
			<Method>
				<name="==">
				<signature="static func ==(Swift.ClosedRange(Self), Swift.ClosedRange(Self)) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.ClosedRange(Self">
				</Parameters>
			</Method>
			<Method>
				<name="clamped">
				<signature="func clamped(to: Swift.ClosedRange(Self)) -> Swift.ClosedRange(Self)">
				<isStatic="False">
				<returnType="Swift.ClosedRange<(0,0)>">
				<Parameters>
					<Parameter="to: Swift.ClosedRange(Self">
				</Parameters>
			</Method>
			<Method>
				<name="contains">
				<signature="func containsSelf -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="overlaps">
				<signature="func overlapsSwift.ClosedRange(Self) -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="relative">
				<signature="func relative(to: ???) -> Swift.Range(Self)">
				<isStatic="False">
				<returnType="Swift.Range<(0,0)>">
				<Parameters>
					<Parameter="to: ???">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.CodingUserInfoKey">
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="rawValue">
				<signature="var rawValue: Swift.String">
				<Static="False">
			</Property>
			<Method>
				<name="==">
				<signature="static func ==(Swift.CodingUserInfoKey, Swift.CodingUserInfoKey) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.CodingUserInfoKey">
					<Parameter="Swift.CodingUserInfoKey">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.CollectionDifference">
			<Method>
				<name="inverse">
				<signature="func inverse() -> Swift.CollectionDifference(Self)">
				<isStatic="False">
				<returnType="Swift.CollectionDifference<(0,0)>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.CollectionDifference.Index">
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.CollectionOfOne">
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Int">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Int">
				<Static="False">
			</Property>
			<Method>
				<name="index">
				<signature="func index(after: Int) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="after: Int">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.CollectionOfOne.Iterator">
			<Method>
				<name="next">
				<signature="func next() -> Self?">
				<isStatic="False">
				<returnType="Swift.Optional<(0,0)>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.ContiguousArray">
			<Property>
				<name="capacity">
				<signature="var capacity: Int">
				<Static="False">
			</Property>
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Int">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Int">
				<Static="False">
			</Property>
			<Method>
				<name="distance">
				<signature="func distance(from: Int, to: Int) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="from: Int">
					<Parameter="to: Int">
				</Parameters>
			</Method>
			<Method>
				<name="formIndex">
				<signature="func formIndex(after: Int)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="after: Int">
				</Parameters>
			</Method>
			<Method>
				<name="index">
				<signature="func index(after: Int) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="after: Int">
				</Parameters>
			</Method>
			<Method>
				<name="remove">
				<signature="func remove(at: Int) -> Self">
				<isStatic="False">
				<returnType="(0,0)">
				<Parameters>
					<Parameter="at: Int">
				</Parameters>
			</Method>
			<Method>
				<name="removeAll">
				<signature="func removeAll(keepingCapacity: Bool)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="keepingCapacity: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="reserveCapacity">
				<signature="func reserveCapacityInt">
				<isStatic="False">
				<returnType="()">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="reserveCapacityForAppend">
				<signature="func reserveCapacityForAppend(newElementsCount: Int)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="newElementsCount: Int">
				</Parameters>
			</Method>
			<Method>
				<name="withContiguousMutableStorageIfAvailable">
				<signature="func withContiguousMutableStorageIfAvailableSwift.UnsafeMutableBufferPointer(Self) -> ??? -> ????">
				<isStatic="False">
				<returnType="Swift.Optional<(1,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="withContiguousStorageIfAvailable">
				<signature="func withContiguousStorageIfAvailableSwift.UnsafeBufferPointer(Self) -> ??? -> ????">
				<isStatic="False">
				<returnType="Swift.Optional<(1,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="withUnsafeBufferPointer">
				<signature="func withUnsafeBufferPointerSwift.UnsafeBufferPointer(Self) -> ??? -> ???">
				<isStatic="False">
				<returnType="(1,0)">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="withUnsafeBytes">
				<signature="func withUnsafeBytesSwift.UnsafeRawBufferPointer -> ??? -> ???">
				<isStatic="False">
				<returnType="(1,0)">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="withUnsafeMutableBufferPointer">
				<signature="func withUnsafeMutableBufferPointerSwift.UnsafeMutableBufferPointer(Self) -> ??? -> ???">
				<isStatic="False">
				<returnType="(1,0)">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="withUnsafeMutableBytes">
				<signature="func withUnsafeMutableBytesSwift.UnsafeMutableRawBufferPointer -> ??? -> ???">
				<isStatic="False">
				<returnType="(1,0)">
				<Parameters>
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.DecodingError.Context">
			<Property>
				<name="codingPath">
				<signature="var codingPath: Swift.Array(Swift.CodingKey)">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="underlyingError">
				<signature="var underlyingError: Error?">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.DefaultIndicies">
			<Property>
				<name="endIndex">
				<signature="var endIndex: Self.Index">
				<Static="False">
			</Property>
			<Property>
				<name="indices">
				<signature="var indices: Swift.DefaultIndicies(Self)">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Self.Index">
				<Static="False">
			</Property>
			<Method>
				<name="formIndex">
				<signature="func formIndex(after: Self.Index)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="after: Self.Index">
				</Parameters>
			</Method>
			<Method>
				<name="index">
				<signature="func index(after: Self.Index) -> Self.Index">
				<isStatic="False">
				<returnType="(0,0)A0.Index">
				<Parameters>
					<Parameter="after: Self.Index">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.DefaultStringInterpolation">
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Method>
				<name="appendInterpolation">
				<signature="func appendInterpolationSelf">
				<isStatic="False">
				<returnType="()">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="appendLiteral">
				<signature="func appendLiteralSwift.String">
				<isStatic="False">
				<returnType="()">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="make">
				<signature="func make() -> Swift.String">
				<isStatic="False">
				<returnType="Swift.String">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="write">
				<signature="func writeSwift.String">
				<isStatic="False">
				<returnType="()">
				<Parameters>
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Dictionary">
			<Property>
				<name="capacity">
				<signature="var capacity: Int">
				<Static="False">
			</Property>
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="isEmpty">
				<signature="var isEmpty: Bool">
				<Static="False">
			</Property>
			<Method>
				<name="compactMapValues">
				<signature="func compactMapValues??? -> ???> -> Swift.Dictionary(Self, ????">
				<isStatic="False">
				<returnType="Swift.Dictionary<(0,0), (1,0)>">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="filter">
				<signature="func filter((key: Self, value: ???)) -> Bool -> Swift.Dictionary(Self, ???)">
				<isStatic="False">
				<returnType="Swift.Dictionary<(0,0), (0,1)>">
				<Parameters>
					<Parameter="(key: Self">
					<Parameter="value: ???">
				</Parameters>
			</Method>
			<Method>
				<name="mapValues">
				<signature="func mapValues??? -> ??? -> Swift.Dictionary(Self, ???)">
				<isStatic="False">
				<returnType="Swift.Dictionary<(0,0), (1,0)>">
				<Parameters>
					<Parameter="Self">
					<Parameter="???">
				</Parameters>
			</Method>
			<Method>
				<name="popFirst">
				<signature="func popFirst() -> (key: Self, value: ???)?">
				<isStatic="False">
				<returnType="Swift.Optional<(key: key: (0,0), value: value: (0,1))>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="removeAll">
				<signature="func removeAll(keepingCapacity: Bool)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="keepingCapacity: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="removeValue">
				<signature="func removeValue(forKey: Self) -> ????">
				<isStatic="False">
				<returnType="Swift.Optional<(0,1)>">
				<Parameters>
					<Parameter="forKey: Self">
				</Parameters>
			</Method>
			<Method>
				<name="reserveCapacity">
				<signature="func reserveCapacityInt">
				<isStatic="False">
				<returnType="()">
				<Parameters>
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Dictionary.Index">
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Dictionary.Iterator">
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Method>
				<name="next">
				<signature="func next() -> (key: Self, value: ???)?">
				<isStatic="False">
				<returnType="Swift.Optional<(key: key: (0,0), value: value: (0,1))>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Dictionary.Keys">
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="isEmpty">
				<signature="var isEmpty: Bool">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Dictionary.Keys.Iterator">
			<Method>
				<name="next">
				<signature="func next() -> Self?">
				<isStatic="False">
				<returnType="Swift.Optional<(0,0)>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Dictionary.Values">
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="isEmpty">
				<signature="var isEmpty: Bool">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Dictionary.Values.Iterator">
			<Method>
				<name="next">
				<signature="func next() -> ????">
				<isStatic="False">
				<returnType="Swift.Optional<(0,1)>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Double">
			<Property>
				<name="binade">
				<signature="var binade: Double">
				<Static="False">
			</Property>
			<Property>
				<name="bitPattern">
				<signature="var bitPattern: Swift.UInt64">
				<Static="False">
			</Property>
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="exponent">
				<signature="var exponent: Int">
				<Static="False">
			</Property>
			<Property>
				<name="exponentBitCount">
				<signature="static var exponentBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="exponentBitPattern">
				<signature="var exponentBitPattern: UInt">
				<Static="False">
			</Property>
			<Property>
				<name="greatestFiniteMagnitude">
				<signature="static var greatestFiniteMagnitude: Double">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="infinity">
				<signature="static var infinity: Double">
				<Static="False">
			</Property>
			<Property>
				<name="isCanonical">
				<signature="var isCanonical: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isFinite">
				<signature="var isFinite: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isInfinite">
				<signature="var isInfinite: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isNaN">
				<signature="var isNaN: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isNormal">
				<signature="var isNormal: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isSignMinus">
				<signature="var isSignMinus: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isSignalingNaN">
				<signature="var isSignalingNaN: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isSubnormal">
				<signature="var isSubnormal: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isZero">
				<signature="var isZero: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="leastNonzeroMagnitude">
				<signature="static var leastNonzeroMagnitude: Double">
				<Static="False">
			</Property>
			<Property>
				<name="leastNormalMagnitude">
				<signature="static var leastNormalMagnitude: Double">
				<Static="False">
			</Property>
			<Property>
				<name="magnitude">
				<signature="var magnitude: Double">
				<Static="False">
			</Property>
			<Property>
				<name="nan">
				<signature="static var nan: Double">
				<Static="False">
			</Property>
			<Property>
				<name="nextUp">
				<signature="var nextUp: Double">
				<Static="False">
			</Property>
			<Property>
				<name="pi">
				<signature="static var pi: Double">
				<Static="False">
			</Property>
			<Property>
				<name="quietNaN">
				<signature="static var quietNaN: Double">
				<Static="False">
			</Property>
			<Property>
				<name="sign">
				<signature="var sign: Swift.FloatingPointSign">
				<Static="False">
			</Property>
			<Property>
				<name="signalingNaN">
				<signature="static var signalingNaN: Double">
				<Static="False">
			</Property>
			<Property>
				<name="significand">
				<signature="var significand: Double">
				<Static="False">
			</Property>
			<Property>
				<name="significandBitCount">
				<signature="static var significandBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="significandBitPattern">
				<signature="var significandBitPattern: Swift.UInt64">
				<Static="False">
			</Property>
			<Property>
				<name="significandWidth">
				<signature="var significandWidth: Int">
				<Static="False">
			</Property>
			<Property>
				<name="ulp">
				<signature="var ulp: Double">
				<Static="False">
			</Property>
			<Property>
				<name="ulpOfOne">
				<signature="static var ulpOfOne: Double">
				<Static="False">
			</Property>
			<Method>
				<name="*">
				<signature="static func *(Double, Double) -> Double">
				<isStatic="True">
				<returnType="Double">
				<Parameters>
					<Parameter="Double">
					<Parameter="Double">
				</Parameters>
			</Method>
			<Method>
				<name="*=">
				<signature="static func *=(Double, Double)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Double">
					<Parameter="Double">
				</Parameters>
			</Method>
			<Method>
				<name="+">
				<signature="static func +(Double, Double) -> Double">
				<isStatic="True">
				<returnType="Double">
				<Parameters>
					<Parameter="Double">
					<Parameter="Double">
				</Parameters>
			</Method>
			<Method>
				<name="+=">
				<signature="static func +=(Double, Double)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Double">
					<Parameter="Double">
				</Parameters>
			</Method>
			<Method>
				<name="-">
				<signature="static func -(Double, Double) -> Double">
				<isStatic="True">
				<returnType="Double">
				<Parameters>
					<Parameter="Double">
					<Parameter="Double">
				</Parameters>
			</Method>
			<Method>
				<name="-=">
				<signature="static func -=(Double, Double)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Double">
					<Parameter="Double">
				</Parameters>
			</Method>
			<Method>
				<name="/">
				<signature="static func /(Double, Double) -> Double">
				<isStatic="True">
				<returnType="Double">
				<Parameters>
					<Parameter="Double">
					<Parameter="Double">
				</Parameters>
			</Method>
			<Method>
				<name="/=">
				<signature="static func /=(Double, Double)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Double">
					<Parameter="Double">
				</Parameters>
			</Method>
			<Method>
				<name="addProduct">
				<signature="func addProduct(Double, Double)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="Double">
					<Parameter="Double">
				</Parameters>
			</Method>
			<Method>
				<name="advanced">
				<signature="func advanced(by: Double) -> Double">
				<isStatic="False">
				<returnType="Double">
				<Parameters>
					<Parameter="by: Double">
				</Parameters>
			</Method>
			<Method>
				<name="distance">
				<signature="func distance(to: Double) -> Double">
				<isStatic="False">
				<returnType="Double">
				<Parameters>
					<Parameter="to: Double">
				</Parameters>
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(to: Swift.Encoder)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="to: Swift.Encoder">
				</Parameters>
			</Method>
			<Method>
				<name="formRemainder">
				<signature="func formRemainder(dividingBy: Double)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="dividingBy: Double">
				</Parameters>
			</Method>
			<Method>
				<name="formSquareRoot">
				<signature="func formSquareRoot()">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="formTruncatingRemainder">
				<signature="func formTruncatingRemainder(dividingBy: Double)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="dividingBy: Double">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
			<Method>
				<name="isEqual">
				<signature="func isEqual(to: Double) -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
					<Parameter="to: Double">
				</Parameters>
			</Method>
			<Method>
				<name="isLess">
				<signature="func isLess(than: Double) -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
					<Parameter="than: Double">
				</Parameters>
			</Method>
			<Method>
				<name="isLessThanOrEqualTo">
				<signature="func isLessThanOrEqualToDouble -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="negate">
				<signature="func negate()">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="round">
				<signature="func roundSwift.FloatingPointRoundingRule">
				<isStatic="False">
				<returnType="()">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="write">
				<signature="func write(to: Self)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="to: Self">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Double.SIMD16Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Double.SIMD2Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Double.SIMD32Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Double.SIMD4Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Double.SIMD64Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Double.SIMD8Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.DropFirstSequence">
			<Method>
				<name="dropFirst">
				<signature="func dropFirstInt -> Swift.DropFirstSequence(Self)">
				<isStatic="False">
				<returnType="Swift.DropFirstSequence<(0,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="makeIterator">
				<signature="func makeIterator() -> Self.Iterator">
				<isStatic="False">
				<returnType="(0,0)A0.Iterator">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.DropWhileSequence">
			<Method>
				<name="drop">
				<signature="func drop(while: Self.Element -> Bool) -> Swift.DropWhileSequence(Self)">
				<isStatic="False">
				<returnType="Swift.DropWhileSequence<(0,0)>">
				<Parameters>
					<Parameter="while: Self.Element -> Bool">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.DropWhileSequence.Iterator">
			<Method>
				<name="next">
				<signature="func next() -> Self.Element?">
				<isStatic="False">
				<returnType="Swift.Optional<(0,0)A0.Element>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.EmptyCollection">
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Int">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Int">
				<Static="False">
			</Property>
			<Method>
				<name="==">
				<signature="static func ==(Swift.EmptyCollection(Self), Swift.EmptyCollection(Self)) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.EmptyCollection(Self">
				</Parameters>
			</Method>
			<Method>
				<name="distance">
				<signature="func distance(from: Int, to: Int) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="from: Int">
					<Parameter="to: Int">
				</Parameters>
			</Method>
			<Method>
				<name="index">
				<signature="func index(after: Int) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="after: Int">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.EmptyCollection.Iterator">
			<Method>
				<name="next">
				<signature="func next() -> Self?">
				<isStatic="False">
				<returnType="Swift.Optional<(0,0)>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.EncodingError.Context">
			<Property>
				<name="codingPath">
				<signature="var codingPath: Swift.Array(Swift.CodingKey)">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="underlyingError">
				<signature="var underlyingError: Error?">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.EnumeratedSequence">
		</Struct>
		<Struct name="Swift.EnumeratedSequence.Iterator">
			<Method>
				<name="next">
				<signature="func next() -> (offset: Int, element: Self.Element)?">
				<isStatic="False">
				<returnType="Swift.Optional<(offset: offset: Int, element: element: (0,0)A0.Element)>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.FlattenSequence">
		</Struct>
		<Struct name="Swift.FlattenSequence.Iterator">
			<Method>
				<name="next">
				<signature="func next() -> Self.Element.Element?">
				<isStatic="False">
				<returnType="Swift.Optional<(0,0)A0.Element.Element>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Float">
			<Property>
				<name="binade">
				<signature="var binade: Float">
				<Static="False">
			</Property>
			<Property>
				<name="bitPattern">
				<signature="var bitPattern: Swift.UInt32">
				<Static="False">
			</Property>
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="exponent">
				<signature="var exponent: Int">
				<Static="False">
			</Property>
			<Property>
				<name="exponentBitCount">
				<signature="static var exponentBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="exponentBitPattern">
				<signature="var exponentBitPattern: UInt">
				<Static="False">
			</Property>
			<Property>
				<name="greatestFiniteMagnitude">
				<signature="static var greatestFiniteMagnitude: Float">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="infinity">
				<signature="static var infinity: Float">
				<Static="False">
			</Property>
			<Property>
				<name="isCanonical">
				<signature="var isCanonical: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isFinite">
				<signature="var isFinite: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isInfinite">
				<signature="var isInfinite: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isNaN">
				<signature="var isNaN: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isNormal">
				<signature="var isNormal: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isSignMinus">
				<signature="var isSignMinus: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isSignalingNaN">
				<signature="var isSignalingNaN: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isSubnormal">
				<signature="var isSubnormal: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isZero">
				<signature="var isZero: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="leastNonzeroMagnitude">
				<signature="static var leastNonzeroMagnitude: Float">
				<Static="False">
			</Property>
			<Property>
				<name="leastNormalMagnitude">
				<signature="static var leastNormalMagnitude: Float">
				<Static="False">
			</Property>
			<Property>
				<name="magnitude">
				<signature="var magnitude: Float">
				<Static="False">
			</Property>
			<Property>
				<name="nan">
				<signature="static var nan: Float">
				<Static="False">
			</Property>
			<Property>
				<name="nextUp">
				<signature="var nextUp: Float">
				<Static="False">
			</Property>
			<Property>
				<name="pi">
				<signature="static var pi: Float">
				<Static="False">
			</Property>
			<Property>
				<name="quietNaN">
				<signature="static var quietNaN: Float">
				<Static="False">
			</Property>
			<Property>
				<name="sign">
				<signature="var sign: Swift.FloatingPointSign">
				<Static="False">
			</Property>
			<Property>
				<name="signalingNaN">
				<signature="static var signalingNaN: Float">
				<Static="False">
			</Property>
			<Property>
				<name="significand">
				<signature="var significand: Float">
				<Static="False">
			</Property>
			<Property>
				<name="significandBitCount">
				<signature="static var significandBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="significandBitPattern">
				<signature="var significandBitPattern: Swift.UInt32">
				<Static="False">
			</Property>
			<Property>
				<name="significandWidth">
				<signature="var significandWidth: Int">
				<Static="False">
			</Property>
			<Property>
				<name="ulp">
				<signature="var ulp: Float">
				<Static="False">
			</Property>
			<Property>
				<name="ulpOfOne">
				<signature="static var ulpOfOne: Float">
				<Static="False">
			</Property>
			<Method>
				<name="*">
				<signature="static func *(Float, Float) -> Float">
				<isStatic="True">
				<returnType="Float">
				<Parameters>
					<Parameter="Float">
					<Parameter="Float">
				</Parameters>
			</Method>
			<Method>
				<name="*=">
				<signature="static func *=(Float, Float)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Float">
					<Parameter="Float">
				</Parameters>
			</Method>
			<Method>
				<name="+">
				<signature="static func +(Float, Float) -> Float">
				<isStatic="True">
				<returnType="Float">
				<Parameters>
					<Parameter="Float">
					<Parameter="Float">
				</Parameters>
			</Method>
			<Method>
				<name="+=">
				<signature="static func +=(Float, Float)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Float">
					<Parameter="Float">
				</Parameters>
			</Method>
			<Method>
				<name="-">
				<signature="static func -(Float, Float) -> Float">
				<isStatic="True">
				<returnType="Float">
				<Parameters>
					<Parameter="Float">
					<Parameter="Float">
				</Parameters>
			</Method>
			<Method>
				<name="-=">
				<signature="static func -=(Float, Float)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Float">
					<Parameter="Float">
				</Parameters>
			</Method>
			<Method>
				<name="/">
				<signature="static func /(Float, Float) -> Float">
				<isStatic="True">
				<returnType="Float">
				<Parameters>
					<Parameter="Float">
					<Parameter="Float">
				</Parameters>
			</Method>
			<Method>
				<name="/=">
				<signature="static func /=(Float, Float)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Float">
					<Parameter="Float">
				</Parameters>
			</Method>
			<Method>
				<name="addProduct">
				<signature="func addProduct(Float, Float)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="Float">
					<Parameter="Float">
				</Parameters>
			</Method>
			<Method>
				<name="advanced">
				<signature="func advanced(by: Float) -> Float">
				<isStatic="False">
				<returnType="Float">
				<Parameters>
					<Parameter="by: Float">
				</Parameters>
			</Method>
			<Method>
				<name="distance">
				<signature="func distance(to: Float) -> Float">
				<isStatic="False">
				<returnType="Float">
				<Parameters>
					<Parameter="to: Float">
				</Parameters>
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(to: Swift.Encoder)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="to: Swift.Encoder">
				</Parameters>
			</Method>
			<Method>
				<name="formRemainder">
				<signature="func formRemainder(dividingBy: Float)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="dividingBy: Float">
				</Parameters>
			</Method>
			<Method>
				<name="formSquareRoot">
				<signature="func formSquareRoot()">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="formTruncatingRemainder">
				<signature="func formTruncatingRemainder(dividingBy: Float)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="dividingBy: Float">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
			<Method>
				<name="isEqual">
				<signature="func isEqual(to: Float) -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
					<Parameter="to: Float">
				</Parameters>
			</Method>
			<Method>
				<name="isLess">
				<signature="func isLess(than: Float) -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
					<Parameter="than: Float">
				</Parameters>
			</Method>
			<Method>
				<name="isLessThanOrEqualTo">
				<signature="func isLessThanOrEqualToFloat -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="negate">
				<signature="func negate()">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="round">
				<signature="func roundSwift.FloatingPointRoundingRule">
				<isStatic="False">
				<returnType="()">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="write">
				<signature="func write(to: Self)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="to: Self">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Float.SIMD16Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Float.SIMD2Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Float.SIMD32Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Float.SIMD4Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Float.SIMD64Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Float.SIMD8Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Float16">
			<Property>
				<name="binade">
				<signature="var binade: Swift.Float16">
				<Static="False">
			</Property>
			<Property>
				<name="bitPattern">
				<signature="var bitPattern: Swift.UInt16">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="exponent">
				<signature="var exponent: Int">
				<Static="False">
			</Property>
			<Property>
				<name="exponentBitCount">
				<signature="static var exponentBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="exponentBitPattern">
				<signature="var exponentBitPattern: UInt">
				<Static="False">
			</Property>
			<Property>
				<name="greatestFiniteMagnitude">
				<signature="static var greatestFiniteMagnitude: Swift.Float16">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="infinity">
				<signature="static var infinity: Swift.Float16">
				<Static="False">
			</Property>
			<Property>
				<name="isCanonical">
				<signature="var isCanonical: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isFinite">
				<signature="var isFinite: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isInfinite">
				<signature="var isInfinite: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isNaN">
				<signature="var isNaN: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isNormal">
				<signature="var isNormal: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isSignMinus">
				<signature="var isSignMinus: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isSignalingNaN">
				<signature="var isSignalingNaN: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isSubnormal">
				<signature="var isSubnormal: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isZero">
				<signature="var isZero: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="leastNonzeroMagnitude">
				<signature="static var leastNonzeroMagnitude: Swift.Float16">
				<Static="False">
			</Property>
			<Property>
				<name="leastNormalMagnitude">
				<signature="static var leastNormalMagnitude: Swift.Float16">
				<Static="False">
			</Property>
			<Property>
				<name="magnitude">
				<signature="var magnitude: Swift.Float16">
				<Static="False">
			</Property>
			<Property>
				<name="nan">
				<signature="static var nan: Swift.Float16">
				<Static="False">
			</Property>
			<Property>
				<name="nextUp">
				<signature="var nextUp: Swift.Float16">
				<Static="False">
			</Property>
			<Property>
				<name="pi">
				<signature="static var pi: Swift.Float16">
				<Static="False">
			</Property>
			<Property>
				<name="quietNaN">
				<signature="static var quietNaN: Swift.Float16">
				<Static="False">
			</Property>
			<Property>
				<name="sign">
				<signature="var sign: Swift.FloatingPointSign">
				<Static="False">
			</Property>
			<Property>
				<name="signalingNaN">
				<signature="static var signalingNaN: Swift.Float16">
				<Static="False">
			</Property>
			<Property>
				<name="significand">
				<signature="var significand: Swift.Float16">
				<Static="False">
			</Property>
			<Property>
				<name="significandBitCount">
				<signature="static var significandBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="significandBitPattern">
				<signature="var significandBitPattern: Swift.UInt16">
				<Static="False">
			</Property>
			<Property>
				<name="significandWidth">
				<signature="var significandWidth: Int">
				<Static="False">
			</Property>
			<Property>
				<name="ulp">
				<signature="var ulp: Swift.Float16">
				<Static="False">
			</Property>
			<Property>
				<name="ulpOfOne">
				<signature="static var ulpOfOne: Swift.Float16">
				<Static="False">
			</Property>
			<Method>
				<name="*">
				<signature="static func *(Swift.Float16, Swift.Float16) -> Swift.Float16">
				<isStatic="True">
				<returnType="Swift.Float16">
				<Parameters>
					<Parameter="Swift.Float16">
					<Parameter="Swift.Float16">
				</Parameters>
			</Method>
			<Method>
				<name="*=">
				<signature="static func *=(Swift.Float16, Swift.Float16)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Float16">
					<Parameter="Swift.Float16">
				</Parameters>
			</Method>
			<Method>
				<name="+">
				<signature="static func +(Swift.Float16, Swift.Float16) -> Swift.Float16">
				<isStatic="True">
				<returnType="Swift.Float16">
				<Parameters>
					<Parameter="Swift.Float16">
					<Parameter="Swift.Float16">
				</Parameters>
			</Method>
			<Method>
				<name="+=">
				<signature="static func +=(Swift.Float16, Swift.Float16)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Float16">
					<Parameter="Swift.Float16">
				</Parameters>
			</Method>
			<Method>
				<name="-">
				<signature="static func -(Swift.Float16, Swift.Float16) -> Swift.Float16">
				<isStatic="True">
				<returnType="Swift.Float16">
				<Parameters>
					<Parameter="Swift.Float16">
					<Parameter="Swift.Float16">
				</Parameters>
			</Method>
			<Method>
				<name="-=">
				<signature="static func -=(Swift.Float16, Swift.Float16)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Float16">
					<Parameter="Swift.Float16">
				</Parameters>
			</Method>
			<Method>
				<name="/">
				<signature="static func /(Swift.Float16, Swift.Float16) -> Swift.Float16">
				<isStatic="True">
				<returnType="Swift.Float16">
				<Parameters>
					<Parameter="Swift.Float16">
					<Parameter="Swift.Float16">
				</Parameters>
			</Method>
			<Method>
				<name="/=">
				<signature="static func /=(Swift.Float16, Swift.Float16)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Float16">
					<Parameter="Swift.Float16">
				</Parameters>
			</Method>
			<Method>
				<name="addProduct">
				<signature="func addProduct(Swift.Float16, Swift.Float16)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Float16">
					<Parameter="Swift.Float16">
				</Parameters>
			</Method>
			<Method>
				<name="advanced">
				<signature="func advanced(by: Swift.Float16) -> Swift.Float16">
				<isStatic="False">
				<returnType="Swift.Float16">
				<Parameters>
					<Parameter="by: Swift.Float16">
				</Parameters>
			</Method>
			<Method>
				<name="distance">
				<signature="func distance(to: Swift.Float16) -> Swift.Float16">
				<isStatic="False">
				<returnType="Swift.Float16">
				<Parameters>
					<Parameter="to: Swift.Float16">
				</Parameters>
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(to: Swift.Encoder)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="to: Swift.Encoder">
				</Parameters>
			</Method>
			<Method>
				<name="formRemainder">
				<signature="func formRemainder(dividingBy: Swift.Float16)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="dividingBy: Swift.Float16">
				</Parameters>
			</Method>
			<Method>
				<name="formSquareRoot">
				<signature="func formSquareRoot()">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="formTruncatingRemainder">
				<signature="func formTruncatingRemainder(dividingBy: Swift.Float16)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="dividingBy: Swift.Float16">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
			<Method>
				<name="isEqual">
				<signature="func isEqual(to: Swift.Float16) -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
					<Parameter="to: Swift.Float16">
				</Parameters>
			</Method>
			<Method>
				<name="isLess">
				<signature="func isLess(than: Swift.Float16) -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
					<Parameter="than: Swift.Float16">
				</Parameters>
			</Method>
			<Method>
				<name="isLessThanOrEqualTo">
				<signature="func isLessThanOrEqualToSwift.Float16 -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="negate">
				<signature="func negate()">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="round">
				<signature="func roundSwift.FloatingPointRoundingRule">
				<isStatic="False">
				<returnType="()">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="write">
				<signature="func write(to: Self)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="to: Self">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Float16.SIMD16Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Float16.SIMD2Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Float16.SIMD32Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Float16.SIMD4Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Float16.SIMD64Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Float16.SIMD8Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Float80">
		</Struct>
		<Struct name="Swift.Hasher">
			<Method>
				<name="combine">
				<signature="func combine(bytes: Swift.UnsafeRawBufferPointer)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="bytes: Swift.UnsafeRawBufferPointer">
				</Parameters>
			</Method>
			<Method>
				<name="finalize">
				<signature="func finalize() -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.IndexingIterator">
			<Method>
				<name="next">
				<signature="func next() -> Self.Element?">
				<isStatic="False">
				<returnType="Swift.Optional<(0,0)A0.Element>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Int">
			<Property>
				<name="bitWidth">
				<signature="static var bitWidth: Int">
				<Static="False">
			</Property>
			<Property>
				<name="byteSwapped">
				<signature="var byteSwapped: Int">
				<Static="False">
			</Property>
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="leadingZeroBitCount">
				<signature="var leadingZeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="magnitude">
				<signature="var magnitude: UInt">
				<Static="False">
			</Property>
			<Property>
				<name="nonzeroBitCount">
				<signature="var nonzeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="trailingZeroBitCount">
				<signature="var trailingZeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="words">
				<signature="var words: Swift.Int.Words">
				<Static="False">
			</Property>
			<Method>
				<name="%">
				<signature="static func %(Int, Int) -> Int">
				<isStatic="True">
				<returnType="Int">
				<Parameters>
					<Parameter="Int">
					<Parameter="Int">
				</Parameters>
			</Method>
			<Method>
				<name="%=">
				<signature="static func %=(Int, Int)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Int">
					<Parameter="Int">
				</Parameters>
			</Method>
			<Method>
				<name="&">
				<signature="static func &(Int, Int) -> Int">
				<isStatic="True">
				<returnType="Int">
				<Parameters>
					<Parameter="Int">
					<Parameter="Int">
				</Parameters>
			</Method>
			<Method>
				<name="&<<">
				<signature="static func &(((Int, Int) -) Int">
				<isStatic="True">
				<returnType="Int">
				<Parameters>
					<Parameter="((Int">
					<Parameter="Int">
				</Parameters>
			</Method>
			<Method>
				<name="&<<=">
				<signature="static func &((=(Int, Int)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="(=(Int">
					<Parameter="Int">
				</Parameters>
			</Method>
			<Method>
				<name="&=">
				<signature="static func &=(Int, Int)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Int">
					<Parameter="Int">
				</Parameters>
			</Method>
			<Method>
				<name="&>>">
				<signature="static func &>>(Int, Int) -> Int">
				<isStatic="True">
				<returnType="Int">
				<Parameters>
					<Parameter="Int">
					<Parameter="Int">
				</Parameters>
			</Method>
			<Method>
				<name="&>>=">
				<signature="static func &>>=(Int, Int)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Int">
					<Parameter="Int">
				</Parameters>
			</Method>
			<Method>
				<name="*">
				<signature="static func *(Int, Int) -> Int">
				<isStatic="True">
				<returnType="Int">
				<Parameters>
					<Parameter="Int">
					<Parameter="Int">
				</Parameters>
			</Method>
			<Method>
				<name="*=">
				<signature="static func *=(Int, Int)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Int">
					<Parameter="Int">
				</Parameters>
			</Method>
			<Method>
				<name="+">
				<signature="static func +(Int, Int) -> Int">
				<isStatic="True">
				<returnType="Int">
				<Parameters>
					<Parameter="Int">
					<Parameter="Int">
				</Parameters>
			</Method>
			<Method>
				<name="+=">
				<signature="static func +=(Int, Int)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Int">
					<Parameter="Int">
				</Parameters>
			</Method>
			<Method>
				<name="-">
				<signature="static func -(Int, Int) -> Int">
				<isStatic="True">
				<returnType="Int">
				<Parameters>
					<Parameter="Int">
					<Parameter="Int">
				</Parameters>
			</Method>
			<Method>
				<name="-=">
				<signature="static func -=(Int, Int)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Int">
					<Parameter="Int">
				</Parameters>
			</Method>
			<Method>
				<name="/">
				<signature="static func /(Int, Int) -> Int">
				<isStatic="True">
				<returnType="Int">
				<Parameters>
					<Parameter="Int">
					<Parameter="Int">
				</Parameters>
			</Method>
			<Method>
				<name="/=">
				<signature="static func /=(Int, Int)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Int">
					<Parameter="Int">
				</Parameters>
			</Method>
			<Method>
				<name="<">
				<signature="static func ((Int, Int) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="(Int">
					<Parameter="Int">
				</Parameters>
			</Method>
			<Method>
				<name="<=">
				<signature="static func (=(Int, Int) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="=(Int">
					<Parameter="Int">
				</Parameters>
			</Method>
			<Method>
				<name="==">
				<signature="static func ==(Int, Int) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Int">
					<Parameter="Int">
				</Parameters>
			</Method>
			<Method>
				<name=">">
				<signature="static func >(Int, Int) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Int">
					<Parameter="Int">
				</Parameters>
			</Method>
			<Method>
				<name=">=">
				<signature="static func >=(Int, Int) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Int">
					<Parameter="Int">
				</Parameters>
			</Method>
			<Method>
				<name="^">
				<signature="static func ^(Int, Int) -> Int">
				<isStatic="True">
				<returnType="Int">
				<Parameters>
					<Parameter="Int">
					<Parameter="Int">
				</Parameters>
			</Method>
			<Method>
				<name="^=">
				<signature="static func ^=(Int, Int)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Int">
					<Parameter="Int">
				</Parameters>
			</Method>
			<Method>
				<name="addingReportingOverflow">
				<signature="func addingReportingOverflowInt -> (partialValue: Int, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Int, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="partialValue: Int">
					<Parameter="overflow: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="advanced">
				<signature="func advanced(by: Int) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="by: Int">
				</Parameters>
			</Method>
			<Method>
				<name="distance">
				<signature="func distance(to: Int) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="to: Int">
				</Parameters>
			</Method>
			<Method>
				<name="dividedReportingOverflow">
				<signature="func dividedReportingOverflow(by: Int) -> (partialValue: Int, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Int, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="by: Int">
				</Parameters>
			</Method>
			<Method>
				<name="dividingFullWidth">
				<signature="func dividingFullWidth((high: Int, low: UInt)) -> (quotient: Int, remainder: Int)">
				<isStatic="False">
				<returnType="(quotient: quotient: Int, remainder: remainder: Int)">
				<Parameters>
					<Parameter="(high: Int">
					<Parameter="low: UInt">
				</Parameters>
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(to: Swift.Encoder)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="to: Swift.Encoder">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
			<Method>
				<name="multipliedFullWidth">
				<signature="func multipliedFullWidth(by: Int) -> (high: Int, low: UInt)">
				<isStatic="False">
				<returnType="(high: high: Int, low: low: UInt)">
				<Parameters>
					<Parameter="by: Int">
				</Parameters>
			</Method>
			<Method>
				<name="multipliedReportingOverflow">
				<signature="func multipliedReportingOverflow(by: Int) -> (partialValue: Int, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Int, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="by: Int">
				</Parameters>
			</Method>
			<Method>
				<name="remainderReportingOverflow">
				<signature="func remainderReportingOverflow(dividingBy: Int) -> (partialValue: Int, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Int, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="dividingBy: Int">
				</Parameters>
			</Method>
			<Method>
				<name="signum">
				<signature="func signum() -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="subtractingReportingOverflow">
				<signature="func subtractingReportingOverflowInt -> (partialValue: Int, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Int, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="partialValue: Int">
					<Parameter="overflow: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="|">
				<signature="static func |(Int, Int) -> Int">
				<isStatic="True">
				<returnType="Int">
				<Parameters>
					<Parameter="Int">
					<Parameter="Int">
				</Parameters>
			</Method>
			<Method>
				<name="|=">
				<signature="static func |=(Int, Int)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Int">
					<Parameter="Int">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Int.SIMD16Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int.SIMD2Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int.SIMD32Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int.SIMD4Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int.SIMD64Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int.SIMD8Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int.Words">
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Int">
				<Static="False">
			</Property>
			<Property>
				<name="indices">
				<signature="var indices: Swift.Range(Int)">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Int">
				<Static="False">
			</Property>
			<Method>
				<name="index">
				<signature="func index(after: Int) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="after: Int">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Int16">
			<Property>
				<name="bitWidth">
				<signature="static var bitWidth: Int">
				<Static="False">
			</Property>
			<Property>
				<name="byteSwapped">
				<signature="var byteSwapped: Swift.Int16">
				<Static="False">
			</Property>
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="leadingZeroBitCount">
				<signature="var leadingZeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="magnitude">
				<signature="var magnitude: Swift.UInt16">
				<Static="False">
			</Property>
			<Property>
				<name="nonzeroBitCount">
				<signature="var nonzeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="trailingZeroBitCount">
				<signature="var trailingZeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="words">
				<signature="var words: Swift.Int16.Words">
				<Static="False">
			</Property>
			<Method>
				<name="%">
				<signature="static func %(Swift.Int16, Swift.Int16) -> Swift.Int16">
				<isStatic="True">
				<returnType="Swift.Int16">
				<Parameters>
					<Parameter="Swift.Int16">
					<Parameter="Swift.Int16">
				</Parameters>
			</Method>
			<Method>
				<name="%=">
				<signature="static func %=(Swift.Int16, Swift.Int16)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int16">
					<Parameter="Swift.Int16">
				</Parameters>
			</Method>
			<Method>
				<name="&">
				<signature="static func &(Swift.Int16, Swift.Int16) -> Swift.Int16">
				<isStatic="True">
				<returnType="Swift.Int16">
				<Parameters>
					<Parameter="Swift.Int16">
					<Parameter="Swift.Int16">
				</Parameters>
			</Method>
			<Method>
				<name="&<<">
				<signature="static func &(((Swift.Int16, Swift.Int16) -) Swift.Int16">
				<isStatic="True">
				<returnType="Swift.Int16">
				<Parameters>
					<Parameter="((Swift.Int16">
					<Parameter="Swift.Int16">
				</Parameters>
			</Method>
			<Method>
				<name="&<<=">
				<signature="static func &((=(Swift.Int16, Swift.Int16)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="(=(Swift.Int16">
					<Parameter="Swift.Int16">
				</Parameters>
			</Method>
			<Method>
				<name="&=">
				<signature="static func &=(Swift.Int16, Swift.Int16)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int16">
					<Parameter="Swift.Int16">
				</Parameters>
			</Method>
			<Method>
				<name="&>>">
				<signature="static func &>>(Swift.Int16, Swift.Int16) -> Swift.Int16">
				<isStatic="True">
				<returnType="Swift.Int16">
				<Parameters>
					<Parameter="Swift.Int16">
					<Parameter="Swift.Int16">
				</Parameters>
			</Method>
			<Method>
				<name="&>>=">
				<signature="static func &>>=(Swift.Int16, Swift.Int16)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int16">
					<Parameter="Swift.Int16">
				</Parameters>
			</Method>
			<Method>
				<name="*">
				<signature="static func *(Swift.Int16, Swift.Int16) -> Swift.Int16">
				<isStatic="True">
				<returnType="Swift.Int16">
				<Parameters>
					<Parameter="Swift.Int16">
					<Parameter="Swift.Int16">
				</Parameters>
			</Method>
			<Method>
				<name="*=">
				<signature="static func *=(Swift.Int16, Swift.Int16)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int16">
					<Parameter="Swift.Int16">
				</Parameters>
			</Method>
			<Method>
				<name="+">
				<signature="static func +(Swift.Int16, Swift.Int16) -> Swift.Int16">
				<isStatic="True">
				<returnType="Swift.Int16">
				<Parameters>
					<Parameter="Swift.Int16">
					<Parameter="Swift.Int16">
				</Parameters>
			</Method>
			<Method>
				<name="+=">
				<signature="static func +=(Swift.Int16, Swift.Int16)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int16">
					<Parameter="Swift.Int16">
				</Parameters>
			</Method>
			<Method>
				<name="-">
				<signature="static func -(Swift.Int16, Swift.Int16) -> Swift.Int16">
				<isStatic="True">
				<returnType="Swift.Int16">
				<Parameters>
					<Parameter="Swift.Int16">
					<Parameter="Swift.Int16">
				</Parameters>
			</Method>
			<Method>
				<name="-=">
				<signature="static func -=(Swift.Int16, Swift.Int16)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int16">
					<Parameter="Swift.Int16">
				</Parameters>
			</Method>
			<Method>
				<name="/">
				<signature="static func /(Swift.Int16, Swift.Int16) -> Swift.Int16">
				<isStatic="True">
				<returnType="Swift.Int16">
				<Parameters>
					<Parameter="Swift.Int16">
					<Parameter="Swift.Int16">
				</Parameters>
			</Method>
			<Method>
				<name="/=">
				<signature="static func /=(Swift.Int16, Swift.Int16)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int16">
					<Parameter="Swift.Int16">
				</Parameters>
			</Method>
			<Method>
				<name="<">
				<signature="static func ((Swift.Int16, Swift.Int16) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="(Swift.Int16">
					<Parameter="Swift.Int16">
				</Parameters>
			</Method>
			<Method>
				<name="<=">
				<signature="static func (=(Swift.Int16, Swift.Int16) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="=(Swift.Int16">
					<Parameter="Swift.Int16">
				</Parameters>
			</Method>
			<Method>
				<name="==">
				<signature="static func ==(Swift.Int16, Swift.Int16) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.Int16">
					<Parameter="Swift.Int16">
				</Parameters>
			</Method>
			<Method>
				<name=">">
				<signature="static func >(Swift.Int16, Swift.Int16) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.Int16">
					<Parameter="Swift.Int16">
				</Parameters>
			</Method>
			<Method>
				<name=">=">
				<signature="static func >=(Swift.Int16, Swift.Int16) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.Int16">
					<Parameter="Swift.Int16">
				</Parameters>
			</Method>
			<Method>
				<name="^">
				<signature="static func ^(Swift.Int16, Swift.Int16) -> Swift.Int16">
				<isStatic="True">
				<returnType="Swift.Int16">
				<Parameters>
					<Parameter="Swift.Int16">
					<Parameter="Swift.Int16">
				</Parameters>
			</Method>
			<Method>
				<name="^=">
				<signature="static func ^=(Swift.Int16, Swift.Int16)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int16">
					<Parameter="Swift.Int16">
				</Parameters>
			</Method>
			<Method>
				<name="addingReportingOverflow">
				<signature="func addingReportingOverflowSwift.Int16 -> (partialValue: Swift.Int16, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.Int16, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="partialValue: Swift.Int16">
					<Parameter="overflow: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="dividedReportingOverflow">
				<signature="func dividedReportingOverflow(by: Swift.Int16) -> (partialValue: Swift.Int16, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.Int16, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="by: Swift.Int16">
				</Parameters>
			</Method>
			<Method>
				<name="dividingFullWidth">
				<signature="func dividingFullWidth((high: Swift.Int16, low: Swift.UInt16)) -> (quotient: Swift.Int16, remainder: Swift.Int16)">
				<isStatic="False">
				<returnType="(quotient: quotient: Swift.Int16, remainder: remainder: Swift.Int16)">
				<Parameters>
					<Parameter="(high: Swift.Int16">
					<Parameter="low: Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(to: Swift.Encoder)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="to: Swift.Encoder">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
			<Method>
				<name="multipliedFullWidth">
				<signature="func multipliedFullWidth(by: Swift.Int16) -> (high: Swift.Int16, low: Swift.UInt16)">
				<isStatic="False">
				<returnType="(high: high: Swift.Int16, low: low: Swift.UInt16)">
				<Parameters>
					<Parameter="by: Swift.Int16">
				</Parameters>
			</Method>
			<Method>
				<name="multipliedReportingOverflow">
				<signature="func multipliedReportingOverflow(by: Swift.Int16) -> (partialValue: Swift.Int16, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.Int16, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="by: Swift.Int16">
				</Parameters>
			</Method>
			<Method>
				<name="remainderReportingOverflow">
				<signature="func remainderReportingOverflow(dividingBy: Swift.Int16) -> (partialValue: Swift.Int16, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.Int16, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="dividingBy: Swift.Int16">
				</Parameters>
			</Method>
			<Method>
				<name="signum">
				<signature="func signum() -> Swift.Int16">
				<isStatic="False">
				<returnType="Swift.Int16">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="subtractingReportingOverflow">
				<signature="func subtractingReportingOverflowSwift.Int16 -> (partialValue: Swift.Int16, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.Int16, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="partialValue: Swift.Int16">
					<Parameter="overflow: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="|">
				<signature="static func |(Swift.Int16, Swift.Int16) -> Swift.Int16">
				<isStatic="True">
				<returnType="Swift.Int16">
				<Parameters>
					<Parameter="Swift.Int16">
					<Parameter="Swift.Int16">
				</Parameters>
			</Method>
			<Method>
				<name="|=">
				<signature="static func |=(Swift.Int16, Swift.Int16)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int16">
					<Parameter="Swift.Int16">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Int16.SIMD16Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int16.SIMD2Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int16.SIMD32Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int16.SIMD4Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int16.SIMD64Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int16.SIMD8Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int16.Words">
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Int">
				<Static="False">
			</Property>
			<Property>
				<name="indices">
				<signature="var indices: Swift.Range(Int)">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Int">
				<Static="False">
			</Property>
			<Method>
				<name="index">
				<signature="func index(after: Int) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="after: Int">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Int32">
			<Property>
				<name="bitWidth">
				<signature="static var bitWidth: Int">
				<Static="False">
			</Property>
			<Property>
				<name="byteSwapped">
				<signature="var byteSwapped: Swift.Int32">
				<Static="False">
			</Property>
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="leadingZeroBitCount">
				<signature="var leadingZeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="magnitude">
				<signature="var magnitude: Swift.UInt32">
				<Static="False">
			</Property>
			<Property>
				<name="nonzeroBitCount">
				<signature="var nonzeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="trailingZeroBitCount">
				<signature="var trailingZeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="words">
				<signature="var words: Swift.Int32.Words">
				<Static="False">
			</Property>
			<Method>
				<name="%">
				<signature="static func %(Swift.Int32, Swift.Int32) -> Swift.Int32">
				<isStatic="True">
				<returnType="Swift.Int32">
				<Parameters>
					<Parameter="Swift.Int32">
					<Parameter="Swift.Int32">
				</Parameters>
			</Method>
			<Method>
				<name="%=">
				<signature="static func %=(Swift.Int32, Swift.Int32)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int32">
					<Parameter="Swift.Int32">
				</Parameters>
			</Method>
			<Method>
				<name="&">
				<signature="static func &(Swift.Int32, Swift.Int32) -> Swift.Int32">
				<isStatic="True">
				<returnType="Swift.Int32">
				<Parameters>
					<Parameter="Swift.Int32">
					<Parameter="Swift.Int32">
				</Parameters>
			</Method>
			<Method>
				<name="&<<">
				<signature="static func &(((Swift.Int32, Swift.Int32) -) Swift.Int32">
				<isStatic="True">
				<returnType="Swift.Int32">
				<Parameters>
					<Parameter="((Swift.Int32">
					<Parameter="Swift.Int32">
				</Parameters>
			</Method>
			<Method>
				<name="&<<=">
				<signature="static func &((=(Swift.Int32, Swift.Int32)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="(=(Swift.Int32">
					<Parameter="Swift.Int32">
				</Parameters>
			</Method>
			<Method>
				<name="&=">
				<signature="static func &=(Swift.Int32, Swift.Int32)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int32">
					<Parameter="Swift.Int32">
				</Parameters>
			</Method>
			<Method>
				<name="&>>">
				<signature="static func &>>(Swift.Int32, Swift.Int32) -> Swift.Int32">
				<isStatic="True">
				<returnType="Swift.Int32">
				<Parameters>
					<Parameter="Swift.Int32">
					<Parameter="Swift.Int32">
				</Parameters>
			</Method>
			<Method>
				<name="&>>=">
				<signature="static func &>>=(Swift.Int32, Swift.Int32)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int32">
					<Parameter="Swift.Int32">
				</Parameters>
			</Method>
			<Method>
				<name="*">
				<signature="static func *(Swift.Int32, Swift.Int32) -> Swift.Int32">
				<isStatic="True">
				<returnType="Swift.Int32">
				<Parameters>
					<Parameter="Swift.Int32">
					<Parameter="Swift.Int32">
				</Parameters>
			</Method>
			<Method>
				<name="*=">
				<signature="static func *=(Swift.Int32, Swift.Int32)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int32">
					<Parameter="Swift.Int32">
				</Parameters>
			</Method>
			<Method>
				<name="+">
				<signature="static func +(Swift.Int32, Swift.Int32) -> Swift.Int32">
				<isStatic="True">
				<returnType="Swift.Int32">
				<Parameters>
					<Parameter="Swift.Int32">
					<Parameter="Swift.Int32">
				</Parameters>
			</Method>
			<Method>
				<name="+=">
				<signature="static func +=(Swift.Int32, Swift.Int32)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int32">
					<Parameter="Swift.Int32">
				</Parameters>
			</Method>
			<Method>
				<name="-">
				<signature="static func -(Swift.Int32, Swift.Int32) -> Swift.Int32">
				<isStatic="True">
				<returnType="Swift.Int32">
				<Parameters>
					<Parameter="Swift.Int32">
					<Parameter="Swift.Int32">
				</Parameters>
			</Method>
			<Method>
				<name="-=">
				<signature="static func -=(Swift.Int32, Swift.Int32)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int32">
					<Parameter="Swift.Int32">
				</Parameters>
			</Method>
			<Method>
				<name="/">
				<signature="static func /(Swift.Int32, Swift.Int32) -> Swift.Int32">
				<isStatic="True">
				<returnType="Swift.Int32">
				<Parameters>
					<Parameter="Swift.Int32">
					<Parameter="Swift.Int32">
				</Parameters>
			</Method>
			<Method>
				<name="/=">
				<signature="static func /=(Swift.Int32, Swift.Int32)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int32">
					<Parameter="Swift.Int32">
				</Parameters>
			</Method>
			<Method>
				<name="<">
				<signature="static func ((Swift.Int32, Swift.Int32) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="(Swift.Int32">
					<Parameter="Swift.Int32">
				</Parameters>
			</Method>
			<Method>
				<name="<=">
				<signature="static func (=(Swift.Int32, Swift.Int32) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="=(Swift.Int32">
					<Parameter="Swift.Int32">
				</Parameters>
			</Method>
			<Method>
				<name="==">
				<signature="static func ==(Swift.Int32, Swift.Int32) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.Int32">
					<Parameter="Swift.Int32">
				</Parameters>
			</Method>
			<Method>
				<name=">">
				<signature="static func >(Swift.Int32, Swift.Int32) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.Int32">
					<Parameter="Swift.Int32">
				</Parameters>
			</Method>
			<Method>
				<name=">=">
				<signature="static func >=(Swift.Int32, Swift.Int32) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.Int32">
					<Parameter="Swift.Int32">
				</Parameters>
			</Method>
			<Method>
				<name="^">
				<signature="static func ^(Swift.Int32, Swift.Int32) -> Swift.Int32">
				<isStatic="True">
				<returnType="Swift.Int32">
				<Parameters>
					<Parameter="Swift.Int32">
					<Parameter="Swift.Int32">
				</Parameters>
			</Method>
			<Method>
				<name="^=">
				<signature="static func ^=(Swift.Int32, Swift.Int32)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int32">
					<Parameter="Swift.Int32">
				</Parameters>
			</Method>
			<Method>
				<name="addingReportingOverflow">
				<signature="func addingReportingOverflowSwift.Int32 -> (partialValue: Swift.Int32, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.Int32, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="partialValue: Swift.Int32">
					<Parameter="overflow: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="dividedReportingOverflow">
				<signature="func dividedReportingOverflow(by: Swift.Int32) -> (partialValue: Swift.Int32, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.Int32, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="by: Swift.Int32">
				</Parameters>
			</Method>
			<Method>
				<name="dividingFullWidth">
				<signature="func dividingFullWidth((high: Swift.Int32, low: Swift.UInt32)) -> (quotient: Swift.Int32, remainder: Swift.Int32)">
				<isStatic="False">
				<returnType="(quotient: quotient: Swift.Int32, remainder: remainder: Swift.Int32)">
				<Parameters>
					<Parameter="(high: Swift.Int32">
					<Parameter="low: Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(to: Swift.Encoder)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="to: Swift.Encoder">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
			<Method>
				<name="multipliedFullWidth">
				<signature="func multipliedFullWidth(by: Swift.Int32) -> (high: Swift.Int32, low: Swift.UInt32)">
				<isStatic="False">
				<returnType="(high: high: Swift.Int32, low: low: Swift.UInt32)">
				<Parameters>
					<Parameter="by: Swift.Int32">
				</Parameters>
			</Method>
			<Method>
				<name="multipliedReportingOverflow">
				<signature="func multipliedReportingOverflow(by: Swift.Int32) -> (partialValue: Swift.Int32, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.Int32, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="by: Swift.Int32">
				</Parameters>
			</Method>
			<Method>
				<name="remainderReportingOverflow">
				<signature="func remainderReportingOverflow(dividingBy: Swift.Int32) -> (partialValue: Swift.Int32, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.Int32, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="dividingBy: Swift.Int32">
				</Parameters>
			</Method>
			<Method>
				<name="signum">
				<signature="func signum() -> Swift.Int32">
				<isStatic="False">
				<returnType="Swift.Int32">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="subtractingReportingOverflow">
				<signature="func subtractingReportingOverflowSwift.Int32 -> (partialValue: Swift.Int32, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.Int32, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="partialValue: Swift.Int32">
					<Parameter="overflow: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="|">
				<signature="static func |(Swift.Int32, Swift.Int32) -> Swift.Int32">
				<isStatic="True">
				<returnType="Swift.Int32">
				<Parameters>
					<Parameter="Swift.Int32">
					<Parameter="Swift.Int32">
				</Parameters>
			</Method>
			<Method>
				<name="|=">
				<signature="static func |=(Swift.Int32, Swift.Int32)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int32">
					<Parameter="Swift.Int32">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Int32.SIMD16Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int32.SIMD2Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int32.SIMD32Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int32.SIMD4Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int32.SIMD64Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int32.SIMD8Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int32.Words">
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Int">
				<Static="False">
			</Property>
			<Property>
				<name="indices">
				<signature="var indices: Swift.Range(Int)">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Int">
				<Static="False">
			</Property>
			<Method>
				<name="index">
				<signature="func index(after: Int) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="after: Int">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Int64">
			<Property>
				<name="bitWidth">
				<signature="static var bitWidth: Int">
				<Static="False">
			</Property>
			<Property>
				<name="byteSwapped">
				<signature="var byteSwapped: Swift.Int64">
				<Static="False">
			</Property>
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="leadingZeroBitCount">
				<signature="var leadingZeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="magnitude">
				<signature="var magnitude: Swift.UInt64">
				<Static="False">
			</Property>
			<Property>
				<name="nonzeroBitCount">
				<signature="var nonzeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="trailingZeroBitCount">
				<signature="var trailingZeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="words">
				<signature="var words: Swift.Int64.Words">
				<Static="False">
			</Property>
			<Method>
				<name="%">
				<signature="static func %(Swift.Int64, Swift.Int64) -> Swift.Int64">
				<isStatic="True">
				<returnType="Swift.Int64">
				<Parameters>
					<Parameter="Swift.Int64">
					<Parameter="Swift.Int64">
				</Parameters>
			</Method>
			<Method>
				<name="%=">
				<signature="static func %=(Swift.Int64, Swift.Int64)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int64">
					<Parameter="Swift.Int64">
				</Parameters>
			</Method>
			<Method>
				<name="&">
				<signature="static func &(Swift.Int64, Swift.Int64) -> Swift.Int64">
				<isStatic="True">
				<returnType="Swift.Int64">
				<Parameters>
					<Parameter="Swift.Int64">
					<Parameter="Swift.Int64">
				</Parameters>
			</Method>
			<Method>
				<name="&<<">
				<signature="static func &(((Swift.Int64, Swift.Int64) -) Swift.Int64">
				<isStatic="True">
				<returnType="Swift.Int64">
				<Parameters>
					<Parameter="((Swift.Int64">
					<Parameter="Swift.Int64">
				</Parameters>
			</Method>
			<Method>
				<name="&<<=">
				<signature="static func &((=(Swift.Int64, Swift.Int64)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="(=(Swift.Int64">
					<Parameter="Swift.Int64">
				</Parameters>
			</Method>
			<Method>
				<name="&=">
				<signature="static func &=(Swift.Int64, Swift.Int64)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int64">
					<Parameter="Swift.Int64">
				</Parameters>
			</Method>
			<Method>
				<name="&>>">
				<signature="static func &>>(Swift.Int64, Swift.Int64) -> Swift.Int64">
				<isStatic="True">
				<returnType="Swift.Int64">
				<Parameters>
					<Parameter="Swift.Int64">
					<Parameter="Swift.Int64">
				</Parameters>
			</Method>
			<Method>
				<name="&>>=">
				<signature="static func &>>=(Swift.Int64, Swift.Int64)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int64">
					<Parameter="Swift.Int64">
				</Parameters>
			</Method>
			<Method>
				<name="*">
				<signature="static func *(Swift.Int64, Swift.Int64) -> Swift.Int64">
				<isStatic="True">
				<returnType="Swift.Int64">
				<Parameters>
					<Parameter="Swift.Int64">
					<Parameter="Swift.Int64">
				</Parameters>
			</Method>
			<Method>
				<name="*=">
				<signature="static func *=(Swift.Int64, Swift.Int64)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int64">
					<Parameter="Swift.Int64">
				</Parameters>
			</Method>
			<Method>
				<name="+">
				<signature="static func +(Swift.Int64, Swift.Int64) -> Swift.Int64">
				<isStatic="True">
				<returnType="Swift.Int64">
				<Parameters>
					<Parameter="Swift.Int64">
					<Parameter="Swift.Int64">
				</Parameters>
			</Method>
			<Method>
				<name="+=">
				<signature="static func +=(Swift.Int64, Swift.Int64)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int64">
					<Parameter="Swift.Int64">
				</Parameters>
			</Method>
			<Method>
				<name="-">
				<signature="static func -(Swift.Int64, Swift.Int64) -> Swift.Int64">
				<isStatic="True">
				<returnType="Swift.Int64">
				<Parameters>
					<Parameter="Swift.Int64">
					<Parameter="Swift.Int64">
				</Parameters>
			</Method>
			<Method>
				<name="-=">
				<signature="static func -=(Swift.Int64, Swift.Int64)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int64">
					<Parameter="Swift.Int64">
				</Parameters>
			</Method>
			<Method>
				<name="/">
				<signature="static func /(Swift.Int64, Swift.Int64) -> Swift.Int64">
				<isStatic="True">
				<returnType="Swift.Int64">
				<Parameters>
					<Parameter="Swift.Int64">
					<Parameter="Swift.Int64">
				</Parameters>
			</Method>
			<Method>
				<name="/=">
				<signature="static func /=(Swift.Int64, Swift.Int64)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int64">
					<Parameter="Swift.Int64">
				</Parameters>
			</Method>
			<Method>
				<name="<">
				<signature="static func ((Swift.Int64, Swift.Int64) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="(Swift.Int64">
					<Parameter="Swift.Int64">
				</Parameters>
			</Method>
			<Method>
				<name="<=">
				<signature="static func (=(Swift.Int64, Swift.Int64) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="=(Swift.Int64">
					<Parameter="Swift.Int64">
				</Parameters>
			</Method>
			<Method>
				<name="==">
				<signature="static func ==(Swift.Int64, Swift.Int64) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.Int64">
					<Parameter="Swift.Int64">
				</Parameters>
			</Method>
			<Method>
				<name=">">
				<signature="static func >(Swift.Int64, Swift.Int64) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.Int64">
					<Parameter="Swift.Int64">
				</Parameters>
			</Method>
			<Method>
				<name=">=">
				<signature="static func >=(Swift.Int64, Swift.Int64) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.Int64">
					<Parameter="Swift.Int64">
				</Parameters>
			</Method>
			<Method>
				<name="^">
				<signature="static func ^(Swift.Int64, Swift.Int64) -> Swift.Int64">
				<isStatic="True">
				<returnType="Swift.Int64">
				<Parameters>
					<Parameter="Swift.Int64">
					<Parameter="Swift.Int64">
				</Parameters>
			</Method>
			<Method>
				<name="^=">
				<signature="static func ^=(Swift.Int64, Swift.Int64)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int64">
					<Parameter="Swift.Int64">
				</Parameters>
			</Method>
			<Method>
				<name="addingReportingOverflow">
				<signature="func addingReportingOverflowSwift.Int64 -> (partialValue: Swift.Int64, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.Int64, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="partialValue: Swift.Int64">
					<Parameter="overflow: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="dividedReportingOverflow">
				<signature="func dividedReportingOverflow(by: Swift.Int64) -> (partialValue: Swift.Int64, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.Int64, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="by: Swift.Int64">
				</Parameters>
			</Method>
			<Method>
				<name="dividingFullWidth">
				<signature="func dividingFullWidth((high: Swift.Int64, low: Swift.UInt64)) -> (quotient: Swift.Int64, remainder: Swift.Int64)">
				<isStatic="False">
				<returnType="(quotient: quotient: Swift.Int64, remainder: remainder: Swift.Int64)">
				<Parameters>
					<Parameter="(high: Swift.Int64">
					<Parameter="low: Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(to: Swift.Encoder)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="to: Swift.Encoder">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
			<Method>
				<name="multipliedFullWidth">
				<signature="func multipliedFullWidth(by: Swift.Int64) -> (high: Swift.Int64, low: Swift.UInt64)">
				<isStatic="False">
				<returnType="(high: high: Swift.Int64, low: low: Swift.UInt64)">
				<Parameters>
					<Parameter="by: Swift.Int64">
				</Parameters>
			</Method>
			<Method>
				<name="multipliedReportingOverflow">
				<signature="func multipliedReportingOverflow(by: Swift.Int64) -> (partialValue: Swift.Int64, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.Int64, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="by: Swift.Int64">
				</Parameters>
			</Method>
			<Method>
				<name="remainderReportingOverflow">
				<signature="func remainderReportingOverflow(dividingBy: Swift.Int64) -> (partialValue: Swift.Int64, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.Int64, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="dividingBy: Swift.Int64">
				</Parameters>
			</Method>
			<Method>
				<name="signum">
				<signature="func signum() -> Swift.Int64">
				<isStatic="False">
				<returnType="Swift.Int64">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="subtractingReportingOverflow">
				<signature="func subtractingReportingOverflowSwift.Int64 -> (partialValue: Swift.Int64, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.Int64, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="partialValue: Swift.Int64">
					<Parameter="overflow: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="|">
				<signature="static func |(Swift.Int64, Swift.Int64) -> Swift.Int64">
				<isStatic="True">
				<returnType="Swift.Int64">
				<Parameters>
					<Parameter="Swift.Int64">
					<Parameter="Swift.Int64">
				</Parameters>
			</Method>
			<Method>
				<name="|=">
				<signature="static func |=(Swift.Int64, Swift.Int64)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int64">
					<Parameter="Swift.Int64">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Int64.SIMD16Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int64.SIMD2Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int64.SIMD32Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int64.SIMD4Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int64.SIMD64Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int64.SIMD8Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int64.Words">
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Int">
				<Static="False">
			</Property>
			<Property>
				<name="indices">
				<signature="var indices: Swift.Range(Int)">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Int">
				<Static="False">
			</Property>
			<Method>
				<name="index">
				<signature="func index(after: Int) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="after: Int">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Int8">
			<Property>
				<name="bitWidth">
				<signature="static var bitWidth: Int">
				<Static="False">
			</Property>
			<Property>
				<name="byteSwapped">
				<signature="var byteSwapped: Swift.Int8">
				<Static="False">
			</Property>
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="leadingZeroBitCount">
				<signature="var leadingZeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="magnitude">
				<signature="var magnitude: Swift.UInt8">
				<Static="False">
			</Property>
			<Property>
				<name="nonzeroBitCount">
				<signature="var nonzeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="trailingZeroBitCount">
				<signature="var trailingZeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="words">
				<signature="var words: Swift.Int8.Words">
				<Static="False">
			</Property>
			<Method>
				<name="%">
				<signature="static func %(Swift.Int8, Swift.Int8) -> Swift.Int8">
				<isStatic="True">
				<returnType="Swift.Int8">
				<Parameters>
					<Parameter="Swift.Int8">
					<Parameter="Swift.Int8">
				</Parameters>
			</Method>
			<Method>
				<name="%=">
				<signature="static func %=(Swift.Int8, Swift.Int8)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int8">
					<Parameter="Swift.Int8">
				</Parameters>
			</Method>
			<Method>
				<name="&">
				<signature="static func &(Swift.Int8, Swift.Int8) -> Swift.Int8">
				<isStatic="True">
				<returnType="Swift.Int8">
				<Parameters>
					<Parameter="Swift.Int8">
					<Parameter="Swift.Int8">
				</Parameters>
			</Method>
			<Method>
				<name="&<<">
				<signature="static func &(((Swift.Int8, Swift.Int8) -) Swift.Int8">
				<isStatic="True">
				<returnType="Swift.Int8">
				<Parameters>
					<Parameter="((Swift.Int8">
					<Parameter="Swift.Int8">
				</Parameters>
			</Method>
			<Method>
				<name="&<<=">
				<signature="static func &((=(Swift.Int8, Swift.Int8)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="(=(Swift.Int8">
					<Parameter="Swift.Int8">
				</Parameters>
			</Method>
			<Method>
				<name="&=">
				<signature="static func &=(Swift.Int8, Swift.Int8)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int8">
					<Parameter="Swift.Int8">
				</Parameters>
			</Method>
			<Method>
				<name="&>>">
				<signature="static func &>>(Swift.Int8, Swift.Int8) -> Swift.Int8">
				<isStatic="True">
				<returnType="Swift.Int8">
				<Parameters>
					<Parameter="Swift.Int8">
					<Parameter="Swift.Int8">
				</Parameters>
			</Method>
			<Method>
				<name="&>>=">
				<signature="static func &>>=(Swift.Int8, Swift.Int8)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int8">
					<Parameter="Swift.Int8">
				</Parameters>
			</Method>
			<Method>
				<name="*">
				<signature="static func *(Swift.Int8, Swift.Int8) -> Swift.Int8">
				<isStatic="True">
				<returnType="Swift.Int8">
				<Parameters>
					<Parameter="Swift.Int8">
					<Parameter="Swift.Int8">
				</Parameters>
			</Method>
			<Method>
				<name="*=">
				<signature="static func *=(Swift.Int8, Swift.Int8)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int8">
					<Parameter="Swift.Int8">
				</Parameters>
			</Method>
			<Method>
				<name="+">
				<signature="static func +(Swift.Int8, Swift.Int8) -> Swift.Int8">
				<isStatic="True">
				<returnType="Swift.Int8">
				<Parameters>
					<Parameter="Swift.Int8">
					<Parameter="Swift.Int8">
				</Parameters>
			</Method>
			<Method>
				<name="+=">
				<signature="static func +=(Swift.Int8, Swift.Int8)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int8">
					<Parameter="Swift.Int8">
				</Parameters>
			</Method>
			<Method>
				<name="-">
				<signature="static func -(Swift.Int8, Swift.Int8) -> Swift.Int8">
				<isStatic="True">
				<returnType="Swift.Int8">
				<Parameters>
					<Parameter="Swift.Int8">
					<Parameter="Swift.Int8">
				</Parameters>
			</Method>
			<Method>
				<name="-=">
				<signature="static func -=(Swift.Int8, Swift.Int8)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int8">
					<Parameter="Swift.Int8">
				</Parameters>
			</Method>
			<Method>
				<name="/">
				<signature="static func /(Swift.Int8, Swift.Int8) -> Swift.Int8">
				<isStatic="True">
				<returnType="Swift.Int8">
				<Parameters>
					<Parameter="Swift.Int8">
					<Parameter="Swift.Int8">
				</Parameters>
			</Method>
			<Method>
				<name="/=">
				<signature="static func /=(Swift.Int8, Swift.Int8)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int8">
					<Parameter="Swift.Int8">
				</Parameters>
			</Method>
			<Method>
				<name="<">
				<signature="static func ((Swift.Int8, Swift.Int8) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="(Swift.Int8">
					<Parameter="Swift.Int8">
				</Parameters>
			</Method>
			<Method>
				<name="<=">
				<signature="static func (=(Swift.Int8, Swift.Int8) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="=(Swift.Int8">
					<Parameter="Swift.Int8">
				</Parameters>
			</Method>
			<Method>
				<name="==">
				<signature="static func ==(Swift.Int8, Swift.Int8) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.Int8">
					<Parameter="Swift.Int8">
				</Parameters>
			</Method>
			<Method>
				<name=">">
				<signature="static func >(Swift.Int8, Swift.Int8) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.Int8">
					<Parameter="Swift.Int8">
				</Parameters>
			</Method>
			<Method>
				<name=">=">
				<signature="static func >=(Swift.Int8, Swift.Int8) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.Int8">
					<Parameter="Swift.Int8">
				</Parameters>
			</Method>
			<Method>
				<name="^">
				<signature="static func ^(Swift.Int8, Swift.Int8) -> Swift.Int8">
				<isStatic="True">
				<returnType="Swift.Int8">
				<Parameters>
					<Parameter="Swift.Int8">
					<Parameter="Swift.Int8">
				</Parameters>
			</Method>
			<Method>
				<name="^=">
				<signature="static func ^=(Swift.Int8, Swift.Int8)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int8">
					<Parameter="Swift.Int8">
				</Parameters>
			</Method>
			<Method>
				<name="addingReportingOverflow">
				<signature="func addingReportingOverflowSwift.Int8 -> (partialValue: Swift.Int8, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.Int8, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="partialValue: Swift.Int8">
					<Parameter="overflow: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="dividedReportingOverflow">
				<signature="func dividedReportingOverflow(by: Swift.Int8) -> (partialValue: Swift.Int8, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.Int8, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="by: Swift.Int8">
				</Parameters>
			</Method>
			<Method>
				<name="dividingFullWidth">
				<signature="func dividingFullWidth((high: Swift.Int8, low: Swift.UInt8)) -> (quotient: Swift.Int8, remainder: Swift.Int8)">
				<isStatic="False">
				<returnType="(quotient: quotient: Swift.Int8, remainder: remainder: Swift.Int8)">
				<Parameters>
					<Parameter="(high: Swift.Int8">
					<Parameter="low: Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(to: Swift.Encoder)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="to: Swift.Encoder">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
			<Method>
				<name="multipliedFullWidth">
				<signature="func multipliedFullWidth(by: Swift.Int8) -> (high: Swift.Int8, low: Swift.UInt8)">
				<isStatic="False">
				<returnType="(high: high: Swift.Int8, low: low: Swift.UInt8)">
				<Parameters>
					<Parameter="by: Swift.Int8">
				</Parameters>
			</Method>
			<Method>
				<name="multipliedReportingOverflow">
				<signature="func multipliedReportingOverflow(by: Swift.Int8) -> (partialValue: Swift.Int8, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.Int8, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="by: Swift.Int8">
				</Parameters>
			</Method>
			<Method>
				<name="remainderReportingOverflow">
				<signature="func remainderReportingOverflow(dividingBy: Swift.Int8) -> (partialValue: Swift.Int8, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.Int8, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="dividingBy: Swift.Int8">
				</Parameters>
			</Method>
			<Method>
				<name="signum">
				<signature="func signum() -> Swift.Int8">
				<isStatic="False">
				<returnType="Swift.Int8">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="subtractingReportingOverflow">
				<signature="func subtractingReportingOverflowSwift.Int8 -> (partialValue: Swift.Int8, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.Int8, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="partialValue: Swift.Int8">
					<Parameter="overflow: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="|">
				<signature="static func |(Swift.Int8, Swift.Int8) -> Swift.Int8">
				<isStatic="True">
				<returnType="Swift.Int8">
				<Parameters>
					<Parameter="Swift.Int8">
					<Parameter="Swift.Int8">
				</Parameters>
			</Method>
			<Method>
				<name="|=">
				<signature="static func |=(Swift.Int8, Swift.Int8)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.Int8">
					<Parameter="Swift.Int8">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Int8.SIMD16Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int8.SIMD2Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int8.SIMD32Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int8.SIMD4Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int8.SIMD64Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int8.SIMD8Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Int8.Words">
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Int">
				<Static="False">
			</Property>
			<Property>
				<name="indices">
				<signature="var indices: Swift.Range(Int)">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Int">
				<Static="False">
			</Property>
			<Method>
				<name="index">
				<signature="func index(after: Int) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="after: Int">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.IteratorSequence">
			<Method>
				<name="next">
				<signature="func next() -> Self.Element?">
				<isStatic="False">
				<returnType="Swift.Optional<(0,0)A0.Element>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.JoinedSequence">
		</Struct>
		<Struct name="Swift.JoinedSequence.Iterator">
			<Method>
				<name="next">
				<signature="func next() -> Self.Element.Element?">
				<isStatic="False">
				<returnType="Swift.Optional<(0,0)A0.Element.Element>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.KeyValuePairs">
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Int">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.KeyedDecodingContainer">
			<Property>
				<name="allKeys">
				<signature="var allKeys: Swift.Array(Self)">
				<Static="False">
			</Property>
			<Property>
				<name="codingPath">
				<signature="var codingPath: Swift.Array(Swift.CodingKey)">
				<Static="False">
			</Property>
			<Method>
				<name="contains">
				<signature="func containsSelf -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="decode">
				<signature="func decode(: Meta Swift.String, forKey: Self) -> Swift.String">
				<isStatic="False">
				<returnType="Swift.String">
				<Parameters>
					<Parameter=": Meta Swift.String">
					<Parameter="forKey: Self">
				</Parameters>
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresent(: Meta Swift.String, forKey: Self) -> String?">
				<isStatic="False">
				<returnType="Swift.Optional<Swift.String>">
				<Parameters>
					<Parameter=": Meta Swift.String">
					<Parameter="forKey: Self">
				</Parameters>
			</Method>
			<Method>
				<name="decodeNil">
				<signature="func decodeNil(forKey: Self) -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
					<Parameter="forKey: Self">
				</Parameters>
			</Method>
			<Method>
				<name="nestedContainer">
				<signature="func nestedContainer(keyedBy: Meta , forKey: Self) -> Swift.KeyedDecodingContainer(???)">
				<isStatic="False">
				<returnType="Swift.KeyedDecodingContainer<(1,0)>">
				<Parameters>
					<Parameter="keyedBy: Meta ">
					<Parameter="forKey: Self">
				</Parameters>
			</Method>
			<Method>
				<name="nestedUnkeyedContainer">
				<signature="func nestedUnkeyedContainer(forKey: Self) -> Swift.UnkeyedDecodingContainer">
				<isStatic="False">
				<returnType="Swift.UnkeyedDecodingContainer">
				<Parameters>
					<Parameter="forKey: Self">
				</Parameters>
			</Method>
			<Method>
				<name="superDecoder">
				<signature="func superDecoder(forKey: Self) -> Swift.Decoder">
				<isStatic="False">
				<returnType="Swift.Decoder">
				<Parameters>
					<Parameter="forKey: Self">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.KeyedEncodingContainer">
			<Property>
				<name="codingPath">
				<signature="var codingPath: Swift.Array(Swift.CodingKey)">
				<Static="False">
			</Property>
			<Method>
				<name="encode">
				<signature="func encode(: Swift.String, forKey: Self)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter=": Swift.String">
					<Parameter="forKey: Self">
				</Parameters>
			</Method>
			<Method>
				<name="encodeConditional">
				<signature="func encodeConditional(: ???, forKey: Self)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter=": ???">
					<Parameter="forKey: Self">
				</Parameters>
			</Method>
			<Method>
				<name="encodeIfPresent">
				<signature="func encodeIfPresent(: String?, forKey: Self)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter=": String?">
					<Parameter="forKey: Self">
				</Parameters>
			</Method>
			<Method>
				<name="encodeNil">
				<signature="func encodeNil(forKey: Self)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="forKey: Self">
				</Parameters>
			</Method>
			<Method>
				<name="nestedContainer">
				<signature="func nestedContainer(keyedBy: Meta , forKey: Self) -> Swift.KeyedEncodingContainer(???)">
				<isStatic="False">
				<returnType="Swift.KeyedEncodingContainer<(1,0)>">
				<Parameters>
					<Parameter="keyedBy: Meta ">
					<Parameter="forKey: Self">
				</Parameters>
			</Method>
			<Method>
				<name="nestedUnkeyedContainer">
				<signature="func nestedUnkeyedContainer(forKey: Self) -> Swift.UnkeyedEncodingContainer">
				<isStatic="False">
				<returnType="Swift.UnkeyedEncodingContainer">
				<Parameters>
					<Parameter="forKey: Self">
				</Parameters>
			</Method>
			<Method>
				<name="superEncoder">
				<signature="func superEncoder(forKey: Self) -> Swift.Encoder">
				<isStatic="False">
				<returnType="Swift.Encoder">
				<Parameters>
					<Parameter="forKey: Self">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.LazyDropWhileSequence">
		</Struct>
		<Struct name="Swift.LazyDropWhileSequence.Iterator">
			<Method>
				<name="next">
				<signature="func next() -> Self.Element?">
				<isStatic="False">
				<returnType="Swift.Optional<(0,0)A0.Element>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.LazyFilterSequence">
			<Method>
				<name="filter">
				<signature="func filterSelf.Element -> Bool -> Swift.LazyFilterSequence(Self)">
				<isStatic="False">
				<returnType="Swift.LazyFilterSequence<(0,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.LazyFilterSequence.Iterator">
			<Property>
				<name="base">
				<signature="var base: Self.Iterator">
				<Static="False">
			</Property>
			<Method>
				<name="next">
				<signature="func next() -> Self.Element?">
				<isStatic="False">
				<returnType="Swift.Optional<(0,0)A0.Element>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.LazyMapSequence">
			<Property>
				<name="underestimatedCount">
				<signature="var underestimatedCount: Int">
				<Static="False">
			</Property>
			<Method>
				<name="map">
				<signature="func map??? -> ??? -> Swift.LazyMapSequence(Self, ???)">
				<isStatic="False">
				<returnType="Swift.LazyMapSequence<(0,0), (1,0)>">
				<Parameters>
					<Parameter="Self">
					<Parameter="???">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.LazyMapSequence.Iterator">
			<Property>
				<name="base">
				<signature="var base: Self.Iterator">
				<Static="False">
			</Property>
			<Method>
				<name="next">
				<signature="func next() -> ????">
				<isStatic="False">
				<returnType="Swift.Optional<(0,1)>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.LazyPrefixWhileSequence">
		</Struct>
		<Struct name="Swift.LazyPrefixWhileSequence.Iterator">
			<Method>
				<name="next">
				<signature="func next() -> Self.Element?">
				<isStatic="False">
				<returnType="Swift.Optional<(0,0)A0.Element>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.LazySequence">
			<Property>
				<name="elements">
				<signature="var elements: Self">
				<Static="False">
			</Property>
			<Property>
				<name="underestimatedCount">
				<signature="var underestimatedCount: Int">
				<Static="False">
			</Property>
			<Method>
				<name="makeIterator">
				<signature="func makeIterator() -> Self.Iterator">
				<isStatic="False">
				<returnType="(0,0)A0.Iterator">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.ManagedBufferPointer">
			<Property>
				<name="buffer">
				<signature="var buffer: Swift.AnyObject">
				<Static="False">
			</Property>
			<Property>
				<name="capacity">
				<signature="var capacity: Int">
				<Static="False">
			</Property>
			<Property>
				<name="header">
				<signature="var header: Self">
				<Static="False">
			</Property>
			<Method>
				<name="==">
				<signature="static func ==(Swift.ManagedBufferPointer(Self, ???), Swift.ManagedBufferPointer(Self, ???)) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.ManagedBufferPointer(Self">
					<Parameter="???">
				</Parameters>
			</Method>
			<Method>
				<name="isUniqueReference">
				<signature="func isUniqueReference() -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="withUnsafeMutablePointerToElements">
				<signature="func withUnsafeMutablePointerToElementsSwift.UnsafeMutablePointer(???) -> ??? -> ???">
				<isStatic="False">
				<returnType="(1,0)">
				<Parameters>
					<Parameter="???">
				</Parameters>
			</Method>
			<Method>
				<name="withUnsafeMutablePointerToHeader">
				<signature="func withUnsafeMutablePointerToHeaderSwift.UnsafeMutablePointer(Self) -> ??? -> ???">
				<isStatic="False">
				<returnType="(1,0)">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="withUnsafeMutablePointers">
				<signature="func withUnsafeMutablePointers(Swift.UnsafeMutablePointer(Self), Swift.UnsafeMutablePointer(???)) -> ??? -> ???">
				<isStatic="False">
				<returnType="(1,0)">
				<Parameters>
					<Parameter="Swift.UnsafeMutablePointer(Self">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Mirror">
			<Property>
				<name="children">
				<signature="var children: Swift.AnyCollection((label: label: String), value: value: Swift.Any)?">
				<Static="False">
			</Property>
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="displayStyle">
				<signature="var displayStyle: Mirror.DisplayStyle?">
				<Static="False">
			</Property>
			<Property>
				<name="subjectType">
				<signature="var subjectType: Existential Metatype Swift.Any">
				<Static="False">
			</Property>
			<Property>
				<name="superclassMirror">
				<signature="var superclassMirror: Mirror?">
				<Static="False">
			</Property>
			<Method>
				<name="descendant">
				<signature="func descendant(Swift.MirrorPath, Swift.Array(Swift.MirrorPath)) -> Any?">
				<isStatic="False">
				<returnType="Swift.Optional<Swift.Any>">
				<Parameters>
					<Parameter="Swift.MirrorPath">
					<Parameter="Swift.Array(Swift.MirrorPath">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.ObjectIdentifier">
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Method>
				<name="<">
				<signature="static func ((Swift.ObjectIdentifier, Swift.ObjectIdentifier) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="(Swift.ObjectIdentifier">
					<Parameter="Swift.ObjectIdentifier">
				</Parameters>
			</Method>
			<Method>
				<name="==">
				<signature="static func ==(Swift.ObjectIdentifier, Swift.ObjectIdentifier) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.ObjectIdentifier">
					<Parameter="Swift.ObjectIdentifier">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.OpaquePointer">
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Method>
				<name="==">
				<signature="static func ==(Swift.OpaquePointer, Swift.OpaquePointer) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.OpaquePointer">
					<Parameter="Swift.OpaquePointer">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.PartialRangeFrom">
			<Property>
				<name="lowerBound">
				<signature="var lowerBound: Self">
				<Static="False">
			</Property>
			<Method>
				<name="contains">
				<signature="func containsSelf -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="next">
				<signature="func next() -> Self?">
				<isStatic="False">
				<returnType="Swift.Optional<(0,0)>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="relative">
				<signature="func relative(to: ???) -> Swift.Range(Self)">
				<isStatic="False">
				<returnType="Swift.Range<(0,0)>">
				<Parameters>
					<Parameter="to: ???">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.PartialRangeThrough">
			<Property>
				<name="upperBound">
				<signature="var upperBound: Self">
				<Static="False">
			</Property>
			<Method>
				<name="contains">
				<signature="func containsSelf -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="relative">
				<signature="func relative(to: ???) -> Swift.Range(Self)">
				<isStatic="False">
				<returnType="Swift.Range<(0,0)>">
				<Parameters>
					<Parameter="to: ???">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.PartialRangeUpTo">
			<Property>
				<name="upperBound">
				<signature="var upperBound: Self">
				<Static="False">
			</Property>
			<Method>
				<name="contains">
				<signature="func containsSelf -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="relative">
				<signature="func relative(to: ???) -> Swift.Range(Self)">
				<isStatic="False">
				<returnType="Swift.Range<(0,0)>">
				<Parameters>
					<Parameter="to: ???">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.PrefixSequence">
			<Method>
				<name="prefix">
				<signature="func prefixInt -> Swift.PrefixSequence(Self)">
				<isStatic="False">
				<returnType="Swift.PrefixSequence<(0,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.PrefixSequence.Iterator">
			<Method>
				<name="next">
				<signature="func next() -> Self.Element?">
				<isStatic="False">
				<returnType="Swift.Optional<(0,0)A0.Element>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Range">
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="isEmpty">
				<signature="var isEmpty: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="lowerBound">
				<signature="var lowerBound: Self">
				<Static="False">
			</Property>
			<Property>
				<name="upperBound">
				<signature="var upperBound: Self">
				<Static="False">
			</Property>
			<Method>
				<name="==">
				<signature="static func ==(Swift.Range(Self), Swift.Range(Self)) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.Range(Self">
				</Parameters>
			</Method>
			<Method>
				<name="clamped">
				<signature="func clamped(to: Swift.Range(Self)) -> Swift.Range(Self)">
				<isStatic="False">
				<returnType="Swift.Range<(0,0)>">
				<Parameters>
					<Parameter="to: Swift.Range(Self">
				</Parameters>
			</Method>
			<Method>
				<name="contains">
				<signature="func containsSelf -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="overlaps">
				<signature="func overlapsSwift.ClosedRange(Self) -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="relative">
				<signature="func relative(to: ???) -> Swift.Range(Self)">
				<isStatic="False">
				<returnType="Swift.Range<(0,0)>">
				<Parameters>
					<Parameter="to: ???">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Repeated">
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Int">
				<Static="False">
			</Property>
			<Property>
				<name="repeatedValue">
				<signature="var repeatedValue: Self">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.ReversedCollection">
			<Method>
				<name="reversed">
				<signature="func reversed() -> Self">
				<isStatic="False">
				<returnType="(0,0)">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.ReversedCollection.Index">
			<Property>
				<name="base">
				<signature="var base: Self.Index">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.ReversedCollection.Iterator">
			<Method>
				<name="next">
				<signature="func next() -> Self.Element?">
				<isStatic="False">
				<returnType="Swift.Optional<(0,0)A0.Element>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.SIMD16">
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="evenHalf">
				<signature="var evenHalf: Swift.SIMD8(Self)">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="highHalf">
				<signature="var highHalf: Swift.SIMD8(Self)">
				<Static="False">
			</Property>
			<Property>
				<name="lowHalf">
				<signature="var lowHalf: Swift.SIMD8(Self)">
				<Static="False">
			</Property>
			<Property>
				<name="oddHalf">
				<signature="var oddHalf: Swift.SIMD8(Self)">
				<Static="False">
			</Property>
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.SIMD2">
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="x">
				<signature="var x: Self">
				<Static="False">
			</Property>
			<Property>
				<name="y">
				<signature="var y: Self">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.SIMD3">
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="x">
				<signature="var x: Self">
				<Static="False">
			</Property>
			<Property>
				<name="y">
				<signature="var y: Self">
				<Static="False">
			</Property>
			<Property>
				<name="z">
				<signature="var z: Self">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.SIMD32">
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="evenHalf">
				<signature="var evenHalf: Swift.SIMD16(Self)">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="highHalf">
				<signature="var highHalf: Swift.SIMD16(Self)">
				<Static="False">
			</Property>
			<Property>
				<name="lowHalf">
				<signature="var lowHalf: Swift.SIMD16(Self)">
				<Static="False">
			</Property>
			<Property>
				<name="oddHalf">
				<signature="var oddHalf: Swift.SIMD16(Self)">
				<Static="False">
			</Property>
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.SIMD4">
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="evenHalf">
				<signature="var evenHalf: Swift.SIMD2(Self)">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="highHalf">
				<signature="var highHalf: Swift.SIMD2(Self)">
				<Static="False">
			</Property>
			<Property>
				<name="lowHalf">
				<signature="var lowHalf: Swift.SIMD2(Self)">
				<Static="False">
			</Property>
			<Property>
				<name="oddHalf">
				<signature="var oddHalf: Swift.SIMD2(Self)">
				<Static="False">
			</Property>
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="w">
				<signature="var w: Self">
				<Static="False">
			</Property>
			<Property>
				<name="x">
				<signature="var x: Self">
				<Static="False">
			</Property>
			<Property>
				<name="y">
				<signature="var y: Self">
				<Static="False">
			</Property>
			<Property>
				<name="z">
				<signature="var z: Self">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.SIMD64">
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="evenHalf">
				<signature="var evenHalf: Swift.SIMD32(Self)">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="highHalf">
				<signature="var highHalf: Swift.SIMD32(Self)">
				<Static="False">
			</Property>
			<Property>
				<name="lowHalf">
				<signature="var lowHalf: Swift.SIMD32(Self)">
				<Static="False">
			</Property>
			<Property>
				<name="oddHalf">
				<signature="var oddHalf: Swift.SIMD32(Self)">
				<Static="False">
			</Property>
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.SIMD8">
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="evenHalf">
				<signature="var evenHalf: Swift.SIMD4(Self)">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="highHalf">
				<signature="var highHalf: Swift.SIMD4(Self)">
				<Static="False">
			</Property>
			<Property>
				<name="lowHalf">
				<signature="var lowHalf: Swift.SIMD4(Self)">
				<Static="False">
			</Property>
			<Property>
				<name="oddHalf">
				<signature="var oddHalf: Swift.SIMD4(Self)">
				<Static="False">
			</Property>
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.SIMDMask">
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
			<Method>
				<name="random">
				<signature="static func random(using: ???) -> Swift.SIMDMask(Self)">
				<isStatic="True">
				<returnType="Swift.SIMDMask<(0,0)>">
				<Parameters>
					<Parameter="using: ???">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Set">
			<Property>
				<name="capacity">
				<signature="var capacity: Int">
				<Static="False">
			</Property>
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="isEmpty">
				<signature="var isEmpty: Bool">
				<Static="False">
			</Property>
			<Method>
				<name="==">
				<signature="static func ==(Swift.Set(Self), Swift.Set(Self)) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.Set(Self">
				</Parameters>
			</Method>
			<Method>
				<name="contains">
				<signature="func containsSelf -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="filter">
				<signature="func filterSelf -> Bool -> Swift.Set(Self)">
				<isStatic="False">
				<returnType="Swift.Set<(0,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="formIntersection">
				<signature="func formIntersection???">
				<isStatic="False">
				<returnType="()">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
			<Method>
				<name="intersection">
				<signature="func intersectionSwift.Set(Self) -> Swift.Set(Self)">
				<isStatic="False">
				<returnType="Swift.Set<(0,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="isDisjoint">
				<signature="func isDisjoint(with: Swift.Set(Self)) -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
					<Parameter="with: Swift.Set(Self">
				</Parameters>
			</Method>
			<Method>
				<name="isStrictSubset">
				<signature="func isStrictSubset(of: Swift.Set(Self)) -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
					<Parameter="of: Swift.Set(Self">
				</Parameters>
			</Method>
			<Method>
				<name="isStrictSuperset">
				<signature="func isStrictSuperset(of: Swift.Set(Self)) -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
					<Parameter="of: Swift.Set(Self">
				</Parameters>
			</Method>
			<Method>
				<name="isSubset">
				<signature="func isSubset(of: Swift.Set(Self)) -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
					<Parameter="of: Swift.Set(Self">
				</Parameters>
			</Method>
			<Method>
				<name="isSuperset">
				<signature="func isSuperset(of: Swift.Set(Self)) -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
					<Parameter="of: Swift.Set(Self">
				</Parameters>
			</Method>
			<Method>
				<name="popFirst">
				<signature="func popFirst() -> Self?">
				<isStatic="False">
				<returnType="Swift.Optional<(0,0)>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="remove">
				<signature="func removeSelf -> Self?">
				<isStatic="False">
				<returnType="Swift.Optional<(0,0)>">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="removeAll">
				<signature="func removeAll(keepingCapacity: Bool)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="keepingCapacity: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="removeFirst">
				<signature="func removeFirst() -> Self">
				<isStatic="False">
				<returnType="(0,0)">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="reserveCapacity">
				<signature="func reserveCapacityInt">
				<isStatic="False">
				<returnType="()">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="subtract">
				<signature="func subtractSwift.Set(Self)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="subtracting">
				<signature="func subtractingSwift.Set(Self) -> Swift.Set(Self)">
				<isStatic="False">
				<returnType="Swift.Set<(0,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Set.Index">
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Set.Iterator">
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Method>
				<name="next">
				<signature="func next() -> Self?">
				<isStatic="False">
				<returnType="Swift.Optional<(0,0)>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Slice">
			<Property>
				<name="base">
				<signature="var base: Self">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Self.Index">
				<Static="False">
			</Property>
			<Property>
				<name="indices">
				<signature="var indices: Self.Indices">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Self.Index">
				<Static="False">
			</Property>
			<Method>
				<name="distance">
				<signature="func distance(from: Self.Index, to: Self.Index) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="from: Self.Index">
					<Parameter="to: Self.Index">
				</Parameters>
			</Method>
			<Method>
				<name="formIndex">
				<signature="func formIndex(after: Self.Index)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="after: Self.Index">
				</Parameters>
			</Method>
			<Method>
				<name="index">
				<signature="func index(after: Self.Index) -> Self.Index">
				<isStatic="False">
				<returnType="(0,0)A0.Index">
				<Parameters>
					<Parameter="after: Self.Index">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.StaticString">
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="hasPointerRepresentation">
				<signature="var hasPointerRepresentation: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isASCII">
				<signature="var isASCII: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="unicodeScalar">
				<signature="var unicodeScalar: Swift.Unicode.Scalar">
				<Static="False">
			</Property>
			<Property>
				<name="utf8CodeUnitCount">
				<signature="var utf8CodeUnitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="utf8Start">
				<signature="var utf8Start: Swift.UnsafePointer(Swift.UInt8)">
				<Static="False">
			</Property>
			<Method>
				<name="withUTF8Buffer">
				<signature="func withUTF8BufferSwift.UnsafeBufferPointer(Swift.UInt8) -> Self -> Self">
				<isStatic="False">
				<returnType="(0,0)">
				<Parameters>
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.StrideThrough">
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="underestimatedCount">
				<signature="var underestimatedCount: Int">
				<Static="False">
			</Property>
			<Method>
				<name="makeIterator">
				<signature="func makeIterator() -> Swift.StrideThroughIterator(Self)">
				<isStatic="False">
				<returnType="Swift.StrideThroughIterator<(0,0)>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.StrideThroughIterator">
			<Method>
				<name="next">
				<signature="func next() -> Self?">
				<isStatic="False">
				<returnType="Swift.Optional<(0,0)>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.StrideTo">
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="underestimatedCount">
				<signature="var underestimatedCount: Int">
				<Static="False">
			</Property>
			<Method>
				<name="makeIterator">
				<signature="func makeIterator() -> Swift.StrideToIterator(Self)">
				<isStatic="False">
				<returnType="Swift.StrideToIterator<(0,0)>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.StrideToIterator">
			<Method>
				<name="next">
				<signature="func next() -> Self?">
				<isStatic="False">
				<returnType="Swift.Optional<(0,0)>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.String">
			<Property>
				<name="characters">
				<signature="var characters: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Swift.String.Index">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="isEmpty">
				<signature="var isEmpty: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Swift.String.Index">
				<Static="False">
			</Property>
			<Property>
				<name="unicodeScalars">
				<signature="var unicodeScalars: Swift.String.UnicodeScalarView">
				<Static="False">
			</Property>
			<Property>
				<name="utf16">
				<signature="var utf16: Swift.String.UTF16View">
				<Static="False">
			</Property>
			<Property>
				<name="utf8">
				<signature="var utf8: Swift.String.UTF8View">
				<Static="False">
			</Property>
			<Property>
				<name="utf8CString">
				<signature="var utf8CString: Swift.ContiguousArray(Swift.Int8)">
				<Static="False">
			</Property>
			<Method>
				<name="+">
				<signature="static func +(Swift.String, Swift.String) -> Swift.String">
				<isStatic="True">
				<returnType="Swift.String">
				<Parameters>
					<Parameter="Swift.String">
					<Parameter="Swift.String">
				</Parameters>
			</Method>
			<Method>
				<name="+=">
				<signature="static func +=(Swift.String, Swift.String)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.String">
					<Parameter="Swift.String">
				</Parameters>
			</Method>
			<Method>
				<name="<">
				<signature="static func ((Swift.String, Swift.String) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="(Swift.String">
					<Parameter="Swift.String">
				</Parameters>
			</Method>
			<Method>
				<name="==">
				<signature="static func ==(Swift.String, Swift.String) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.String">
					<Parameter="Swift.String">
				</Parameters>
			</Method>
			<Method>
				<name="append">
				<signature="func append(contentsOf: Swift.String)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="contentsOf: Swift.String">
				</Parameters>
			</Method>
			<Method>
				<name="decodeCString">
				<signature="static func decodeCString(: UnsafePointer(Self.CodeUnit)>, as: Meta , repairingInvalidCodeUnits: Bool) -> Swift.Optional((result: Swift.String, repairsMade: Bool)?">
				<isStatic="True">
				<returnType="Swift.Optional<(result: result: Swift.String, repairsMade: repairsMade: Bool)>">
				<Parameters>
					<Parameter=": UnsafePointer(Self.CodeUnit">
				</Parameters>
			</Method>
			<Method>
				<name="distance">
				<signature="func distance(from: Swift.String.Index, to: Swift.String.Index) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="from: Swift.String.Index">
					<Parameter="to: Swift.String.Index">
				</Parameters>
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(to: Swift.Encoder)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="to: Swift.Encoder">
				</Parameters>
			</Method>
			<Method>
				<name="hasPrefix">
				<signature="func hasPrefixSwift.String -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="hasSuffix">
				<signature="func hasSuffixSwift.String -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
			<Method>
				<name="index">
				<signature="func index(after: Swift.String.Index) -> Swift.String.Index">
				<isStatic="False">
				<returnType="Swift.String.Index">
				<Parameters>
					<Parameter="after: Swift.String.Index">
				</Parameters>
			</Method>
			<Method>
				<name="insert">
				<signature="func insert(contentsOf: Self, at: Swift.String.Index)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="contentsOf: Self">
					<Parameter="at: Swift.String.Index">
				</Parameters>
			</Method>
			<Method>
				<name="lowercased">
				<signature="func lowercased() -> Swift.String">
				<isStatic="False">
				<returnType="Swift.String">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="makeIterator">
				<signature="func makeIterator() -> Swift.String.Iterator">
				<isStatic="False">
				<returnType="Swift.String.Iterator">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="max">
				<signature="func max(Self, Self) -> Self">
				<isStatic="False">
				<returnType="(0,0)">
				<Parameters>
					<Parameter="Self">
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="min">
				<signature="func min(Self, Self) -> Self">
				<isStatic="False">
				<returnType="(0,0)">
				<Parameters>
					<Parameter="Self">
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="remove">
				<signature="func remove(at: Swift.String.Index) -> Swift.Character">
				<isStatic="False">
				<returnType="Swift.Character">
				<Parameters>
					<Parameter="at: Swift.String.Index">
				</Parameters>
			</Method>
			<Method>
				<name="removeAll">
				<signature="func removeAll(keepingCapacity: Bool)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="keepingCapacity: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="removeSubrange">
				<signature="func removeSubrangeSwift.Range(Swift.String.Index)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.String.Index">
				</Parameters>
			</Method>
			<Method>
				<name="replaceSubrange">
				<signature="func replaceSubrange(: Swift.Range(Swift.String.Index), with: Self)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter=": Swift.Range(Swift.String.Index">
				</Parameters>
			</Method>
			<Method>
				<name="reserveCapacity">
				<signature="func reserveCapacityInt">
				<isStatic="False">
				<returnType="()">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="uppercased">
				<signature="func uppercased() -> Swift.String">
				<isStatic="False">
				<returnType="Swift.String">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="withCString">
				<signature="func withCString(encodedAs: Meta , : Swift.UnsafePointer(???A1.CodeUnit) -> Self) -> Self">
				<isStatic="False">
				<returnType="(0,0)">
				<Parameters>
					<Parameter="encodedAs: Meta ">
					<Parameter=": Swift.UnsafePointer(???A1.CodeUnit">
				</Parameters>
			</Method>
			<Method>
				<name="withMutableCharacters">
				<signature="func withMutableCharactersSwift.String -> Self -> Self">
				<isStatic="False">
				<returnType="(0,0)">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="withUnsafeBytes">
				<signature="func withUnsafeBytesSwift.UnsafeRawBufferPointer -> Self -> Self">
				<isStatic="False">
				<returnType="(0,0)">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="write">
				<signature="func write(to: Self)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="to: Self">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.String.Index">
			<Property>
				<name="characterStride">
				<signature="var characterStride: Int?">
				<Static="False">
			</Property>
			<Property>
				<name="encodedOffset">
				<signature="var encodedOffset: Int">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="isZeroPosition">
				<signature="var isZeroPosition: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="nextEncoded">
				<signature="var nextEncoded: Swift.String.Index">
				<Static="False">
			</Property>
			<Property>
				<name="nextTranscoded">
				<signature="var nextTranscoded: Swift.String.Index">
				<Static="False">
			</Property>
			<Property>
				<name="orderingValue">
				<signature="var orderingValue: Swift.UInt64">
				<Static="False">
			</Property>
			<Property>
				<name="priorEncoded">
				<signature="var priorEncoded: Swift.String.Index">
				<Static="False">
			</Property>
			<Property>
				<name="priorTranscoded">
				<signature="var priorTranscoded: Swift.String.Index">
				<Static="False">
			</Property>
			<Property>
				<name="strippingTranscoding">
				<signature="var strippingTranscoding: Swift.String.Index">
				<Static="False">
			</Property>
			<Property>
				<name="transcodedOffset">
				<signature="var transcodedOffset: Int">
				<Static="False">
			</Property>
			<Method>
				<name="<">
				<signature="static func ((Swift.String.Index, Swift.String.Index) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="(Swift.String.Index">
					<Parameter="Swift.String.Index">
				</Parameters>
			</Method>
			<Method>
				<name="==">
				<signature="static func ==(Swift.String.Index, Swift.String.Index) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.String.Index">
					<Parameter="Swift.String.Index">
				</Parameters>
			</Method>
			<Method>
				<name="encoded">
				<signature="func encoded(offsetBy: Int) -> Swift.String.Index">
				<isStatic="False">
				<returnType="Swift.String.Index">
				<Parameters>
					<Parameter="offsetBy: Int">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
			<Method>
				<name="samePosition">
				<signature="func samePosition(in: Swift.String.UnicodeScalarView) -> String.Index?">
				<isStatic="False">
				<returnType="Swift.Optional<Swift.String.Index>">
				<Parameters>
					<Parameter="in: Swift.String.UnicodeScalarView">
				</Parameters>
			</Method>
			<Method>
				<name="transcoded">
				<signature="func transcoded(withOffset: Int) -> Swift.String.Index">
				<isStatic="False">
				<returnType="Swift.String.Index">
				<Parameters>
					<Parameter="withOffset: Int">
				</Parameters>
			</Method>
			<Method>
				<name="utf16Offset">
				<signature="func utf16Offset(in: Self) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="in: Self">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.String.Iterator">
			<Method>
				<name="next">
				<signature="func next() -> Character?">
				<isStatic="False">
				<returnType="Swift.Optional<Swift.Character>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.String.UTF16View">
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Swift.String.Index">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Swift.String.Index">
				<Static="False">
			</Property>
			<Method>
				<name="distance">
				<signature="func distance(from: Swift.String.Index, to: Swift.String.Index) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="from: Swift.String.Index">
					<Parameter="to: Swift.String.Index">
				</Parameters>
			</Method>
			<Method>
				<name="index">
				<signature="func index(after: Swift.String.Index) -> Swift.String.Index">
				<isStatic="False">
				<returnType="Swift.String.Index">
				<Parameters>
					<Parameter="after: Swift.String.Index">
				</Parameters>
			</Method>
			<Method>
				<name="makeIterator">
				<signature="func makeIterator() -> Swift.String.UTF16View.Iterator">
				<isStatic="False">
				<returnType="Swift.String.UTF16View.Iterator">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.String.UTF16View.Iterator">
			<Method>
				<name="next">
				<signature="func next() -> UInt16?">
				<isStatic="False">
				<returnType="Swift.Optional<Swift.UInt16>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.String.UTF8View">
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Swift.String.Index">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Swift.String.Index">
				<Static="False">
			</Property>
			<Method>
				<name="distance">
				<signature="func distance(from: Swift.String.Index, to: Swift.String.Index) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="from: Swift.String.Index">
					<Parameter="to: Swift.String.Index">
				</Parameters>
			</Method>
			<Method>
				<name="index">
				<signature="func index(after: Swift.String.Index) -> Swift.String.Index">
				<isStatic="False">
				<returnType="Swift.String.Index">
				<Parameters>
					<Parameter="after: Swift.String.Index">
				</Parameters>
			</Method>
			<Method>
				<name="withContiguousStorageIfAvailable">
				<signature="func withContiguousStorageIfAvailableSwift.UnsafeBufferPointer(Swift.UInt8) -> Self -> Self?">
				<isStatic="False">
				<returnType="Swift.Optional<(0,0)>">
				<Parameters>
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.String.UnicodeScalarView">
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Swift.String.Index">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Swift.String.Index">
				<Static="False">
			</Property>
			<Method>
				<name="append">
				<signature="func append(contentsOf: Self)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="contentsOf: Self">
				</Parameters>
			</Method>
			<Method>
				<name="index">
				<signature="func index(after: Swift.String.Index) -> Swift.String.Index">
				<isStatic="False">
				<returnType="Swift.String.Index">
				<Parameters>
					<Parameter="after: Swift.String.Index">
				</Parameters>
			</Method>
			<Method>
				<name="makeIterator">
				<signature="func makeIterator() -> Swift.String.UnicodeScalarView.Iterator">
				<isStatic="False">
				<returnType="Swift.String.UnicodeScalarView.Iterator">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="replaceSubrange">
				<signature="func replaceSubrange(: Swift.Range(Swift.String.Index), with: Self)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter=": Swift.Range(Swift.String.Index">
				</Parameters>
			</Method>
			<Method>
				<name="reserveCapacity">
				<signature="func reserveCapacityInt">
				<isStatic="False">
				<returnType="()">
				<Parameters>
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.String.UnicodeScalarView.Iterator">
			<Method>
				<name="next">
				<signature="func next() -> Unicode.Scalar?">
				<isStatic="False">
				<returnType="Swift.Optional<Swift.Unicode.Scalar>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Substring">
			<Property>
				<name="characters">
				<signature="var characters: Swift.Substring">
				<Static="False">
			</Property>
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Swift.String.Index">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Swift.String.Index">
				<Static="False">
			</Property>
			<Property>
				<name="unicodeScalars">
				<signature="var unicodeScalars: Swift.Substring.UnicodeScalarView">
				<Static="False">
			</Property>
			<Property>
				<name="utf16">
				<signature="var utf16: Swift.Substring.UTF16View">
				<Static="False">
			</Property>
			<Property>
				<name="utf8">
				<signature="var utf8: Swift.Substring.UTF8View">
				<Static="False">
			</Property>
			<Method>
				<name="append">
				<signature="func append(contentsOf: Self)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="contentsOf: Self">
				</Parameters>
			</Method>
			<Method>
				<name="distance">
				<signature="func distance(from: Swift.String.Index, to: Swift.String.Index) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="from: Swift.String.Index">
					<Parameter="to: Swift.String.Index">
				</Parameters>
			</Method>
			<Method>
				<name="filter">
				<signature="func filterSwift.Character -> Bool -> Swift.String">
				<isStatic="False">
				<returnType="Swift.String">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="index">
				<signature="func index(after: Swift.String.Index) -> Swift.String.Index">
				<isStatic="False">
				<returnType="Swift.String.Index">
				<Parameters>
					<Parameter="after: Swift.String.Index">
				</Parameters>
			</Method>
			<Method>
				<name="lowercased">
				<signature="func lowercased() -> Swift.String">
				<isStatic="False">
				<returnType="Swift.String">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="replaceSubrange">
				<signature="func replaceSubrange(: Swift.Range(Swift.String.Index), with: Swift.Substring)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter=": Swift.Range(Swift.String.Index">
				</Parameters>
			</Method>
			<Method>
				<name="uppercased">
				<signature="func uppercased() -> Swift.String">
				<isStatic="False">
				<returnType="Swift.String">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="withCString">
				<signature="func withCString(encodedAs: Meta , : Swift.UnsafePointer(???A1.CodeUnit) -> Self) -> Self">
				<isStatic="False">
				<returnType="(0,0)">
				<Parameters>
					<Parameter="encodedAs: Meta ">
					<Parameter=": Swift.UnsafePointer(???A1.CodeUnit">
				</Parameters>
			</Method>
			<Method>
				<name="withMutableCharacters">
				<signature="func withMutableCharactersSwift.Substring -> Self -> Self">
				<isStatic="False">
				<returnType="(0,0)">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="withUnsafeBytes">
				<signature="func withUnsafeBytesSwift.UnsafeRawBufferPointer -> Self -> Self">
				<isStatic="False">
				<returnType="(0,0)">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="write">
				<signature="func write(to: Self)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="to: Self">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Substring.UTF16View">
			<Property>
				<name="endIndex">
				<signature="var endIndex: Swift.String.Index">
				<Static="False">
			</Property>
			<Property>
				<name="indices">
				<signature="var indices: Swift.DefaultIndicies(Swift.String.UTF16View)">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Swift.String.Index">
				<Static="False">
			</Property>
			<Method>
				<name="distance">
				<signature="func distance(from: Swift.String.Index, to: Swift.String.Index) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="from: Swift.String.Index">
					<Parameter="to: Swift.String.Index">
				</Parameters>
			</Method>
			<Method>
				<name="formIndex">
				<signature="func formIndex(after: Swift.String.Index)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="after: Swift.String.Index">
				</Parameters>
			</Method>
			<Method>
				<name="index">
				<signature="func index(after: Swift.String.Index) -> Swift.String.Index">
				<isStatic="False">
				<returnType="Swift.String.Index">
				<Parameters>
					<Parameter="after: Swift.String.Index">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Substring.UTF8View">
			<Property>
				<name="endIndex">
				<signature="var endIndex: Swift.String.Index">
				<Static="False">
			</Property>
			<Property>
				<name="indices">
				<signature="var indices: Swift.DefaultIndicies(Swift.String.UTF8View)">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Swift.String.Index">
				<Static="False">
			</Property>
			<Method>
				<name="distance">
				<signature="func distance(from: Swift.String.Index, to: Swift.String.Index) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="from: Swift.String.Index">
					<Parameter="to: Swift.String.Index">
				</Parameters>
			</Method>
			<Method>
				<name="formIndex">
				<signature="func formIndex(after: Swift.String.Index)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="after: Swift.String.Index">
				</Parameters>
			</Method>
			<Method>
				<name="index">
				<signature="func index(after: Swift.String.Index) -> Swift.String.Index">
				<isStatic="False">
				<returnType="Swift.String.Index">
				<Parameters>
					<Parameter="after: Swift.String.Index">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Substring.UnicodeScalarView">
			<Property>
				<name="endIndex">
				<signature="var endIndex: Swift.String.Index">
				<Static="False">
			</Property>
			<Property>
				<name="indices">
				<signature="var indices: Swift.DefaultIndicies(Swift.String.UnicodeScalarView)">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Swift.String.Index">
				<Static="False">
			</Property>
			<Method>
				<name="distance">
				<signature="func distance(from: Swift.String.Index, to: Swift.String.Index) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="from: Swift.String.Index">
					<Parameter="to: Swift.String.Index">
				</Parameters>
			</Method>
			<Method>
				<name="formIndex">
				<signature="func formIndex(after: Swift.String.Index)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="after: Swift.String.Index">
				</Parameters>
			</Method>
			<Method>
				<name="index">
				<signature="func index(after: Swift.String.Index) -> Swift.String.Index">
				<isStatic="False">
				<returnType="Swift.String.Index">
				<Parameters>
					<Parameter="after: Swift.String.Index">
				</Parameters>
			</Method>
			<Method>
				<name="replaceSubrange">
				<signature="func replaceSubrange(: Swift.Range(Swift.String.Index), with: Self)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter=": Swift.Range(Swift.String.Index">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.SystemRandomNumberGenerator">
			<Method>
				<name="next">
				<signature="func next() -> Swift.UInt64">
				<isStatic="False">
				<returnType="Swift.UInt64">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.UInt">
			<Property>
				<name="bitWidth">
				<signature="static var bitWidth: Int">
				<Static="False">
			</Property>
			<Property>
				<name="byteSwapped">
				<signature="var byteSwapped: UInt">
				<Static="False">
			</Property>
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="leadingZeroBitCount">
				<signature="var leadingZeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="nonzeroBitCount">
				<signature="var nonzeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="trailingZeroBitCount">
				<signature="var trailingZeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="words">
				<signature="var words: Swift.UInt.Words">
				<Static="False">
			</Property>
			<Method>
				<name="%">
				<signature="static func %(UInt, UInt) -> UInt">
				<isStatic="True">
				<returnType="UInt">
				<Parameters>
					<Parameter="UInt">
					<Parameter="UInt">
				</Parameters>
			</Method>
			<Method>
				<name="%=">
				<signature="static func %=(UInt, UInt)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="UInt">
					<Parameter="UInt">
				</Parameters>
			</Method>
			<Method>
				<name="&">
				<signature="static func &(UInt, UInt) -> UInt">
				<isStatic="True">
				<returnType="UInt">
				<Parameters>
					<Parameter="UInt">
					<Parameter="UInt">
				</Parameters>
			</Method>
			<Method>
				<name="&<<">
				<signature="static func &(((UInt, UInt) -) UInt">
				<isStatic="True">
				<returnType="UInt">
				<Parameters>
					<Parameter="((UInt">
					<Parameter="UInt">
				</Parameters>
			</Method>
			<Method>
				<name="&<<=">
				<signature="static func &((=(UInt, UInt)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="(=(UInt">
					<Parameter="UInt">
				</Parameters>
			</Method>
			<Method>
				<name="&=">
				<signature="static func &=(UInt, UInt)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="UInt">
					<Parameter="UInt">
				</Parameters>
			</Method>
			<Method>
				<name="&>>">
				<signature="static func &>>(UInt, UInt) -> UInt">
				<isStatic="True">
				<returnType="UInt">
				<Parameters>
					<Parameter="UInt">
					<Parameter="UInt">
				</Parameters>
			</Method>
			<Method>
				<name="&>>=">
				<signature="static func &>>=(UInt, UInt)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="UInt">
					<Parameter="UInt">
				</Parameters>
			</Method>
			<Method>
				<name="*">
				<signature="static func *(UInt, UInt) -> UInt">
				<isStatic="True">
				<returnType="UInt">
				<Parameters>
					<Parameter="UInt">
					<Parameter="UInt">
				</Parameters>
			</Method>
			<Method>
				<name="*=">
				<signature="static func *=(UInt, UInt)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="UInt">
					<Parameter="UInt">
				</Parameters>
			</Method>
			<Method>
				<name="+">
				<signature="static func +(UInt, UInt) -> UInt">
				<isStatic="True">
				<returnType="UInt">
				<Parameters>
					<Parameter="UInt">
					<Parameter="UInt">
				</Parameters>
			</Method>
			<Method>
				<name="+=">
				<signature="static func +=(UInt, UInt)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="UInt">
					<Parameter="UInt">
				</Parameters>
			</Method>
			<Method>
				<name="-">
				<signature="static func -(UInt, UInt) -> UInt">
				<isStatic="True">
				<returnType="UInt">
				<Parameters>
					<Parameter="UInt">
					<Parameter="UInt">
				</Parameters>
			</Method>
			<Method>
				<name="-=">
				<signature="static func -=(UInt, UInt)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="UInt">
					<Parameter="UInt">
				</Parameters>
			</Method>
			<Method>
				<name="/">
				<signature="static func /(UInt, UInt) -> UInt">
				<isStatic="True">
				<returnType="UInt">
				<Parameters>
					<Parameter="UInt">
					<Parameter="UInt">
				</Parameters>
			</Method>
			<Method>
				<name="/=">
				<signature="static func /=(UInt, UInt)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="UInt">
					<Parameter="UInt">
				</Parameters>
			</Method>
			<Method>
				<name="<">
				<signature="static func ((UInt, UInt) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="(UInt">
					<Parameter="UInt">
				</Parameters>
			</Method>
			<Method>
				<name="<=">
				<signature="static func (=(UInt, UInt) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="=(UInt">
					<Parameter="UInt">
				</Parameters>
			</Method>
			<Method>
				<name="==">
				<signature="static func ==(UInt, UInt) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="UInt">
					<Parameter="UInt">
				</Parameters>
			</Method>
			<Method>
				<name=">">
				<signature="static func >(UInt, UInt) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="UInt">
					<Parameter="UInt">
				</Parameters>
			</Method>
			<Method>
				<name=">=">
				<signature="static func >=(UInt, UInt) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="UInt">
					<Parameter="UInt">
				</Parameters>
			</Method>
			<Method>
				<name="^">
				<signature="static func ^(UInt, UInt) -> UInt">
				<isStatic="True">
				<returnType="UInt">
				<Parameters>
					<Parameter="UInt">
					<Parameter="UInt">
				</Parameters>
			</Method>
			<Method>
				<name="^=">
				<signature="static func ^=(UInt, UInt)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="UInt">
					<Parameter="UInt">
				</Parameters>
			</Method>
			<Method>
				<name="addingReportingOverflow">
				<signature="func addingReportingOverflowUInt -> (partialValue: UInt, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: UInt, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="partialValue: UInt">
					<Parameter="overflow: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="dividedReportingOverflow">
				<signature="func dividedReportingOverflow(by: UInt) -> (partialValue: UInt, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: UInt, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="by: UInt">
				</Parameters>
			</Method>
			<Method>
				<name="dividingFullWidth">
				<signature="func dividingFullWidth((high: UInt, low: UInt)) -> (quotient: UInt, remainder: UInt)">
				<isStatic="False">
				<returnType="(quotient: quotient: UInt, remainder: remainder: UInt)">
				<Parameters>
					<Parameter="(high: UInt">
					<Parameter="low: UInt">
				</Parameters>
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(to: Swift.Encoder)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="to: Swift.Encoder">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
			<Method>
				<name="multipliedFullWidth">
				<signature="func multipliedFullWidth(by: UInt) -> (high: UInt, low: UInt)">
				<isStatic="False">
				<returnType="(high: high: UInt, low: low: UInt)">
				<Parameters>
					<Parameter="by: UInt">
				</Parameters>
			</Method>
			<Method>
				<name="multipliedReportingOverflow">
				<signature="func multipliedReportingOverflow(by: UInt) -> (partialValue: UInt, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: UInt, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="by: UInt">
				</Parameters>
			</Method>
			<Method>
				<name="remainderReportingOverflow">
				<signature="func remainderReportingOverflow(dividingBy: UInt) -> (partialValue: UInt, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: UInt, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="dividingBy: UInt">
				</Parameters>
			</Method>
			<Method>
				<name="signum">
				<signature="func signum() -> UInt">
				<isStatic="False">
				<returnType="UInt">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="subtractingReportingOverflow">
				<signature="func subtractingReportingOverflowUInt -> (partialValue: UInt, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: UInt, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="partialValue: UInt">
					<Parameter="overflow: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="|">
				<signature="static func |(UInt, UInt) -> UInt">
				<isStatic="True">
				<returnType="UInt">
				<Parameters>
					<Parameter="UInt">
					<Parameter="UInt">
				</Parameters>
			</Method>
			<Method>
				<name="|=">
				<signature="static func |=(UInt, UInt)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="UInt">
					<Parameter="UInt">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.UInt.SIMD16Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt.SIMD2Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt.SIMD32Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt.SIMD4Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt.SIMD64Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt.SIMD8Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt.Words">
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Int">
				<Static="False">
			</Property>
			<Property>
				<name="indices">
				<signature="var indices: Swift.Range(Int)">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Int">
				<Static="False">
			</Property>
			<Method>
				<name="index">
				<signature="func index(after: Int) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="after: Int">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.UInt16">
			<Property>
				<name="bitWidth">
				<signature="static var bitWidth: Int">
				<Static="False">
			</Property>
			<Property>
				<name="byteSwapped">
				<signature="var byteSwapped: Swift.UInt16">
				<Static="False">
			</Property>
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="leadingZeroBitCount">
				<signature="var leadingZeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="nonzeroBitCount">
				<signature="var nonzeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="trailingZeroBitCount">
				<signature="var trailingZeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="words">
				<signature="var words: Swift.UInt16.Words">
				<Static="False">
			</Property>
			<Method>
				<name="%">
				<signature="static func %(Swift.UInt16, Swift.UInt16) -> Swift.UInt16">
				<isStatic="True">
				<returnType="Swift.UInt16">
				<Parameters>
					<Parameter="Swift.UInt16">
					<Parameter="Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="%=">
				<signature="static func %=(Swift.UInt16, Swift.UInt16)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt16">
					<Parameter="Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="&">
				<signature="static func &(Swift.UInt16, Swift.UInt16) -> Swift.UInt16">
				<isStatic="True">
				<returnType="Swift.UInt16">
				<Parameters>
					<Parameter="Swift.UInt16">
					<Parameter="Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="&<<">
				<signature="static func &(((Swift.UInt16, Swift.UInt16) -) Swift.UInt16">
				<isStatic="True">
				<returnType="Swift.UInt16">
				<Parameters>
					<Parameter="((Swift.UInt16">
					<Parameter="Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="&<<=">
				<signature="static func &((=(Swift.UInt16, Swift.UInt16)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="(=(Swift.UInt16">
					<Parameter="Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="&=">
				<signature="static func &=(Swift.UInt16, Swift.UInt16)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt16">
					<Parameter="Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="&>>">
				<signature="static func &>>(Swift.UInt16, Swift.UInt16) -> Swift.UInt16">
				<isStatic="True">
				<returnType="Swift.UInt16">
				<Parameters>
					<Parameter="Swift.UInt16">
					<Parameter="Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="&>>=">
				<signature="static func &>>=(Swift.UInt16, Swift.UInt16)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt16">
					<Parameter="Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="*">
				<signature="static func *(Swift.UInt16, Swift.UInt16) -> Swift.UInt16">
				<isStatic="True">
				<returnType="Swift.UInt16">
				<Parameters>
					<Parameter="Swift.UInt16">
					<Parameter="Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="*=">
				<signature="static func *=(Swift.UInt16, Swift.UInt16)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt16">
					<Parameter="Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="+">
				<signature="static func +(Swift.UInt16, Swift.UInt16) -> Swift.UInt16">
				<isStatic="True">
				<returnType="Swift.UInt16">
				<Parameters>
					<Parameter="Swift.UInt16">
					<Parameter="Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="+=">
				<signature="static func +=(Swift.UInt16, Swift.UInt16)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt16">
					<Parameter="Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="-">
				<signature="static func -(Swift.UInt16, Swift.UInt16) -> Swift.UInt16">
				<isStatic="True">
				<returnType="Swift.UInt16">
				<Parameters>
					<Parameter="Swift.UInt16">
					<Parameter="Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="-=">
				<signature="static func -=(Swift.UInt16, Swift.UInt16)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt16">
					<Parameter="Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="/">
				<signature="static func /(Swift.UInt16, Swift.UInt16) -> Swift.UInt16">
				<isStatic="True">
				<returnType="Swift.UInt16">
				<Parameters>
					<Parameter="Swift.UInt16">
					<Parameter="Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="/=">
				<signature="static func /=(Swift.UInt16, Swift.UInt16)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt16">
					<Parameter="Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="<">
				<signature="static func ((Swift.UInt16, Swift.UInt16) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="(Swift.UInt16">
					<Parameter="Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="<=">
				<signature="static func (=(Swift.UInt16, Swift.UInt16) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="=(Swift.UInt16">
					<Parameter="Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="==">
				<signature="static func ==(Swift.UInt16, Swift.UInt16) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.UInt16">
					<Parameter="Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name=">">
				<signature="static func >(Swift.UInt16, Swift.UInt16) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.UInt16">
					<Parameter="Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name=">=">
				<signature="static func >=(Swift.UInt16, Swift.UInt16) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.UInt16">
					<Parameter="Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="^">
				<signature="static func ^(Swift.UInt16, Swift.UInt16) -> Swift.UInt16">
				<isStatic="True">
				<returnType="Swift.UInt16">
				<Parameters>
					<Parameter="Swift.UInt16">
					<Parameter="Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="^=">
				<signature="static func ^=(Swift.UInt16, Swift.UInt16)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt16">
					<Parameter="Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="addingReportingOverflow">
				<signature="func addingReportingOverflowSwift.UInt16 -> (partialValue: Swift.UInt16, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.UInt16, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="partialValue: Swift.UInt16">
					<Parameter="overflow: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="dividedReportingOverflow">
				<signature="func dividedReportingOverflow(by: Swift.UInt16) -> (partialValue: Swift.UInt16, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.UInt16, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="by: Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="dividingFullWidth">
				<signature="func dividingFullWidth((high: Swift.UInt16, low: Swift.UInt16)) -> (quotient: Swift.UInt16, remainder: Swift.UInt16)">
				<isStatic="False">
				<returnType="(quotient: quotient: Swift.UInt16, remainder: remainder: Swift.UInt16)">
				<Parameters>
					<Parameter="(high: Swift.UInt16">
					<Parameter="low: Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(to: Swift.Encoder)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="to: Swift.Encoder">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
			<Method>
				<name="multipliedFullWidth">
				<signature="func multipliedFullWidth(by: Swift.UInt16) -> (high: Swift.UInt16, low: Swift.UInt16)">
				<isStatic="False">
				<returnType="(high: high: Swift.UInt16, low: low: Swift.UInt16)">
				<Parameters>
					<Parameter="by: Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="multipliedReportingOverflow">
				<signature="func multipliedReportingOverflow(by: Swift.UInt16) -> (partialValue: Swift.UInt16, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.UInt16, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="by: Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="remainderReportingOverflow">
				<signature="func remainderReportingOverflow(dividingBy: Swift.UInt16) -> (partialValue: Swift.UInt16, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.UInt16, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="dividingBy: Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="signum">
				<signature="func signum() -> Swift.UInt16">
				<isStatic="False">
				<returnType="Swift.UInt16">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="subtractingReportingOverflow">
				<signature="func subtractingReportingOverflowSwift.UInt16 -> (partialValue: Swift.UInt16, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.UInt16, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="partialValue: Swift.UInt16">
					<Parameter="overflow: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="|">
				<signature="static func |(Swift.UInt16, Swift.UInt16) -> Swift.UInt16">
				<isStatic="True">
				<returnType="Swift.UInt16">
				<Parameters>
					<Parameter="Swift.UInt16">
					<Parameter="Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="|=">
				<signature="static func |=(Swift.UInt16, Swift.UInt16)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt16">
					<Parameter="Swift.UInt16">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.UInt16.SIMD16Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt16.SIMD2Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt16.SIMD32Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt16.SIMD4Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt16.SIMD64Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt16.SIMD8Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt16.Words">
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Int">
				<Static="False">
			</Property>
			<Property>
				<name="indices">
				<signature="var indices: Swift.Range(Int)">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Int">
				<Static="False">
			</Property>
			<Method>
				<name="index">
				<signature="func index(after: Int) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="after: Int">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.UInt32">
			<Property>
				<name="bitWidth">
				<signature="static var bitWidth: Int">
				<Static="False">
			</Property>
			<Property>
				<name="byteSwapped">
				<signature="var byteSwapped: Swift.UInt32">
				<Static="False">
			</Property>
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="leadingZeroBitCount">
				<signature="var leadingZeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="nonzeroBitCount">
				<signature="var nonzeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="trailingZeroBitCount">
				<signature="var trailingZeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="words">
				<signature="var words: Swift.UInt32.Words">
				<Static="False">
			</Property>
			<Method>
				<name="%">
				<signature="static func %(Swift.UInt32, Swift.UInt32) -> Swift.UInt32">
				<isStatic="True">
				<returnType="Swift.UInt32">
				<Parameters>
					<Parameter="Swift.UInt32">
					<Parameter="Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="%=">
				<signature="static func %=(Swift.UInt32, Swift.UInt32)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt32">
					<Parameter="Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="&">
				<signature="static func &(Swift.UInt32, Swift.UInt32) -> Swift.UInt32">
				<isStatic="True">
				<returnType="Swift.UInt32">
				<Parameters>
					<Parameter="Swift.UInt32">
					<Parameter="Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="&<<">
				<signature="static func &(((Swift.UInt32, Swift.UInt32) -) Swift.UInt32">
				<isStatic="True">
				<returnType="Swift.UInt32">
				<Parameters>
					<Parameter="((Swift.UInt32">
					<Parameter="Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="&<<=">
				<signature="static func &((=(Swift.UInt32, Swift.UInt32)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="(=(Swift.UInt32">
					<Parameter="Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="&=">
				<signature="static func &=(Swift.UInt32, Swift.UInt32)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt32">
					<Parameter="Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="&>>">
				<signature="static func &>>(Swift.UInt32, Swift.UInt32) -> Swift.UInt32">
				<isStatic="True">
				<returnType="Swift.UInt32">
				<Parameters>
					<Parameter="Swift.UInt32">
					<Parameter="Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="&>>=">
				<signature="static func &>>=(Swift.UInt32, Swift.UInt32)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt32">
					<Parameter="Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="*">
				<signature="static func *(Swift.UInt32, Swift.UInt32) -> Swift.UInt32">
				<isStatic="True">
				<returnType="Swift.UInt32">
				<Parameters>
					<Parameter="Swift.UInt32">
					<Parameter="Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="*=">
				<signature="static func *=(Swift.UInt32, Swift.UInt32)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt32">
					<Parameter="Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="+">
				<signature="static func +(Swift.UInt32, Swift.UInt32) -> Swift.UInt32">
				<isStatic="True">
				<returnType="Swift.UInt32">
				<Parameters>
					<Parameter="Swift.UInt32">
					<Parameter="Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="+=">
				<signature="static func +=(Swift.UInt32, Swift.UInt32)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt32">
					<Parameter="Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="-">
				<signature="static func -(Swift.UInt32, Swift.UInt32) -> Swift.UInt32">
				<isStatic="True">
				<returnType="Swift.UInt32">
				<Parameters>
					<Parameter="Swift.UInt32">
					<Parameter="Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="-=">
				<signature="static func -=(Swift.UInt32, Swift.UInt32)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt32">
					<Parameter="Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="/">
				<signature="static func /(Swift.UInt32, Swift.UInt32) -> Swift.UInt32">
				<isStatic="True">
				<returnType="Swift.UInt32">
				<Parameters>
					<Parameter="Swift.UInt32">
					<Parameter="Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="/=">
				<signature="static func /=(Swift.UInt32, Swift.UInt32)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt32">
					<Parameter="Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="<">
				<signature="static func ((Swift.UInt32, Swift.UInt32) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="(Swift.UInt32">
					<Parameter="Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="<=">
				<signature="static func (=(Swift.UInt32, Swift.UInt32) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="=(Swift.UInt32">
					<Parameter="Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="==">
				<signature="static func ==(Swift.UInt32, Swift.UInt32) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.UInt32">
					<Parameter="Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name=">">
				<signature="static func >(Swift.UInt32, Swift.UInt32) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.UInt32">
					<Parameter="Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name=">=">
				<signature="static func >=(Swift.UInt32, Swift.UInt32) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.UInt32">
					<Parameter="Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="^">
				<signature="static func ^(Swift.UInt32, Swift.UInt32) -> Swift.UInt32">
				<isStatic="True">
				<returnType="Swift.UInt32">
				<Parameters>
					<Parameter="Swift.UInt32">
					<Parameter="Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="^=">
				<signature="static func ^=(Swift.UInt32, Swift.UInt32)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt32">
					<Parameter="Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="addingReportingOverflow">
				<signature="func addingReportingOverflowSwift.UInt32 -> (partialValue: Swift.UInt32, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.UInt32, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="partialValue: Swift.UInt32">
					<Parameter="overflow: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="dividedReportingOverflow">
				<signature="func dividedReportingOverflow(by: Swift.UInt32) -> (partialValue: Swift.UInt32, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.UInt32, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="by: Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="dividingFullWidth">
				<signature="func dividingFullWidth((high: Swift.UInt32, low: Swift.UInt32)) -> (quotient: Swift.UInt32, remainder: Swift.UInt32)">
				<isStatic="False">
				<returnType="(quotient: quotient: Swift.UInt32, remainder: remainder: Swift.UInt32)">
				<Parameters>
					<Parameter="(high: Swift.UInt32">
					<Parameter="low: Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(to: Swift.Encoder)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="to: Swift.Encoder">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
			<Method>
				<name="multipliedFullWidth">
				<signature="func multipliedFullWidth(by: Swift.UInt32) -> (high: Swift.UInt32, low: Swift.UInt32)">
				<isStatic="False">
				<returnType="(high: high: Swift.UInt32, low: low: Swift.UInt32)">
				<Parameters>
					<Parameter="by: Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="multipliedReportingOverflow">
				<signature="func multipliedReportingOverflow(by: Swift.UInt32) -> (partialValue: Swift.UInt32, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.UInt32, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="by: Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="remainderReportingOverflow">
				<signature="func remainderReportingOverflow(dividingBy: Swift.UInt32) -> (partialValue: Swift.UInt32, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.UInt32, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="dividingBy: Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="signum">
				<signature="func signum() -> Swift.UInt32">
				<isStatic="False">
				<returnType="Swift.UInt32">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="subtractingReportingOverflow">
				<signature="func subtractingReportingOverflowSwift.UInt32 -> (partialValue: Swift.UInt32, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.UInt32, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="partialValue: Swift.UInt32">
					<Parameter="overflow: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="|">
				<signature="static func |(Swift.UInt32, Swift.UInt32) -> Swift.UInt32">
				<isStatic="True">
				<returnType="Swift.UInt32">
				<Parameters>
					<Parameter="Swift.UInt32">
					<Parameter="Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="|=">
				<signature="static func |=(Swift.UInt32, Swift.UInt32)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt32">
					<Parameter="Swift.UInt32">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.UInt32.SIMD16Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt32.SIMD2Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt32.SIMD32Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt32.SIMD4Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt32.SIMD64Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt32.SIMD8Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt32.Words">
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Int">
				<Static="False">
			</Property>
			<Property>
				<name="indices">
				<signature="var indices: Swift.Range(Int)">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Int">
				<Static="False">
			</Property>
			<Method>
				<name="index">
				<signature="func index(after: Int) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="after: Int">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.UInt64">
			<Property>
				<name="bitWidth">
				<signature="static var bitWidth: Int">
				<Static="False">
			</Property>
			<Property>
				<name="byteSwapped">
				<signature="var byteSwapped: Swift.UInt64">
				<Static="False">
			</Property>
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="leadingZeroBitCount">
				<signature="var leadingZeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="nonzeroBitCount">
				<signature="var nonzeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="trailingZeroBitCount">
				<signature="var trailingZeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="words">
				<signature="var words: Swift.UInt64.Words">
				<Static="False">
			</Property>
			<Method>
				<name="%">
				<signature="static func %(Swift.UInt64, Swift.UInt64) -> Swift.UInt64">
				<isStatic="True">
				<returnType="Swift.UInt64">
				<Parameters>
					<Parameter="Swift.UInt64">
					<Parameter="Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name="%=">
				<signature="static func %=(Swift.UInt64, Swift.UInt64)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt64">
					<Parameter="Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name="&">
				<signature="static func &(Swift.UInt64, Swift.UInt64) -> Swift.UInt64">
				<isStatic="True">
				<returnType="Swift.UInt64">
				<Parameters>
					<Parameter="Swift.UInt64">
					<Parameter="Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name="&<<">
				<signature="static func &(((Swift.UInt64, Swift.UInt64) -) Swift.UInt64">
				<isStatic="True">
				<returnType="Swift.UInt64">
				<Parameters>
					<Parameter="((Swift.UInt64">
					<Parameter="Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name="&<<=">
				<signature="static func &((=(Swift.UInt64, Swift.UInt64)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="(=(Swift.UInt64">
					<Parameter="Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name="&=">
				<signature="static func &=(Swift.UInt64, Swift.UInt64)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt64">
					<Parameter="Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name="&>>">
				<signature="static func &>>(Swift.UInt64, Swift.UInt64) -> Swift.UInt64">
				<isStatic="True">
				<returnType="Swift.UInt64">
				<Parameters>
					<Parameter="Swift.UInt64">
					<Parameter="Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name="&>>=">
				<signature="static func &>>=(Swift.UInt64, Swift.UInt64)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt64">
					<Parameter="Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name="*">
				<signature="static func *(Swift.UInt64, Swift.UInt64) -> Swift.UInt64">
				<isStatic="True">
				<returnType="Swift.UInt64">
				<Parameters>
					<Parameter="Swift.UInt64">
					<Parameter="Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name="*=">
				<signature="static func *=(Swift.UInt64, Swift.UInt64)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt64">
					<Parameter="Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name="+">
				<signature="static func +(Swift.UInt64, Swift.UInt64) -> Swift.UInt64">
				<isStatic="True">
				<returnType="Swift.UInt64">
				<Parameters>
					<Parameter="Swift.UInt64">
					<Parameter="Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name="+=">
				<signature="static func +=(Swift.UInt64, Swift.UInt64)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt64">
					<Parameter="Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name="-">
				<signature="static func -(Swift.UInt64, Swift.UInt64) -> Swift.UInt64">
				<isStatic="True">
				<returnType="Swift.UInt64">
				<Parameters>
					<Parameter="Swift.UInt64">
					<Parameter="Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name="-=">
				<signature="static func -=(Swift.UInt64, Swift.UInt64)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt64">
					<Parameter="Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name="/">
				<signature="static func /(Swift.UInt64, Swift.UInt64) -> Swift.UInt64">
				<isStatic="True">
				<returnType="Swift.UInt64">
				<Parameters>
					<Parameter="Swift.UInt64">
					<Parameter="Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name="/=">
				<signature="static func /=(Swift.UInt64, Swift.UInt64)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt64">
					<Parameter="Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name="<">
				<signature="static func ((Swift.UInt64, Swift.UInt64) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="(Swift.UInt64">
					<Parameter="Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name="<=">
				<signature="static func (=(Swift.UInt64, Swift.UInt64) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="=(Swift.UInt64">
					<Parameter="Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name="==">
				<signature="static func ==(Swift.UInt64, Swift.UInt64) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.UInt64">
					<Parameter="Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name=">">
				<signature="static func >(Swift.UInt64, Swift.UInt64) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.UInt64">
					<Parameter="Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name=">=">
				<signature="static func >=(Swift.UInt64, Swift.UInt64) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.UInt64">
					<Parameter="Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name="^">
				<signature="static func ^(Swift.UInt64, Swift.UInt64) -> Swift.UInt64">
				<isStatic="True">
				<returnType="Swift.UInt64">
				<Parameters>
					<Parameter="Swift.UInt64">
					<Parameter="Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name="^=">
				<signature="static func ^=(Swift.UInt64, Swift.UInt64)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt64">
					<Parameter="Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name="addingReportingOverflow">
				<signature="func addingReportingOverflowSwift.UInt64 -> (partialValue: Swift.UInt64, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.UInt64, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="partialValue: Swift.UInt64">
					<Parameter="overflow: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="dividedReportingOverflow">
				<signature="func dividedReportingOverflow(by: Swift.UInt64) -> (partialValue: Swift.UInt64, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.UInt64, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="by: Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name="dividingFullWidth">
				<signature="func dividingFullWidth((high: Swift.UInt64, low: Swift.UInt64)) -> (quotient: Swift.UInt64, remainder: Swift.UInt64)">
				<isStatic="False">
				<returnType="(quotient: quotient: Swift.UInt64, remainder: remainder: Swift.UInt64)">
				<Parameters>
					<Parameter="(high: Swift.UInt64">
					<Parameter="low: Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(to: Swift.Encoder)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="to: Swift.Encoder">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
			<Method>
				<name="multipliedFullWidth">
				<signature="func multipliedFullWidth(by: Swift.UInt64) -> (high: Swift.UInt64, low: Swift.UInt64)">
				<isStatic="False">
				<returnType="(high: high: Swift.UInt64, low: low: Swift.UInt64)">
				<Parameters>
					<Parameter="by: Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name="multipliedReportingOverflow">
				<signature="func multipliedReportingOverflow(by: Swift.UInt64) -> (partialValue: Swift.UInt64, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.UInt64, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="by: Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name="remainderReportingOverflow">
				<signature="func remainderReportingOverflow(dividingBy: Swift.UInt64) -> (partialValue: Swift.UInt64, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.UInt64, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="dividingBy: Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name="signum">
				<signature="func signum() -> Swift.UInt64">
				<isStatic="False">
				<returnType="Swift.UInt64">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="subtractingReportingOverflow">
				<signature="func subtractingReportingOverflowSwift.UInt64 -> (partialValue: Swift.UInt64, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.UInt64, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="partialValue: Swift.UInt64">
					<Parameter="overflow: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="|">
				<signature="static func |(Swift.UInt64, Swift.UInt64) -> Swift.UInt64">
				<isStatic="True">
				<returnType="Swift.UInt64">
				<Parameters>
					<Parameter="Swift.UInt64">
					<Parameter="Swift.UInt64">
				</Parameters>
			</Method>
			<Method>
				<name="|=">
				<signature="static func |=(Swift.UInt64, Swift.UInt64)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt64">
					<Parameter="Swift.UInt64">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.UInt64.SIMD16Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt64.SIMD2Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt64.SIMD32Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt64.SIMD4Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt64.SIMD64Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt64.SIMD8Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt64.Words">
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Int">
				<Static="False">
			</Property>
			<Property>
				<name="indices">
				<signature="var indices: Swift.Range(Int)">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Int">
				<Static="False">
			</Property>
			<Method>
				<name="index">
				<signature="func index(after: Int) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="after: Int">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.UInt8">
			<Property>
				<name="bitWidth">
				<signature="static var bitWidth: Int">
				<Static="False">
			</Property>
			<Property>
				<name="byteSwapped">
				<signature="var byteSwapped: Swift.UInt8">
				<Static="False">
			</Property>
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="leadingZeroBitCount">
				<signature="var leadingZeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="nonzeroBitCount">
				<signature="var nonzeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="trailingZeroBitCount">
				<signature="var trailingZeroBitCount: Int">
				<Static="False">
			</Property>
			<Property>
				<name="words">
				<signature="var words: Swift.UInt8.Words">
				<Static="False">
			</Property>
			<Method>
				<name="%">
				<signature="static func %(Swift.UInt8, Swift.UInt8) -> Swift.UInt8">
				<isStatic="True">
				<returnType="Swift.UInt8">
				<Parameters>
					<Parameter="Swift.UInt8">
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="%=">
				<signature="static func %=(Swift.UInt8, Swift.UInt8)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt8">
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="&">
				<signature="static func &(Swift.UInt8, Swift.UInt8) -> Swift.UInt8">
				<isStatic="True">
				<returnType="Swift.UInt8">
				<Parameters>
					<Parameter="Swift.UInt8">
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="&<<">
				<signature="static func &(((Swift.UInt8, Swift.UInt8) -) Swift.UInt8">
				<isStatic="True">
				<returnType="Swift.UInt8">
				<Parameters>
					<Parameter="((Swift.UInt8">
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="&<<=">
				<signature="static func &((=(Swift.UInt8, Swift.UInt8)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="(=(Swift.UInt8">
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="&=">
				<signature="static func &=(Swift.UInt8, Swift.UInt8)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt8">
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="&>>">
				<signature="static func &>>(Swift.UInt8, Swift.UInt8) -> Swift.UInt8">
				<isStatic="True">
				<returnType="Swift.UInt8">
				<Parameters>
					<Parameter="Swift.UInt8">
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="&>>=">
				<signature="static func &>>=(Swift.UInt8, Swift.UInt8)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt8">
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="*">
				<signature="static func *(Swift.UInt8, Swift.UInt8) -> Swift.UInt8">
				<isStatic="True">
				<returnType="Swift.UInt8">
				<Parameters>
					<Parameter="Swift.UInt8">
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="*=">
				<signature="static func *=(Swift.UInt8, Swift.UInt8)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt8">
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="+">
				<signature="static func +(Swift.UInt8, Swift.UInt8) -> Swift.UInt8">
				<isStatic="True">
				<returnType="Swift.UInt8">
				<Parameters>
					<Parameter="Swift.UInt8">
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="+=">
				<signature="static func +=(Swift.UInt8, Swift.UInt8)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt8">
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="-">
				<signature="static func -(Swift.UInt8, Swift.UInt8) -> Swift.UInt8">
				<isStatic="True">
				<returnType="Swift.UInt8">
				<Parameters>
					<Parameter="Swift.UInt8">
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="-=">
				<signature="static func -=(Swift.UInt8, Swift.UInt8)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt8">
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="/">
				<signature="static func /(Swift.UInt8, Swift.UInt8) -> Swift.UInt8">
				<isStatic="True">
				<returnType="Swift.UInt8">
				<Parameters>
					<Parameter="Swift.UInt8">
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="/=">
				<signature="static func /=(Swift.UInt8, Swift.UInt8)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt8">
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="<">
				<signature="static func ((Swift.UInt8, Swift.UInt8) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="(Swift.UInt8">
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="<=">
				<signature="static func (=(Swift.UInt8, Swift.UInt8) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="=(Swift.UInt8">
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="==">
				<signature="static func ==(Swift.UInt8, Swift.UInt8) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.UInt8">
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name=">">
				<signature="static func >(Swift.UInt8, Swift.UInt8) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.UInt8">
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name=">=">
				<signature="static func >=(Swift.UInt8, Swift.UInt8) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.UInt8">
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="^">
				<signature="static func ^(Swift.UInt8, Swift.UInt8) -> Swift.UInt8">
				<isStatic="True">
				<returnType="Swift.UInt8">
				<Parameters>
					<Parameter="Swift.UInt8">
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="^=">
				<signature="static func ^=(Swift.UInt8, Swift.UInt8)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt8">
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="addingReportingOverflow">
				<signature="func addingReportingOverflowSwift.UInt8 -> (partialValue: Swift.UInt8, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.UInt8, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="partialValue: Swift.UInt8">
					<Parameter="overflow: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="dividedReportingOverflow">
				<signature="func dividedReportingOverflow(by: Swift.UInt8) -> (partialValue: Swift.UInt8, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.UInt8, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="by: Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="dividingFullWidth">
				<signature="func dividingFullWidth((high: Swift.UInt8, low: Swift.UInt8)) -> (quotient: Swift.UInt8, remainder: Swift.UInt8)">
				<isStatic="False">
				<returnType="(quotient: quotient: Swift.UInt8, remainder: remainder: Swift.UInt8)">
				<Parameters>
					<Parameter="(high: Swift.UInt8">
					<Parameter="low: Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(to: Swift.Encoder)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="to: Swift.Encoder">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
			<Method>
				<name="multipliedFullWidth">
				<signature="func multipliedFullWidth(by: Swift.UInt8) -> (high: Swift.UInt8, low: Swift.UInt8)">
				<isStatic="False">
				<returnType="(high: high: Swift.UInt8, low: low: Swift.UInt8)">
				<Parameters>
					<Parameter="by: Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="multipliedReportingOverflow">
				<signature="func multipliedReportingOverflow(by: Swift.UInt8) -> (partialValue: Swift.UInt8, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.UInt8, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="by: Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="remainderReportingOverflow">
				<signature="func remainderReportingOverflow(dividingBy: Swift.UInt8) -> (partialValue: Swift.UInt8, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.UInt8, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="dividingBy: Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="signum">
				<signature="func signum() -> Swift.UInt8">
				<isStatic="False">
				<returnType="Swift.UInt8">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="subtractingReportingOverflow">
				<signature="func subtractingReportingOverflowSwift.UInt8 -> (partialValue: Swift.UInt8, overflow: Bool)">
				<isStatic="False">
				<returnType="(partialValue: partialValue: Swift.UInt8, overflow: overflow: Bool)">
				<Parameters>
					<Parameter="partialValue: Swift.UInt8">
					<Parameter="overflow: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="|">
				<signature="static func |(Swift.UInt8, Swift.UInt8) -> Swift.UInt8">
				<isStatic="True">
				<returnType="Swift.UInt8">
				<Parameters>
					<Parameter="Swift.UInt8">
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="|=">
				<signature="static func |=(Swift.UInt8, Swift.UInt8)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter="Swift.UInt8">
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.UInt8.SIMD16Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt8.SIMD2Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt8.SIMD32Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt8.SIMD4Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt8.SIMD64Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt8.SIMD8Storage">
			<Property>
				<name="scalarCount">
				<signature="var scalarCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.UInt8.Words">
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Int">
				<Static="False">
			</Property>
			<Property>
				<name="indices">
				<signature="var indices: Swift.Range(Int)">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Int">
				<Static="False">
			</Property>
			<Method>
				<name="index">
				<signature="func index(after: Int) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="after: Int">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.UnfoldSequence">
			<Method>
				<name="next">
				<signature="func next() -> Self?">
				<isStatic="False">
				<returnType="Swift.Optional<(0,0)>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Unicode.ASCII.Parser">
			<Method>
				<name="parseScalar">
				<signature="func parseScalar(from: Self) -> Swift.Unicode.ParseResult(Swift.CollectionOfOne(Swift.UInt8))">
				<isStatic="False">
				<returnType="Swift.Unicode.ParseResult<Swift.CollectionOfOne<Swift.UInt8>>">
				<Parameters>
					<Parameter="from: Self">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Unicode.CanonicalCombiningClass">
			<Property>
				<name="above">
				<signature="static var above: Swift.Unicode.CanonicalCombiningClass">
				<Static="False">
			</Property>
			<Property>
				<name="aboveLeft">
				<signature="static var aboveLeft: Swift.Unicode.CanonicalCombiningClass">
				<Static="False">
			</Property>
			<Property>
				<name="aboveRight">
				<signature="static var aboveRight: Swift.Unicode.CanonicalCombiningClass">
				<Static="False">
			</Property>
			<Property>
				<name="attachedAbove">
				<signature="static var attachedAbove: Swift.Unicode.CanonicalCombiningClass">
				<Static="False">
			</Property>
			<Property>
				<name="attachedAboveRight">
				<signature="static var attachedAboveRight: Swift.Unicode.CanonicalCombiningClass">
				<Static="False">
			</Property>
			<Property>
				<name="attachedBelow">
				<signature="static var attachedBelow: Swift.Unicode.CanonicalCombiningClass">
				<Static="False">
			</Property>
			<Property>
				<name="attachedBelowLeft">
				<signature="static var attachedBelowLeft: Swift.Unicode.CanonicalCombiningClass">
				<Static="False">
			</Property>
			<Property>
				<name="below">
				<signature="static var below: Swift.Unicode.CanonicalCombiningClass">
				<Static="False">
			</Property>
			<Property>
				<name="belowLeft">
				<signature="static var belowLeft: Swift.Unicode.CanonicalCombiningClass">
				<Static="False">
			</Property>
			<Property>
				<name="belowRight">
				<signature="static var belowRight: Swift.Unicode.CanonicalCombiningClass">
				<Static="False">
			</Property>
			<Property>
				<name="doubleAbove">
				<signature="static var doubleAbove: Swift.Unicode.CanonicalCombiningClass">
				<Static="False">
			</Property>
			<Property>
				<name="doubleBelow">
				<signature="static var doubleBelow: Swift.Unicode.CanonicalCombiningClass">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="iotaSubscript">
				<signature="static var iotaSubscript: Swift.Unicode.CanonicalCombiningClass">
				<Static="False">
			</Property>
			<Property>
				<name="kanaVoicing">
				<signature="static var kanaVoicing: Swift.Unicode.CanonicalCombiningClass">
				<Static="False">
			</Property>
			<Property>
				<name="left">
				<signature="static var left: Swift.Unicode.CanonicalCombiningClass">
				<Static="False">
			</Property>
			<Property>
				<name="notReordered">
				<signature="static var notReordered: Swift.Unicode.CanonicalCombiningClass">
				<Static="False">
			</Property>
			<Property>
				<name="nukta">
				<signature="static var nukta: Swift.Unicode.CanonicalCombiningClass">
				<Static="False">
			</Property>
			<Property>
				<name="overlay">
				<signature="static var overlay: Swift.Unicode.CanonicalCombiningClass">
				<Static="False">
			</Property>
			<Property>
				<name="rawValue">
				<signature="var rawValue: Swift.UInt8">
				<Static="False">
			</Property>
			<Property>
				<name="right">
				<signature="static var right: Swift.Unicode.CanonicalCombiningClass">
				<Static="False">
			</Property>
			<Property>
				<name="virama">
				<signature="static var virama: Swift.Unicode.CanonicalCombiningClass">
				<Static="False">
			</Property>
			<Method>
				<name="<">
				<signature="static func ((Swift.Unicode.CanonicalCombiningClass, Swift.Unicode.CanonicalCombiningClass) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="(Swift.Unicode.CanonicalCombiningClass">
					<Parameter="Swift.Unicode.CanonicalCombiningClass">
				</Parameters>
			</Method>
			<Method>
				<name="==">
				<signature="static func ==(Swift.Unicode.CanonicalCombiningClass, Swift.Unicode.CanonicalCombiningClass) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.Unicode.CanonicalCombiningClass">
					<Parameter="Swift.Unicode.CanonicalCombiningClass">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Unicode.Scalar">
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="isASCII">
				<signature="var isASCII: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="properties">
				<signature="var properties: Swift.Unicode.Scalar.Properties">
				<Static="False">
			</Property>
			<Property>
				<name="utf16">
				<signature="var utf16: Swift.Unicode.Scalar.UTF16View">
				<Static="False">
			</Property>
			<Property>
				<name="utf8">
				<signature="var utf8: Swift.Unicode.Scalar.UTF8View">
				<Static="False">
			</Property>
			<Property>
				<name="value">
				<signature="var value: Swift.UInt32">
				<Static="False">
			</Property>
			<Method>
				<name="<">
				<signature="static func ((Swift.Unicode.Scalar, Swift.Unicode.Scalar) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="(Swift.Unicode.Scalar">
					<Parameter="Swift.Unicode.Scalar">
				</Parameters>
			</Method>
			<Method>
				<name="==">
				<signature="static func ==(Swift.Unicode.Scalar, Swift.Unicode.Scalar) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.Unicode.Scalar">
					<Parameter="Swift.Unicode.Scalar">
				</Parameters>
			</Method>
			<Method>
				<name="escaped">
				<signature="func escaped(asASCII: Bool) -> Swift.String">
				<isStatic="False">
				<returnType="Swift.String">
				<Parameters>
					<Parameter="asASCII: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
			<Method>
				<name="withUTF8CodeUnits">
				<signature="func withUTF8CodeUnitsSwift.UnsafeBufferPointer(Swift.UInt8) -> Self -> Self">
				<isStatic="False">
				<returnType="(0,0)">
				<Parameters>
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="write">
				<signature="func write(to: Self)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="to: Self">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Unicode.Scalar.Properties">
			<Property>
				<name="age">
				<signature="var age: (major: major: Int, minor: minor: Int)?">
				<Static="False">
			</Property>
			<Property>
				<name="canonicalCombiningClass">
				<signature="var canonicalCombiningClass: Swift.Unicode.CanonicalCombiningClass">
				<Static="False">
			</Property>
			<Property>
				<name="changesWhenCaseFolded">
				<signature="var changesWhenCaseFolded: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="changesWhenCaseMapped">
				<signature="var changesWhenCaseMapped: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="changesWhenLowercased">
				<signature="var changesWhenLowercased: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="changesWhenNFKCCaseFolded">
				<signature="var changesWhenNFKCCaseFolded: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="changesWhenTitlecased">
				<signature="var changesWhenTitlecased: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="changesWhenUppercased">
				<signature="var changesWhenUppercased: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="generalCategory">
				<signature="var generalCategory: Swift.Unicode.GeneralCategory">
				<Static="False">
			</Property>
			<Property>
				<name="isASCIIHexDigit">
				<signature="var isASCIIHexDigit: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isAlphabetic">
				<signature="var isAlphabetic: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isBidiControl">
				<signature="var isBidiControl: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isBidiMirrored">
				<signature="var isBidiMirrored: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isCaseIgnorable">
				<signature="var isCaseIgnorable: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isCased">
				<signature="var isCased: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isDash">
				<signature="var isDash: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isDefaultIgnorableCodePoint">
				<signature="var isDefaultIgnorableCodePoint: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isDeprecated">
				<signature="var isDeprecated: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isDiacritic">
				<signature="var isDiacritic: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isEmoji">
				<signature="var isEmoji: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isEmojiModifier">
				<signature="var isEmojiModifier: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isEmojiModifierBase">
				<signature="var isEmojiModifierBase: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isEmojiPresentation">
				<signature="var isEmojiPresentation: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isExtender">
				<signature="var isExtender: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isFullCompositionExclusion">
				<signature="var isFullCompositionExclusion: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isGraphemeBase">
				<signature="var isGraphemeBase: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isGraphemeExtend">
				<signature="var isGraphemeExtend: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isHexDigit">
				<signature="var isHexDigit: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isIDContinue">
				<signature="var isIDContinue: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isIDSBinaryOperator">
				<signature="var isIDSBinaryOperator: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isIDSTrinaryOperator">
				<signature="var isIDSTrinaryOperator: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isIDStart">
				<signature="var isIDStart: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isIdeographic">
				<signature="var isIdeographic: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isJoinControl">
				<signature="var isJoinControl: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isLogicalOrderException">
				<signature="var isLogicalOrderException: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isLowercase">
				<signature="var isLowercase: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isMath">
				<signature="var isMath: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isNoncharacterCodePoint">
				<signature="var isNoncharacterCodePoint: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isPatternSyntax">
				<signature="var isPatternSyntax: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isPatternWhitespace">
				<signature="var isPatternWhitespace: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isQuotationMark">
				<signature="var isQuotationMark: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isRadical">
				<signature="var isRadical: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isSentenceTerminal">
				<signature="var isSentenceTerminal: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isSoftDotted">
				<signature="var isSoftDotted: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isTerminalPunctuation">
				<signature="var isTerminalPunctuation: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isUnifiedIdeograph">
				<signature="var isUnifiedIdeograph: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isUppercase">
				<signature="var isUppercase: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isVariationSelector">
				<signature="var isVariationSelector: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isWhitespace">
				<signature="var isWhitespace: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isXIDContinue">
				<signature="var isXIDContinue: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="isXIDStart">
				<signature="var isXIDStart: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="lowercaseMapping">
				<signature="var lowercaseMapping: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="name">
				<signature="var name: String?">
				<Static="False">
			</Property>
			<Property>
				<name="nameAlias">
				<signature="var nameAlias: String?">
				<Static="False">
			</Property>
			<Property>
				<name="numericType">
				<signature="var numericType: Unicode.NumericType?">
				<Static="False">
			</Property>
			<Property>
				<name="numericValue">
				<signature="var numericValue: Double?">
				<Static="False">
			</Property>
			<Property>
				<name="titlecaseMapping">
				<signature="var titlecaseMapping: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="uppercaseMapping">
				<signature="var uppercaseMapping: Swift.String">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Unicode.Scalar.UTF16View">
			<Property>
				<name="endIndex">
				<signature="var endIndex: Int">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Int">
				<Static="False">
			</Property>
			<Property>
				<name="value">
				<signature="var value: Swift.Unicode.Scalar">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Unicode.Scalar.UTF8View">
			<Property>
				<name="endIndex">
				<signature="var endIndex: Int">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Int">
				<Static="False">
			</Property>
			<Property>
				<name="value">
				<signature="var value: Swift.Unicode.Scalar">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Unicode.UTF16.ForwardParser">
		</Struct>
		<Struct name="Swift.Unicode.UTF16.ReverseParser">
		</Struct>
		<Struct name="Swift.Unicode.UTF32.Parser">
			<Method>
				<name="parseScalar">
				<signature="func parseScalar(from: Self) -> Swift.Unicode.ParseResult(Swift.CollectionOfOne(Swift.UInt32))">
				<isStatic="False">
				<returnType="Swift.Unicode.ParseResult<Swift.CollectionOfOne<Swift.UInt32>>">
				<Parameters>
					<Parameter="from: Self">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Unicode.UTF8.ForwardParser">
		</Struct>
		<Struct name="Swift.Unicode.UTF8.ReverseParser">
		</Struct>
		<Struct name="Swift.Unmanaged">
			<Method>
				<name="autorelease">
				<signature="func autorelease() -> Swift.Unmanaged(Self)">
				<isStatic="False">
				<returnType="Swift.Unmanaged<(0,0)>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="fromOpaque">
				<signature="static func fromOpaqueSwift.UnsafeRawPointer -> Swift.Unmanaged(Self)">
				<isStatic="True">
				<returnType="Swift.Unmanaged<(0,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="passRetained">
				<signature="static func passRetainedSelf -> Swift.Unmanaged(Self)">
				<isStatic="True">
				<returnType="Swift.Unmanaged<(0,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="passUnretained">
				<signature="static func passUnretainedSelf -> Swift.Unmanaged(Self)">
				<isStatic="True">
				<returnType="Swift.Unmanaged<(0,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="release">
				<signature="func release()">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="retain">
				<signature="func retain() -> Swift.Unmanaged(Self)">
				<isStatic="False">
				<returnType="Swift.Unmanaged<(0,0)>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="takeRetainedValue">
				<signature="func takeRetainedValue() -> Self">
				<isStatic="False">
				<returnType="(0,0)">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="takeUnretainedValue">
				<signature="func takeUnretainedValue() -> Self">
				<isStatic="False">
				<returnType="(0,0)">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="toOpaque">
				<signature="func toOpaque() -> Swift.UnsafeMutableRawPointer">
				<isStatic="False">
				<returnType="Swift.UnsafeMutableRawPointer">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.UnsafeBufferPointer">
			<Property>
				<name="baseAddress">
				<signature="var baseAddress: UnsafePointer(Self)?">
				<Static="False">
			</Property>
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Int">
				<Static="False">
			</Property>
			<Property>
				<name="indices">
				<signature="var indices: Swift.Range(Int)">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Int">
				<Static="False">
			</Property>
			<Method>
				<name="deallocate">
				<signature="func deallocate()">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="distance">
				<signature="func distance(from: Int, to: Int) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="from: Int">
					<Parameter="to: Int">
				</Parameters>
			</Method>
			<Method>
				<name="formIndex">
				<signature="func formIndex(after: Int)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="after: Int">
				</Parameters>
			</Method>
			<Method>
				<name="index">
				<signature="func index(after: Int) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="after: Int">
				</Parameters>
			</Method>
			<Method>
				<name="withContiguousStorageIfAvailable">
				<signature="func withContiguousStorageIfAvailableSwift.UnsafeBufferPointer(Self) -> ??? -> ????">
				<isStatic="False">
				<returnType="Swift.Optional<(1,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="withMemoryRebound">
				<signature="func withMemoryRebound(to: Meta , : Swift.UnsafeBufferPointer(???) -> ???) -> ???">
				<isStatic="False">
				<returnType="(1,1)">
				<Parameters>
					<Parameter="to: Meta ">
					<Parameter=": Swift.UnsafeBufferPointer(???">
				</Parameters>
			</Method>
			<Method>
				<name="withUnsafeBytes">
				<signature="func withUnsafeBytesSwift.UnsafeRawBufferPointer -> ??? -> ???">
				<isStatic="False">
				<returnType="(1,0)">
				<Parameters>
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.UnsafeBufferPointer.Iterator">
			<Method>
				<name="next">
				<signature="func next() -> Self?">
				<isStatic="False">
				<returnType="Swift.Optional<(0,0)>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.UnsafeMutableBufferPointer">
			<Property>
				<name="baseAddress">
				<signature="var baseAddress: UnsafeMutablePointer(Self)?">
				<Static="False">
			</Property>
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Int">
				<Static="False">
			</Property>
			<Property>
				<name="indices">
				<signature="var indices: Swift.Range(Int)">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Int">
				<Static="False">
			</Property>
			<Method>
				<name="allocate">
				<signature="static func allocate(capacity: Int) -> Swift.UnsafeMutableBufferPointer(Self)">
				<isStatic="True">
				<returnType="Swift.UnsafeMutableBufferPointer<(0,0)>">
				<Parameters>
					<Parameter="capacity: Int">
				</Parameters>
			</Method>
			<Method>
				<name="assign">
				<signature="func assign(repeating: Self)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="repeating: Self">
				</Parameters>
			</Method>
			<Method>
				<name="deallocate">
				<signature="func deallocate()">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="distance">
				<signature="func distance(from: Int, to: Int) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="from: Int">
					<Parameter="to: Int">
				</Parameters>
			</Method>
			<Method>
				<name="formIndex">
				<signature="func formIndex(after: Int)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="after: Int">
				</Parameters>
			</Method>
			<Method>
				<name="index">
				<signature="func index(after: Int) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="after: Int">
				</Parameters>
			</Method>
			<Method>
				<name="initialize">
				<signature="func initialize(from: ???) -> (???B0.Iterator, Int)">
				<isStatic="False">
				<returnType="((1,0)B0.Iterator, Int)">
				<Parameters>
					<Parameter="from: ???">
				</Parameters>
			</Method>
			<Method>
				<name="swapAt">
				<signature="func swapAt(Int, Int)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="Int">
					<Parameter="Int">
				</Parameters>
			</Method>
			<Method>
				<name="withContiguousMutableStorageIfAvailable">
				<signature="func withContiguousMutableStorageIfAvailableSwift.UnsafeMutableBufferPointer(Self) -> ??? -> ????">
				<isStatic="False">
				<returnType="Swift.Optional<(1,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="withContiguousStorageIfAvailable">
				<signature="func withContiguousStorageIfAvailableSwift.UnsafeBufferPointer(Self) -> ??? -> ????">
				<isStatic="False">
				<returnType="Swift.Optional<(1,0)>">
				<Parameters>
					<Parameter="Self">
				</Parameters>
			</Method>
			<Method>
				<name="withMemoryRebound">
				<signature="func withMemoryRebound(to: Meta , : Swift.UnsafeMutableBufferPointer(???) -> ???) -> ???">
				<isStatic="False">
				<returnType="(1,1)">
				<Parameters>
					<Parameter="to: Meta ">
					<Parameter=": Swift.UnsafeMutableBufferPointer(???">
				</Parameters>
			</Method>
			<Method>
				<name="withUnsafeBytes">
				<signature="func withUnsafeBytesSwift.UnsafeRawBufferPointer -> ??? -> ???">
				<isStatic="False">
				<returnType="(1,0)">
				<Parameters>
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.UnsafeMutablePointer">
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="pointee">
				<signature="var pointee: Self">
				<Static="False">
			</Property>
			<Method>
				<name="allocate">
				<signature="static func allocate(capacity: Int) -> Swift.UnsafeMutablePointer(Self)">
				<isStatic="True">
				<returnType="Swift.UnsafeMutablePointer<(0,0)>">
				<Parameters>
					<Parameter="capacity: Int">
				</Parameters>
			</Method>
			<Method>
				<name="assign">
				<signature="func assign(from: Swift.UnsafePointer(Self), count: Int)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="from: Swift.UnsafePointer(Self">
				</Parameters>
			</Method>
			<Method>
				<name="deallocate">
				<signature="func deallocate(capacity: Int)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="capacity: Int">
				</Parameters>
			</Method>
			<Method>
				<name="deinitialize">
				<signature="func deinitialize(count: Int) -> Swift.UnsafeMutableRawPointer">
				<isStatic="False">
				<returnType="Swift.UnsafeMutableRawPointer">
				<Parameters>
					<Parameter="count: Int">
				</Parameters>
			</Method>
			<Method>
				<name="initialize">
				<signature="func initialize(to: Self, count: Int)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="to: Self">
					<Parameter="count: Int">
				</Parameters>
			</Method>
			<Method>
				<name="move">
				<signature="func move() -> Self">
				<isStatic="False">
				<returnType="(0,0)">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="moveAssign">
				<signature="func moveAssign(from: Swift.UnsafeMutablePointer(Self), count: Int)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="from: Swift.UnsafeMutablePointer(Self">
				</Parameters>
			</Method>
			<Method>
				<name="moveInitialize">
				<signature="func moveInitialize(from: Swift.UnsafeMutablePointer(Self), count: Int)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="from: Swift.UnsafeMutablePointer(Self">
				</Parameters>
			</Method>
			<Method>
				<name="withMemoryRebound">
				<signature="func withMemoryRebound(to: Meta , capacity: Int, : Swift.UnsafeMutablePointer(???) -> ???) -> ???">
				<isStatic="False">
				<returnType="(1,1)">
				<Parameters>
					<Parameter="to: Meta ">
					<Parameter="capacity: Int">
					<Parameter=": Swift.UnsafeMutablePointer(???">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.UnsafeMutableRawBufferPointer">
			<Property>
				<name="baseAddress">
				<signature="var baseAddress: UnsafeMutableRawPointer?">
				<Static="False">
			</Property>
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Int">
				<Static="False">
			</Property>
			<Property>
				<name="indices">
				<signature="var indices: Swift.Range(Int)">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Int">
				<Static="False">
			</Property>
			<Method>
				<name="allocate">
				<signature="static func allocate(count: Int) -> Swift.UnsafeMutableRawBufferPointer">
				<isStatic="True">
				<returnType="Swift.UnsafeMutableRawBufferPointer">
				<Parameters>
					<Parameter="count: Int">
				</Parameters>
			</Method>
			<Method>
				<name="bindMemory">
				<signature="func bindMemory(to: Meta ) -> Swift.UnsafeMutableBufferPointer(Self)">
				<isStatic="False">
				<returnType="Swift.UnsafeMutableBufferPointer<(0,0)>">
				<Parameters>
					<Parameter="to: Meta ">
				</Parameters>
			</Method>
			<Method>
				<name="copyBytes">
				<signature="func copyBytes(from: Swift.UnsafeRawBufferPointer)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="from: Swift.UnsafeRawBufferPointer">
				</Parameters>
			</Method>
			<Method>
				<name="copyMemory">
				<signature="func copyMemory(from: Swift.UnsafeRawBufferPointer)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="from: Swift.UnsafeRawBufferPointer">
				</Parameters>
			</Method>
			<Method>
				<name="deallocate">
				<signature="func deallocate()">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="initializeMemory">
				<signature="func initializeMemory(as: Meta , from: Self) -> (unwritten: Self.Iterator, initialized: Swift.UnsafeMutableBufferPointer(Self.Element))">
				<isStatic="False">
				<returnType="(unwritten: unwritten: (0,0)A0.Iterator, initialized: initialized: Swift.UnsafeMutableBufferPointer<(0,0)A0.Element>)">
				<Parameters>
					<Parameter="as: Meta ">
					<Parameter="from: Self">
				</Parameters>
			</Method>
			<Method>
				<name="load">
				<signature="func load(fromByteOffset: Int, as: Meta ) -> Self">
				<isStatic="False">
				<returnType="(0,0)">
				<Parameters>
					<Parameter="fromByteOffset: Int">
					<Parameter="as: Meta ">
				</Parameters>
			</Method>
			<Method>
				<name="makeIterator">
				<signature="func makeIterator() -> Swift.UnsafeRawBufferPointer.Iterator">
				<isStatic="False">
				<returnType="Swift.UnsafeRawBufferPointer.Iterator">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="storeBytes">
				<signature="func storeBytes(of: Self, toByteOffset: Int, as: Meta )">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="of: Self">
					<Parameter="toByteOffset: Int">
					<Parameter="as: Meta ">
				</Parameters>
			</Method>
			<Method>
				<name="swapAt">
				<signature="func swapAt(Int, Int)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="Int">
					<Parameter="Int">
				</Parameters>
			</Method>
			<Method>
				<name="withUnsafeBytes">
				<signature="func withUnsafeBytesSwift.UnsafeRawBufferPointer -> Self -> Self">
				<isStatic="False">
				<returnType="(0,0)">
				<Parameters>
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.UnsafeMutableRawPointer">
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Method>
				<name="advanced">
				<signature="func advanced(by: Int) -> Swift.UnsafeMutableRawPointer">
				<isStatic="False">
				<returnType="Swift.UnsafeMutableRawPointer">
				<Parameters>
					<Parameter="by: Int">
				</Parameters>
			</Method>
			<Method>
				<name="allocate">
				<signature="static func allocate(bytes: Int, alignedTo: Int) -> Swift.UnsafeMutableRawPointer">
				<isStatic="True">
				<returnType="Swift.UnsafeMutableRawPointer">
				<Parameters>
					<Parameter="bytes: Int">
					<Parameter="alignedTo: Int">
				</Parameters>
			</Method>
			<Method>
				<name="assumingMemoryBound">
				<signature="func assumingMemoryBound(to: Meta ) -> Swift.UnsafeMutablePointer(Self)">
				<isStatic="False">
				<returnType="Swift.UnsafeMutablePointer<(0,0)>">
				<Parameters>
					<Parameter="to: Meta ">
				</Parameters>
			</Method>
			<Method>
				<name="bindMemory">
				<signature="func bindMemory(to: Meta , capacity: Int) -> Swift.UnsafeMutablePointer(Self)">
				<isStatic="False">
				<returnType="Swift.UnsafeMutablePointer<(0,0)>">
				<Parameters>
					<Parameter="to: Meta ">
					<Parameter="capacity: Int">
				</Parameters>
			</Method>
			<Method>
				<name="copyBytes">
				<signature="func copyBytes(from: Swift.UnsafeRawPointer, count: Int)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="from: Swift.UnsafeRawPointer">
					<Parameter="count: Int">
				</Parameters>
			</Method>
			<Method>
				<name="copyMemory">
				<signature="func copyMemory(from: Swift.UnsafeRawPointer, byteCount: Int)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="from: Swift.UnsafeRawPointer">
					<Parameter="byteCount: Int">
				</Parameters>
			</Method>
			<Method>
				<name="deallocate">
				<signature="func deallocate(bytes: Int, alignedTo: Int)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="bytes: Int">
					<Parameter="alignedTo: Int">
				</Parameters>
			</Method>
			<Method>
				<name="initializeMemory">
				<signature="func initializeMemory(as: Meta , at: Int, count: Int, to: Self) -> Swift.UnsafeMutablePointer(Self)">
				<isStatic="False">
				<returnType="Swift.UnsafeMutablePointer<(0,0)>">
				<Parameters>
					<Parameter="as: Meta ">
					<Parameter="at: Int">
					<Parameter="count: Int">
					<Parameter="to: Self">
				</Parameters>
			</Method>
			<Method>
				<name="load">
				<signature="func load(fromByteOffset: Int, as: Meta ) -> Self">
				<isStatic="False">
				<returnType="(0,0)">
				<Parameters>
					<Parameter="fromByteOffset: Int">
					<Parameter="as: Meta ">
				</Parameters>
			</Method>
			<Method>
				<name="moveInitializeMemory">
				<signature="func moveInitializeMemory(as: Meta , from: Swift.UnsafeMutablePointer(Self), count: Int) -> Swift.UnsafeMutablePointer(Self)">
				<isStatic="False">
				<returnType="Swift.UnsafeMutablePointer<(0,0)>">
				<Parameters>
					<Parameter="as: Meta ">
					<Parameter="from: Swift.UnsafeMutablePointer(Self">
				</Parameters>
			</Method>
			<Method>
				<name="storeBytes">
				<signature="func storeBytes(of: Self, toByteOffset: Int, as: Meta )">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="of: Self">
					<Parameter="toByteOffset: Int">
					<Parameter="as: Meta ">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.UnsafePointer">
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="pointee">
				<signature="var pointee: Self">
				<Static="False">
			</Property>
			<Method>
				<name="deallocate">
				<signature="func deallocate()">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="withMemoryRebound">
				<signature="func withMemoryRebound(to: Meta , capacity: Int, : Swift.UnsafePointer(???) -> ???) -> ???">
				<isStatic="False">
				<returnType="(1,1)">
				<Parameters>
					<Parameter="to: Meta ">
					<Parameter="capacity: Int">
					<Parameter=": Swift.UnsafePointer(???">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.UnsafeRawBufferPointer">
			<Property>
				<name="baseAddress">
				<signature="var baseAddress: UnsafeRawPointer?">
				<Static="False">
			</Property>
			<Property>
				<name="count">
				<signature="var count: Int">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="endIndex">
				<signature="var endIndex: Int">
				<Static="False">
			</Property>
			<Property>
				<name="indices">
				<signature="var indices: Swift.Range(Int)">
				<Static="False">
			</Property>
			<Property>
				<name="startIndex">
				<signature="var startIndex: Int">
				<Static="False">
			</Property>
			<Method>
				<name="bindMemory">
				<signature="func bindMemory(to: Meta ) -> Swift.UnsafeBufferPointer(Self)">
				<isStatic="False">
				<returnType="Swift.UnsafeBufferPointer<(0,0)>">
				<Parameters>
					<Parameter="to: Meta ">
				</Parameters>
			</Method>
			<Method>
				<name="deallocate">
				<signature="func deallocate()">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="load">
				<signature="func load(fromByteOffset: Int, as: Meta ) -> Self">
				<isStatic="False">
				<returnType="(0,0)">
				<Parameters>
					<Parameter="fromByteOffset: Int">
					<Parameter="as: Meta ">
				</Parameters>
			</Method>
			<Method>
				<name="makeIterator">
				<signature="func makeIterator() -> Swift.UnsafeRawBufferPointer.Iterator">
				<isStatic="False">
				<returnType="Swift.UnsafeRawBufferPointer.Iterator">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="withUnsafeBytes">
				<signature="func withUnsafeBytesSwift.UnsafeRawBufferPointer -> Self -> Self">
				<isStatic="False">
				<returnType="(0,0)">
				<Parameters>
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.UnsafeRawBufferPointer.Iterator">
			<Method>
				<name="next">
				<signature="func next() -> UInt8?">
				<isStatic="False">
				<returnType="Swift.Optional<Swift.UInt8>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.UnsafeRawPointer">
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Method>
				<name="advanced">
				<signature="func advanced(by: Int) -> Swift.UnsafeRawPointer">
				<isStatic="False">
				<returnType="Swift.UnsafeRawPointer">
				<Parameters>
					<Parameter="by: Int">
				</Parameters>
			</Method>
			<Method>
				<name="assumingMemoryBound">
				<signature="func assumingMemoryBound(to: Meta ) -> Swift.UnsafePointer(Self)">
				<isStatic="False">
				<returnType="Swift.UnsafePointer<(0,0)>">
				<Parameters>
					<Parameter="to: Meta ">
				</Parameters>
			</Method>
			<Method>
				<name="bindMemory">
				<signature="func bindMemory(to: Meta , capacity: Int) -> Swift.UnsafePointer(Self)">
				<isStatic="False">
				<returnType="Swift.UnsafePointer<(0,0)>">
				<Parameters>
					<Parameter="to: Meta ">
					<Parameter="capacity: Int">
				</Parameters>
			</Method>
			<Method>
				<name="deallocate">
				<signature="func deallocate()">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="load">
				<signature="func load(fromByteOffset: Int, as: Meta ) -> Self">
				<isStatic="False">
				<returnType="(0,0)">
				<Parameters>
					<Parameter="fromByteOffset: Int">
					<Parameter="as: Meta ">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="Swift.Zip2Sequence">
			<Property>
				<name="underestimatedCount">
				<signature="var underestimatedCount: Int">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="Swift.Zip2Sequence.Iterator">
			<Method>
				<name="next">
				<signature="func next() -> (Self.Element, ???A1.Element)?">
				<isStatic="False">
				<returnType="Swift.Optional<((0,0)A0.Element, (0,1)A1.Element)>">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
	</Structs>
	<Enums>
		<Enum name="Swift.CollectionDifference.Change">
		</Enum>
		<Enum name="Swift.CommandLine">
			<Property>
				<name="argc">
				<signature="static var argc: Swift.Int32">
				<Static="False">
			</Property>
			<Property>
				<name="arguments">
				<signature="static var arguments: Swift.Array(Swift.String)">
				<Static="False">
			</Property>
			<Property>
				<name="unsafeArgv">
				<signature="static var unsafeArgv: Swift.UnsafeMutablePointer(UnsafeMutablePointer(Swift.Int8))?">
				<Static="False">
			</Property>
		</Enum>
		<Enum name="Swift.DecodingError">
			<Method>
				<name="dataCorruptedError">
				<signature="static func dataCorruptedError(in: Swift.SingleValueDecodingContainer, debugDescription: Swift.String) -> Swift.DecodingError">
				<isStatic="True">
				<returnType="Swift.DecodingError">
				<Parameters>
					<Parameter="in: Swift.SingleValueDecodingContainer">
					<Parameter="debugDescription: Swift.String">
				</Parameters>
			</Method>
		</Enum>
		<Enum name="Swift.EncodingError">
		</Enum>
		<Enum name="Swift.FloatingPointClassification">
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Method>
				<name="==">
				<signature="static func ==(Swift.FloatingPointClassification, Swift.FloatingPointClassification) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.FloatingPointClassification">
					<Parameter="Swift.FloatingPointClassification">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Enum>
		<Enum name="Swift.FloatingPointRoundingRule">
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Method>
				<name="==">
				<signature="static func ==(Swift.FloatingPointRoundingRule, Swift.FloatingPointRoundingRule) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.FloatingPointRoundingRule">
					<Parameter="Swift.FloatingPointRoundingRule">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Enum>
		<Enum name="Swift.FloatingPointSign">
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="rawValue">
				<signature="var rawValue: Int">
				<Static="False">
			</Property>
			<Method>
				<name="==">
				<signature="static func ==(Swift.FloatingPointSign, Swift.FloatingPointSign) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.FloatingPointSign">
					<Parameter="Swift.FloatingPointSign">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Enum>
		<Enum name="Swift.MemoryLayout">
			<Property>
				<name="alignment">
				<signature="static var alignment: Int">
				<Static="False">
			</Property>
			<Property>
				<name="size">
				<signature="static var size: Int">
				<Static="False">
			</Property>
			<Property>
				<name="stride">
				<signature="static var stride: Int">
				<Static="False">
			</Property>
			<Method>
				<name="alignment">
				<signature="static func alignment(ofValue: Self) -> Int">
				<isStatic="True">
				<returnType="Int">
				<Parameters>
					<Parameter="ofValue: Self">
				</Parameters>
			</Method>
			<Method>
				<name="offset">
				<signature="static func offset(of: Swift.PartialKeyPath(Self)) -> Int?">
				<isStatic="True">
				<returnType="Swift.Optional<Int>">
				<Parameters>
					<Parameter="of: Swift.PartialKeyPath(Self">
				</Parameters>
			</Method>
			<Method>
				<name="size">
				<signature="static func size(ofValue: Self) -> Int">
				<isStatic="True">
				<returnType="Int">
				<Parameters>
					<Parameter="ofValue: Self">
				</Parameters>
			</Method>
			<Method>
				<name="stride">
				<signature="static func stride(ofValue: Self) -> Int">
				<isStatic="True">
				<returnType="Int">
				<Parameters>
					<Parameter="ofValue: Self">
				</Parameters>
			</Method>
		</Enum>
		<Enum name="Swift.Mirror.AncestorRepresentation">
		</Enum>
		<Enum name="Swift.Mirror.DisplayStyle">
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Method>
				<name="==">
				<signature="static func ==(Swift.Mirror.DisplayStyle, Swift.Mirror.DisplayStyle) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.Mirror.DisplayStyle">
					<Parameter="Swift.Mirror.DisplayStyle">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Enum>
		<Enum name="Swift.Never">
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Method>
				<name="<">
				<signature="static func ((Swift.Never, Swift.Never) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="(Swift.Never">
					<Parameter="Swift.Never">
				</Parameters>
			</Method>
			<Method>
				<name="==">
				<signature="static func ==(Swift.Never, Swift.Never) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.Never">
					<Parameter="Swift.Never">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Enum>
		<Enum name="Swift.Optional">
			<Property>
				<name="customMirror">
				<signature="var customMirror: Swift.Mirror">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="unsafelyUnwrapped">
				<signature="var unsafelyUnwrapped: Self">
				<Static="False">
			</Property>
			<Method>
				<name="flatMap">
				<signature="func flatMapSelf -> ???> -> Swift.Optional(????">
				<isStatic="False">
				<returnType="Swift.Optional<(1,0)>">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="map">
				<signature="func mapSelf -> ??? -> ????">
				<isStatic="False">
				<returnType="Swift.Optional<(1,0)>">
				<Parameters>
				</Parameters>
			</Method>
		</Enum>
		<Enum name="Swift.Result">
			<Method>
				<name="flatMap">
				<signature="func flatMapSelf -> Swift.Result(???, ???) -> Swift.Result(???, ???)">
				<isStatic="False">
				<returnType="Swift.Result<(1,0), (0,1)>">
				<Parameters>
					<Parameter="???">
					<Parameter="???">
				</Parameters>
			</Method>
			<Method>
				<name="flatMapError">
				<signature="func flatMapError??? -> Swift.Result(Self, ???) -> Swift.Result(Self, ???)">
				<isStatic="False">
				<returnType="Swift.Result<(0,0), (1,0)>">
				<Parameters>
					<Parameter="Self">
					<Parameter="???">
				</Parameters>
			</Method>
			<Method>
				<name="get">
				<signature="func get() -> Self">
				<isStatic="False">
				<returnType="(0,0)">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="map">
				<signature="func mapSelf -> ??? -> Swift.Result(???, ???)">
				<isStatic="False">
				<returnType="Swift.Result<(1,0), (0,1)>">
				<Parameters>
					<Parameter="???">
					<Parameter="???">
				</Parameters>
			</Method>
			<Method>
				<name="mapError">
				<signature="func mapError??? -> ??? -> Swift.Result(Self, ???)">
				<isStatic="False">
				<returnType="Swift.Result<(0,0), (1,0)>">
				<Parameters>
					<Parameter="Self">
					<Parameter="???">
				</Parameters>
			</Method>
		</Enum>
		<Enum name="Swift.Unicode">
		</Enum>
		<Enum name="Swift.Unicode.ASCII">
			<Property>
				<name="encodedReplacementCharacter">
				<signature="static var encodedReplacementCharacter: Swift.CollectionOfOne(Swift.UInt8)">
				<Static="False">
			</Property>
			<Method>
				<name="decode">
				<signature="static func decodeSwift.CollectionOfOne(Swift.UInt8) -> Swift.Unicode.Scalar">
				<isStatic="True">
				<returnType="Swift.Unicode.Scalar">
				<Parameters>
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="encode">
				<signature="static func encodeSwift.Unicode.Scalar -> CollectionOfOne(Swift.UInt8)?">
				<isStatic="True">
				<returnType="Swift.Optional<Swift.CollectionOfOne<Swift.UInt8>>">
				<Parameters>
					<Parameter="Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="transcode">
				<signature="static func transcode(: Self.EncodedScalar, from: Meta ) -> CollectionOfOne(Swift.UInt8)?">
				<isStatic="True">
				<returnType="Swift.Optional<Swift.CollectionOfOne<Swift.UInt8>>">
				<Parameters>
					<Parameter=": Self.EncodedScalar">
					<Parameter="from: Meta ">
				</Parameters>
			</Method>
		</Enum>
		<Enum name="Swift.Unicode.GeneralCategory">
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Method>
				<name="==">
				<signature="static func ==(Swift.Unicode.GeneralCategory, Swift.Unicode.GeneralCategory) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.Unicode.GeneralCategory">
					<Parameter="Swift.Unicode.GeneralCategory">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Enum>
		<Enum name="Swift.Unicode.NumericType">
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Method>
				<name="==">
				<signature="static func ==(Swift.Unicode.NumericType, Swift.Unicode.NumericType) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.Unicode.NumericType">
					<Parameter="Swift.Unicode.NumericType">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Enum>
		<Enum name="Swift.Unicode.ParseResult">
		</Enum>
		<Enum name="Swift.Unicode.UTF16">
			<Method>
				<name="decode">
				<signature="func decodeSelf -> Swift.UnicodeDecodingResult">
				<isStatic="False">
				<returnType="Swift.UnicodeDecodingResult">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="encode">
				<signature="static func encode(: Swift.Unicode.Scalar, into: Swift.UInt16)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter=": Swift.Unicode.Scalar">
					<Parameter="into: Swift.UInt16">
				</Parameters>
			</Method>
			<Method>
				<name="isLeadSurrogate">
				<signature="static func isLeadSurrogateSwift.UInt16 -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="isTrailSurrogate">
				<signature="static func isTrailSurrogateSwift.UInt16 -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="leadSurrogate">
				<signature="static func leadSurrogateSwift.Unicode.Scalar -> Swift.UInt16">
				<isStatic="True">
				<returnType="Swift.UInt16">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="trailSurrogate">
				<signature="static func trailSurrogateSwift.Unicode.Scalar -> Swift.UInt16">
				<isStatic="True">
				<returnType="Swift.UInt16">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="transcodedLength">
				<signature="static func transcodedLength(of: Self, decodedAs: Meta , repairingIllFormedSequences: Bool) -> (count: Int, isASCII: Bool)?">
				<isStatic="True">
				<returnType="Swift.Optional<(count: count: Int, isASCII: isASCII: Bool)>">
				<Parameters>
					<Parameter="of: Self">
					<Parameter="decodedAs: Meta ">
					<Parameter="repairingIllFormedSequences: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="width">
				<signature="static func widthSwift.Unicode.Scalar -> Int">
				<isStatic="True">
				<returnType="Int">
				<Parameters>
				</Parameters>
			</Method>
		</Enum>
		<Enum name="Swift.Unicode.UTF32">
			<Property>
				<name="encodedReplacementCharacter">
				<signature="static var encodedReplacementCharacter: Swift.CollectionOfOne(Swift.UInt32)">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Method>
				<name="==">
				<signature="static func ==(Swift.Unicode.UTF32, Swift.Unicode.UTF32) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.Unicode.UTF32">
					<Parameter="Swift.Unicode.UTF32">
				</Parameters>
			</Method>
			<Method>
				<name="decode">
				<signature="func decodeSelf -> Swift.UnicodeDecodingResult">
				<isStatic="False">
				<returnType="Swift.UnicodeDecodingResult">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="decode">
				<signature="static func decodeSwift.CollectionOfOne(Swift.UInt32) -> Swift.Unicode.Scalar">
				<isStatic="True">
				<returnType="Swift.Unicode.Scalar">
				<Parameters>
					<Parameter="Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="encode">
				<signature="static func encode(: Swift.Unicode.Scalar, into: Swift.UInt32)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter=": Swift.Unicode.Scalar">
					<Parameter="into: Swift.UInt32">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Enum>
		<Enum name="Swift.Unicode.UTF8">
			<Method>
				<name="decode">
				<signature="func decodeSelf -> Swift.UnicodeDecodingResult">
				<isStatic="False">
				<returnType="Swift.UnicodeDecodingResult">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="encode">
				<signature="static func encode(: Swift.Unicode.Scalar, into: Swift.UInt8)">
				<isStatic="True">
				<returnType="()">
				<Parameters>
					<Parameter=": Swift.Unicode.Scalar">
					<Parameter="into: Swift.UInt8">
				</Parameters>
			</Method>
			<Method>
				<name="isContinuation">
				<signature="static func isContinuationSwift.UInt8 -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
				</Parameters>
			</Method>
		</Enum>
		<Enum name="Swift.UnicodeDecodingResult">
			<Method>
				<name="==">
				<signature="static func ==(Swift.UnicodeDecodingResult, Swift.UnicodeDecodingResult) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="Swift.UnicodeDecodingResult">
					<Parameter="Swift.UnicodeDecodingResult">
				</Parameters>
			</Method>
		</Enum>
	</Enums>
	<Protocols>
		<Protocol name="Swift.AdditiveArithmetic">
			<Method>
				<name="+">
				<signature="func +(Self, Self) -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="+=">
				<signature="func +=(Self, Self)">
				<isStatic="False">
			</Method>
			<Method>
				<name="-">
				<signature="func -(Self, Self) -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="-=">
				<signature="func -=(Self, Self)">
				<isStatic="False">
			</Method>
			<Method>
				<name="zero">
				<signature="func zero() -> Self">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.BidirectionalCollection">
			<Method>
				<name="distance">
				<signature="func distance(from: Self.Index, to: Self.Index) -> Int">
				<isStatic="False">
			</Method>
			<Method>
				<name="formIndex">
				<signature="func formIndex(before: Self.Index)">
				<isStatic="False">
			</Method>
			<Method>
				<name="index">
				<signature="func index(before: Self.Index) -> Self.Index">
				<isStatic="False">
			</Method>
			<Method>
				<name="index">
				<signature="func index(: Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?">
				<isStatic="False">
			</Method>
			<Method>
				<name="index">
				<signature="func index(: Self.Index, offsetBy: Int) -> Self.Index">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.BinaryFloatingPoint">
			<Method>
				<name="binade">
				<signature="func binade() -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="exponentBitCount">
				<signature="func exponentBitCount() -> Int">
				<isStatic="False">
			</Method>
			<Method>
				<name="exponentBitPattern">
				<signature="func exponentBitPattern() -> Self.RawExponent">
				<isStatic="False">
			</Method>
			<Method>
				<name="significandBitCount">
				<signature="func significandBitCount() -> Int">
				<isStatic="False">
			</Method>
			<Method>
				<name="significandBitPattern">
				<signature="func significandBitPattern() -> Self.RawSignificand">
				<isStatic="False">
			</Method>
			<Method>
				<name="significandWidth">
				<signature="func significandWidth() -> Int">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.BinaryInteger">
			<Method>
				<name="%">
				<signature="func %(Self, Self) -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="%=">
				<signature="func %=(Self, Self)">
				<isStatic="False">
			</Method>
			<Method>
				<name="&">
				<signature="func &(Self, Self) -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="&=">
				<signature="func &=(Self, Self)">
				<isStatic="False">
			</Method>
			<Method>
				<name="/">
				<signature="func /(Self, Self) -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="/=">
				<signature="func /=(Self, Self)">
				<isStatic="False">
			</Method>
			<Method>
				<name="<<">
				<signature="func (((Self, ???) -) Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="<<=">
				<signature="func ((=(Self, ???)">
				<isStatic="False">
			</Method>
			<Method>
				<name=">>">
				<signature="func >>(Self, ???) -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name=">>=">
				<signature="func >>=(Self, ???)">
				<isStatic="False">
			</Method>
			<Method>
				<name="^">
				<signature="func ^(Self, Self) -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="^=">
				<signature="func ^=(Self, Self)">
				<isStatic="False">
			</Method>
			<Method>
				<name="bitWidth">
				<signature="func bitWidth() -> Int">
				<isStatic="False">
			</Method>
			<Method>
				<name="isMultiple">
				<signature="func isMultiple(of: Self) -> Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name="isSigned">
				<signature="func isSigned() -> Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name="quotientAndRemainder">
				<signature="func quotientAndRemainder(dividingBy: Self) -> (quotient: Self, remainder: Self)">
				<isStatic="False">
			</Method>
			<Method>
				<name="signum">
				<signature="func signum() -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="trailingZeroBitCount">
				<signature="func trailingZeroBitCount() -> Int">
				<isStatic="False">
			</Method>
			<Method>
				<name="words">
				<signature="func words() -> Self.Words">
				<isStatic="False">
			</Method>
			<Method>
				<name="|">
				<signature="func |(Self, Self) -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="|=">
				<signature="func |=(Self, Self)">
				<isStatic="False">
			</Method>
			<Method>
				<name="~">
				<signature="func ~Self -> Self">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.CVarArg">
		</Protocol>
		<Protocol name="Swift.CaseIterable">
			<Method>
				<name="allCases">
				<signature="func allCases() -> Self.AllCases">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.CodingKey">
			<Method>
				<name="intValue">
				<signature="func intValue() -> Int?">
				<isStatic="False">
			</Method>
			<Method>
				<name="stringValue">
				<signature="func stringValue() -> Swift.String">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.Collection">
			<Method>
				<name="count">
				<signature="func count() -> Int">
				<isStatic="False">
			</Method>
			<Method>
				<name="distance">
				<signature="func distance(from: Self.Index, to: Self.Index) -> Int">
				<isStatic="False">
			</Method>
			<Method>
				<name="endIndex">
				<signature="func endIndex() -> Self.Index">
				<isStatic="False">
			</Method>
			<Method>
				<name="formIndex">
				<signature="func formIndex(after: Self.Index)">
				<isStatic="False">
			</Method>
			<Method>
				<name="index">
				<signature="func index(: Self.Index, offsetBy: Int) -> Self.Index">
				<isStatic="False">
			</Method>
			<Method>
				<name="index">
				<signature="func index(: Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?">
				<isStatic="False">
			</Method>
			<Method>
				<name="index">
				<signature="func index(after: Self.Index) -> Self.Index">
				<isStatic="False">
			</Method>
			<Method>
				<name="index">
				<signature="func index(: Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?">
				<isStatic="False">
			</Method>
			<Method>
				<name="indices">
				<signature="func indices() -> Self.Indices">
				<isStatic="False">
			</Method>
			<Method>
				<name="isEmpty">
				<signature="func isEmpty() -> Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name="startIndex">
				<signature="func startIndex() -> Self.Index">
				<isStatic="False">
			</Method>
			<Method>
				<name="subscript">
				<signature="func subscriptSwift.Range(Self.Index) -> Self.SubSequence">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.Comparable">
			<Method>
				<name="<">
				<signature="func ((Self, Self) -) Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name="<=">
				<signature="func (=(Self, Self) -) Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name=">">
				<signature="func >(Self, Self) -> Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name=">=">
				<signature="func >=(Self, Self) -> Bool">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.CustomDebugStringConvertible">
			<Method>
				<name="debugDescription">
				<signature="func debugDescription() -> Swift.String">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.CustomLeafReflectable">
		</Protocol>
		<Protocol name="Swift.CustomPlaygroundDisplayConvertible">
			<Method>
				<name="playgroundDescription">
				<signature="func playgroundDescription() -> Swift.Any">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.CustomReflectable">
			<Method>
				<name="customMirror">
				<signature="func customMirror() -> Swift.Mirror">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.CustomStringConvertible">
			<Method>
				<name="description">
				<signature="func description() -> Swift.String">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.Decodable">
		</Protocol>
		<Protocol name="Swift.Decoder">
			<Method>
				<name="codingPath">
				<signature="func codingPath() -> Swift.Array(Swift.CodingKey)">
				<isStatic="False">
			</Method>
			<Method>
				<name="container">
				<signature="func container(keyedBy: Meta ) -> Swift.KeyedDecodingContainer(???)">
				<isStatic="False">
			</Method>
			<Method>
				<name="singleValueContainer">
				<signature="func singleValueContainer() -> Swift.SingleValueDecodingContainer">
				<isStatic="False">
			</Method>
			<Method>
				<name="unkeyedContainer">
				<signature="func unkeyedContainer() -> Swift.UnkeyedDecodingContainer">
				<isStatic="False">
			</Method>
			<Method>
				<name="userInfo">
				<signature="func userInfo() -> Swift.Dictionary(Swift.CodingUserInfoKey, Swift.Any)">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.Encodable">
			<Method>
				<name="encode">
				<signature="func encode(to: Swift.Encoder)">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.Encoder">
			<Method>
				<name="codingPath">
				<signature="func codingPath() -> Swift.Array(Swift.CodingKey)">
				<isStatic="False">
			</Method>
			<Method>
				<name="container">
				<signature="func container(keyedBy: Meta ) -> Swift.KeyedEncodingContainer(???)">
				<isStatic="False">
			</Method>
			<Method>
				<name="singleValueContainer">
				<signature="func singleValueContainer() -> Swift.SingleValueEncodingContainer">
				<isStatic="False">
			</Method>
			<Method>
				<name="unkeyedContainer">
				<signature="func unkeyedContainer() -> Swift.UnkeyedEncodingContainer">
				<isStatic="False">
			</Method>
			<Method>
				<name="userInfo">
				<signature="func userInfo() -> Swift.Dictionary(Swift.CodingUserInfoKey, Swift.Any)">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.Equatable">
			<Method>
				<name="==">
				<signature="func ==(Self, Self) -> Bool">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.Error">
		</Protocol>
		<Protocol name="Swift.ExpressibleByArrayLiteral">
		</Protocol>
		<Protocol name="Swift.ExpressibleByBooleanLiteral">
		</Protocol>
		<Protocol name="Swift.ExpressibleByDictionaryLiteral">
		</Protocol>
		<Protocol name="Swift.ExpressibleByExtendedGraphemeClusterLiteral">
		</Protocol>
		<Protocol name="Swift.ExpressibleByFloatLiteral">
		</Protocol>
		<Protocol name="Swift.ExpressibleByIntegerLiteral">
		</Protocol>
		<Protocol name="Swift.ExpressibleByNilLiteral">
		</Protocol>
		<Protocol name="Swift.ExpressibleByStringInterpolation">
		</Protocol>
		<Protocol name="Swift.ExpressibleByStringLiteral">
		</Protocol>
		<Protocol name="Swift.ExpressibleByUnicodeScalarLiteral">
		</Protocol>
		<Protocol name="Swift.FixedWidthInteger">
			<Method>
				<name="&<<">
				<signature="func &(((Self, Self) -) Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="&<<=">
				<signature="func &((=(Self, Self)">
				<isStatic="False">
			</Method>
			<Method>
				<name="&>>">
				<signature="func &>>(Self, Self) -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="&>>=">
				<signature="func &>>=(Self, Self)">
				<isStatic="False">
			</Method>
			<Method>
				<name="addingReportingOverflow">
				<signature="func addingReportingOverflowSelf -> (partialValue: Self, overflow: Bool)">
				<isStatic="False">
			</Method>
			<Method>
				<name="bigEndian">
				<signature="func bigEndian() -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="bitWidth">
				<signature="func bitWidth() -> Int">
				<isStatic="False">
			</Method>
			<Method>
				<name="byteSwapped">
				<signature="func byteSwapped() -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="dividedReportingOverflow">
				<signature="func dividedReportingOverflow(by: Self) -> (partialValue: Self, overflow: Bool)">
				<isStatic="False">
			</Method>
			<Method>
				<name="dividingFullWidth">
				<signature="func dividingFullWidth((high: Self, low: Self.Magnitude)) -> (quotient: Self, remainder: Self)">
				<isStatic="False">
			</Method>
			<Method>
				<name="leadingZeroBitCount">
				<signature="func leadingZeroBitCount() -> Int">
				<isStatic="False">
			</Method>
			<Method>
				<name="littleEndian">
				<signature="func littleEndian() -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="max">
				<signature="func max() -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="min">
				<signature="func min() -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="multipliedFullWidth">
				<signature="func multipliedFullWidth(by: Self) -> (high: Self, low: Self.Magnitude)">
				<isStatic="False">
			</Method>
			<Method>
				<name="multipliedReportingOverflow">
				<signature="func multipliedReportingOverflow(by: Self) -> (partialValue: Self, overflow: Bool)">
				<isStatic="False">
			</Method>
			<Method>
				<name="nonzeroBitCount">
				<signature="func nonzeroBitCount() -> Int">
				<isStatic="False">
			</Method>
			<Method>
				<name="remainderReportingOverflow">
				<signature="func remainderReportingOverflow(dividingBy: Self) -> (partialValue: Self, overflow: Bool)">
				<isStatic="False">
			</Method>
			<Method>
				<name="subtractingReportingOverflow">
				<signature="func subtractingReportingOverflowSelf -> (partialValue: Self, overflow: Bool)">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.FloatingPoint">
			<Method>
				<name="/">
				<signature="func /(Self, Self) -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="/=">
				<signature="func /=(Self, Self)">
				<isStatic="False">
			</Method>
			<Method>
				<name="addProduct">
				<signature="func addProduct(Self, Self)">
				<isStatic="False">
			</Method>
			<Method>
				<name="addingProduct">
				<signature="func addingProduct(Self, Self) -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="exponent">
				<signature="func exponent() -> Self.Exponent">
				<isStatic="False">
			</Method>
			<Method>
				<name="floatingPointClass">
				<signature="func floatingPointClass() -> Swift.FloatingPointClassification">
				<isStatic="False">
			</Method>
			<Method>
				<name="formRemainder">
				<signature="func formRemainder(dividingBy: Self)">
				<isStatic="False">
			</Method>
			<Method>
				<name="formSquareRoot">
				<signature="func formSquareRoot()">
				<isStatic="False">
			</Method>
			<Method>
				<name="formTruncatingRemainder">
				<signature="func formTruncatingRemainder(dividingBy: Self)">
				<isStatic="False">
			</Method>
			<Method>
				<name="greatestFiniteMagnitude">
				<signature="func greatestFiniteMagnitude() -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="infinity">
				<signature="func infinity() -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="isCanonical">
				<signature="func isCanonical() -> Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name="isEqual">
				<signature="func isEqual(to: Self) -> Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name="isFinite">
				<signature="func isFinite() -> Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name="isInfinite">
				<signature="func isInfinite() -> Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name="isLess">
				<signature="func isLess(than: Self) -> Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name="isLessThanOrEqualTo">
				<signature="func isLessThanOrEqualToSelf -> Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name="isNaN">
				<signature="func isNaN() -> Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name="isNormal">
				<signature="func isNormal() -> Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name="isSignalingNaN">
				<signature="func isSignalingNaN() -> Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name="isSubnormal">
				<signature="func isSubnormal() -> Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name="isTotallyOrdered">
				<signature="func isTotallyOrdered(belowOrEqualTo: Self) -> Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name="isZero">
				<signature="func isZero() -> Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name="leastNonzeroMagnitude">
				<signature="func leastNonzeroMagnitude() -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="leastNormalMagnitude">
				<signature="func leastNormalMagnitude() -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="maximum">
				<signature="func maximum(Self, Self) -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="maximumMagnitude">
				<signature="func maximumMagnitude(Self, Self) -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="minimum">
				<signature="func minimum(Self, Self) -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="minimumMagnitude">
				<signature="func minimumMagnitude(Self, Self) -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="nan">
				<signature="func nan() -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="nextDown">
				<signature="func nextDown() -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="nextUp">
				<signature="func nextUp() -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="pi">
				<signature="func pi() -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="radix">
				<signature="func radix() -> Int">
				<isStatic="False">
			</Method>
			<Method>
				<name="remainder">
				<signature="func remainder(dividingBy: Self) -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="round">
				<signature="func roundSwift.FloatingPointRoundingRule">
				<isStatic="False">
			</Method>
			<Method>
				<name="rounded">
				<signature="func roundedSwift.FloatingPointRoundingRule -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="sign">
				<signature="func sign() -> Swift.FloatingPointSign">
				<isStatic="False">
			</Method>
			<Method>
				<name="signalingNaN">
				<signature="func signalingNaN() -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="significand">
				<signature="func significand() -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="squareRoot">
				<signature="func squareRoot() -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="truncatingRemainder">
				<signature="func truncatingRemainder(dividingBy: Self) -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="ulp">
				<signature="func ulp() -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="ulpOfOne">
				<signature="func ulpOfOne() -> Self">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.Hashable">
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
			</Method>
			<Method>
				<name="hashValue">
				<signature="func hashValue() -> Int">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.Identifiable">
			<Method>
				<name="id">
				<signature="func id() -> Self.ID">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.IteratorProtocol">
			<Method>
				<name="next">
				<signature="func next() -> Self.Element?">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.KeyedDecodingContainerProtocol">
			<Method>
				<name="allKeys">
				<signature="func allKeys() -> Swift.Array(Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="codingPath">
				<signature="func codingPath() -> Swift.Array(Swift.CodingKey)">
				<isStatic="False">
			</Method>
			<Method>
				<name="contains">
				<signature="func containsSelf.Key -> Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decode(: Meta Swift.UInt16, forKey: Self.Key) -> Swift.UInt16">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decode(: Meta Swift.String, forKey: Self.Key) -> Swift.String">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decode(: Meta Swift.UInt16, forKey: Self.Key) -> Swift.UInt16">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decode(: Meta , forKey: Self.Key) -> ???">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decode(: Meta Swift.Int8, forKey: Self.Key) -> Swift.Int8">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decode(: Meta Swift.Int16, forKey: Self.Key) -> Swift.Int16">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decode(: Meta Swift.Int64, forKey: Self.Key) -> Swift.Int64">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decode(: Meta Swift.Int32, forKey: Self.Key) -> Swift.Int32">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decode(: Meta Swift.Int64, forKey: Self.Key) -> Swift.Int64">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decode(: Meta Swift.UInt8, forKey: Self.Key) -> Swift.UInt8">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decode(: Meta Swift.UInt32, forKey: Self.Key) -> Swift.UInt32">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decode(: Meta Swift.UInt64, forKey: Self.Key) -> Swift.UInt64">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decode(: Meta Swift.Int32, forKey: Self.Key) -> Swift.Int32">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decode(: Meta Swift.UInt32, forKey: Self.Key) -> Swift.UInt32">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresent(: Meta Swift.UInt64, forKey: Self.Key) -> UInt64?">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresent(: Meta Swift.UInt8, forKey: Self.Key) -> UInt8?">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresent(: Meta Swift.UInt16, forKey: Self.Key) -> UInt16?">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresent(: Meta Swift.String, forKey: Self.Key) -> String?">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresent(: Meta , forKey: Self.Key) -> ????">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresent(: Meta Swift.Int8, forKey: Self.Key) -> Int8?">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresent(: Meta Swift.UInt32, forKey: Self.Key) -> UInt32?">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresent(: Meta Swift.Int16, forKey: Self.Key) -> Int16?">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresent(: Meta Swift.Int32, forKey: Self.Key) -> Int32?">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresent(: Meta Swift.Int64, forKey: Self.Key) -> Int64?">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresent(: Meta Swift.UInt8, forKey: Self.Key) -> UInt8?">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresent(: Meta Swift.UInt16, forKey: Self.Key) -> UInt16?">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresent(: Meta Swift.Int16, forKey: Self.Key) -> Int16?">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresent(: Meta Swift.UInt32, forKey: Self.Key) -> UInt32?">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeNil">
				<signature="func decodeNil(forKey: Self.Key) -> Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name="nestedContainer">
				<signature="func nestedContainer(keyedBy: Meta , forKey: Self.Key) -> Swift.KeyedDecodingContainer(???)">
				<isStatic="False">
			</Method>
			<Method>
				<name="nestedUnkeyedContainer">
				<signature="func nestedUnkeyedContainer(forKey: Self.Key) -> Swift.UnkeyedDecodingContainer">
				<isStatic="False">
			</Method>
			<Method>
				<name="superDecoder">
				<signature="func superDecoder() -> Swift.Decoder">
				<isStatic="False">
			</Method>
			<Method>
				<name="superDecoder">
				<signature="func superDecoder(forKey: Self.Key) -> Swift.Decoder">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.KeyedEncodingContainerProtocol">
			<Method>
				<name="codingPath">
				<signature="func codingPath() -> Swift.Array(Swift.CodingKey)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(: Swift.Int64, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(: Swift.String, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(: Bool, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(: Double, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(: Float, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(: Int, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(: UInt, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(: ???, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(: UInt, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(: Swift.Int8, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(: Swift.UInt64, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(: Swift.UInt32, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(: ???, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(: Swift.UInt16, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(: Swift.Int32, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(: Swift.Int16, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(: Swift.Int8, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(: Swift.UInt8, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encodeConditional">
				<signature="func encodeConditional(: ???, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encodeIfPresent">
				<signature="func encodeIfPresent(: UInt32?, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encodeIfPresent">
				<signature="func encodeIfPresent(: UInt64?, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encodeIfPresent">
				<signature="func encodeIfPresent(: Int64?, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encodeIfPresent">
				<signature="func encodeIfPresent(: UInt16?, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encodeIfPresent">
				<signature="func encodeIfPresent(: String?, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encodeIfPresent">
				<signature="func encodeIfPresent(: Bool?, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encodeIfPresent">
				<signature="func encodeIfPresent(: Double?, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encodeIfPresent">
				<signature="func encodeIfPresent(: Float?, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encodeIfPresent">
				<signature="func encodeIfPresent(: Int?, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encodeIfPresent">
				<signature="func encodeIfPresent(: UInt?, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encodeIfPresent">
				<signature="func encodeIfPresent(: ????, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encodeIfPresent">
				<signature="func encodeIfPresent(: Int8?, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encodeIfPresent">
				<signature="func encodeIfPresent(: Int16?, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encodeIfPresent">
				<signature="func encodeIfPresent(: Int32?, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encodeIfPresent">
				<signature="func encodeIfPresent(: Int64?, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encodeIfPresent">
				<signature="func encodeIfPresent(: UInt8?, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encodeIfPresent">
				<signature="func encodeIfPresent(: UInt16?, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encodeIfPresent">
				<signature="func encodeIfPresent(: UInt32?, forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encodeNil">
				<signature="func encodeNil(forKey: Self.Key)">
				<isStatic="False">
			</Method>
			<Method>
				<name="nestedContainer">
				<signature="func nestedContainer(keyedBy: Meta , forKey: Self.Key) -> Swift.KeyedEncodingContainer(???)">
				<isStatic="False">
			</Method>
			<Method>
				<name="nestedUnkeyedContainer">
				<signature="func nestedUnkeyedContainer(forKey: Self.Key) -> Swift.UnkeyedEncodingContainer">
				<isStatic="False">
			</Method>
			<Method>
				<name="superEncoder">
				<signature="func superEncoder() -> Swift.Encoder">
				<isStatic="False">
			</Method>
			<Method>
				<name="superEncoder">
				<signature="func superEncoder(forKey: Self.Key) -> Swift.Encoder">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.LazyCollectionProtocol">
		</Protocol>
		<Protocol name="Swift.LazySequenceProtocol">
			<Method>
				<name="elements">
				<signature="func elements() -> Self.Elements">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.LosslessStringConvertible">
		</Protocol>
		<Protocol name="Swift.MirrorPath">
		</Protocol>
		<Protocol name="Swift.MutableCollection">
			<Method>
				<name="partition">
				<signature="func partition(by: Self.Element -> Bool) -> Self.Index">
				<isStatic="False">
			</Method>
			<Method>
				<name="subscript">
				<signature="func subscriptSwift.Range(Self.Index) -> Self.SubSequence">
				<isStatic="False">
			</Method>
			<Method>
				<name="subscript">
				<signature="func subscript(Self.SubSequence, a: Swift.Range(Self.Index))">
				<isStatic="False">
			</Method>
			<Method>
				<name="subscript">
				<signature="func subscriptSelf.Index -> Self.Element">
				<isStatic="False">
			</Method>
			<Method>
				<name="subscript">
				<signature="func subscript(Self.Element, a: Self.Index)">
				<isStatic="False">
			</Method>
			<Method>
				<name="swapAt">
				<signature="func swapAt(Self.Index, Self.Index)">
				<isStatic="False">
			</Method>
			<Method>
				<name="withContiguousMutableStorageIfAvailable">
				<signature="func withContiguousMutableStorageIfAvailableSwift.UnsafeMutableBufferPointer(Self.Element) -> ??? -> ????">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.Numeric">
			<Method>
				<name="*">
				<signature="func *(Self, Self) -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="*=">
				<signature="func *=(Self, Self)">
				<isStatic="False">
			</Method>
			<Method>
				<name="magnitude">
				<signature="func magnitude() -> Self.Magnitude">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.OptionSet">
		</Protocol>
		<Protocol name="Swift.RandomAccessCollection">
			<Method>
				<name="distance">
				<signature="func distance(from: Self.Index, to: Self.Index) -> Int">
				<isStatic="False">
			</Method>
			<Method>
				<name="index">
				<signature="func index(: Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?">
				<isStatic="False">
			</Method>
			<Method>
				<name="index">
				<signature="func index(: Self.Index, offsetBy: Int) -> Self.Index">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.RandomNumberGenerator">
			<Method>
				<name="next">
				<signature="func next() -> Swift.UInt64">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.RangeExpression">
			<Method>
				<name="contains">
				<signature="func containsSelf.Bound -> Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name="relative">
				<signature="func relative(to: ???) -> Swift.Range(Self.Bound)">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.RangeReplaceableCollection">
			<Method>
				<name="remove">
				<signature="func remove(at: Self.Index) -> Self.Element">
				<isStatic="False">
			</Method>
			<Method>
				<name="removeAll">
				<signature="func removeAll(keepingCapacity: Bool)">
				<isStatic="False">
			</Method>
			<Method>
				<name="removeAll">
				<signature="func removeAll(where: Self.Element -> Bool)">
				<isStatic="False">
			</Method>
			<Method>
				<name="removeFirst">
				<signature="func removeFirst() -> Self.Element">
				<isStatic="False">
			</Method>
			<Method>
				<name="removeFirst">
				<signature="func removeFirstInt">
				<isStatic="False">
			</Method>
			<Method>
				<name="removeSubrange">
				<signature="func removeSubrangeSwift.Range(Self.Index)">
				<isStatic="False">
			</Method>
			<Method>
				<name="reserveCapacity">
				<signature="func reserveCapacityInt">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.RawRepresentable">
			<Method>
				<name="rawValue">
				<signature="func rawValue() -> Self.RawValue">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.SIMD">
		</Protocol>
		<Protocol name="Swift.SIMDScalar">
		</Protocol>
		<Protocol name="Swift.SIMDStorage">
			<Method>
				<name="scalarCount">
				<signature="func scalarCount() -> Int">
				<isStatic="False">
			</Method>
			<Method>
				<name="subscript">
				<signature="func subscriptInt -> Self.Scalar">
				<isStatic="False">
			</Method>
			<Method>
				<name="subscript">
				<signature="func subscript(Self.Scalar, a: Int)">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.Sequence">
			<Method>
				<name="makeIterator">
				<signature="func makeIterator() -> Self.Iterator">
				<isStatic="False">
			</Method>
			<Method>
				<name="underestimatedCount">
				<signature="func underestimatedCount() -> Int">
				<isStatic="False">
			</Method>
			<Method>
				<name="withContiguousStorageIfAvailable">
				<signature="func withContiguousStorageIfAvailableSwift.UnsafeBufferPointer(Self.Element) -> ??? -> ????">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.SetAlgebra">
			<Method>
				<name="contains">
				<signature="func containsSelf.Element -> Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name="formIntersection">
				<signature="func formIntersectionSelf">
				<isStatic="False">
			</Method>
			<Method>
				<name="intersection">
				<signature="func intersectionSelf -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="isDisjoint">
				<signature="func isDisjoint(with: Self) -> Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name="isEmpty">
				<signature="func isEmpty() -> Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name="isSubset">
				<signature="func isSubset(of: Self) -> Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name="isSuperset">
				<signature="func isSuperset(of: Self) -> Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name="remove">
				<signature="func removeSelf.Element -> Self.Element?">
				<isStatic="False">
			</Method>
			<Method>
				<name="subtract">
				<signature="func subtractSelf">
				<isStatic="False">
			</Method>
			<Method>
				<name="subtracting">
				<signature="func subtractingSelf -> Self">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.SignedInteger">
		</Protocol>
		<Protocol name="Swift.SignedNumeric">
			<Method>
				<name="-">
				<signature="func -Self -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="negate">
				<signature="func negate()">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.SingleValueDecodingContainer">
			<Method>
				<name="codingPath">
				<signature="func codingPath() -> Swift.Array(Swift.CodingKey)">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decodeMeta Swift.UInt64 -> Swift.UInt64">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decodeMeta Swift.UInt32 -> Swift.UInt32">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decodeMeta Swift.UInt16 -> Swift.UInt16">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decodeMeta Swift.UInt8 -> Swift.UInt8">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decodeMeta Swift.Int64 -> Swift.Int64">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decodeMeta Swift.Int32 -> Swift.Int32">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decodeMeta Swift.Int16 -> Swift.Int16">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decodeMeta Swift.Int8 -> Swift.Int8">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decodeMeta  -> ???">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decodeMeta Swift.String -> Swift.String">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeNil">
				<signature="func decodeNil() -> Bool">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.SingleValueEncodingContainer">
			<Method>
				<name="codingPath">
				<signature="func codingPath() -> Swift.Array(Swift.CodingKey)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeSwift.Int16">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeSwift.Int32">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeSwift.Int64">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeSwift.UInt8">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeSwift.UInt16">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeSwift.UInt32">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeSwift.UInt64">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeSwift.Int16">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeSwift.Int8">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encode???">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeUInt">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeInt">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeFloat">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeDouble">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeBool">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeSwift.String">
				<isStatic="False">
			</Method>
			<Method>
				<name="encodeNil">
				<signature="func encodeNil()">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.Strideable">
			<Method>
				<name="advanced">
				<signature="func advanced(by: Self.Stride) -> Self">
				<isStatic="False">
			</Method>
			<Method>
				<name="distance">
				<signature="func distance(to: Self) -> Self.Stride">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.StringInterpolationProtocol">
			<Method>
				<name="appendLiteral">
				<signature="func appendLiteralSelf.StringLiteralType">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.StringProtocol">
			<Method>
				<name="hasPrefix">
				<signature="func hasPrefixSwift.String -> Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name="hasSuffix">
				<signature="func hasSuffixSwift.String -> Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name="lowercased">
				<signature="func lowercased() -> Swift.String">
				<isStatic="False">
			</Method>
			<Method>
				<name="unicodeScalars">
				<signature="func unicodeScalars() -> Self.UnicodeScalarView">
				<isStatic="False">
			</Method>
			<Method>
				<name="uppercased">
				<signature="func uppercased() -> Swift.String">
				<isStatic="False">
			</Method>
			<Method>
				<name="utf16">
				<signature="func utf16() -> Self.UTF16View">
				<isStatic="False">
			</Method>
			<Method>
				<name="utf8">
				<signature="func utf8() -> Self.UTF8View">
				<isStatic="False">
			</Method>
			<Method>
				<name="withCString">
				<signature="func withCString(encodedAs: Meta , : Swift.UnsafePointer(???B1.CodeUnit) -> ???) -> ???">
				<isStatic="False">
			</Method>
			<Method>
				<name="withCString">
				<signature="func withCStringSwift.UnsafePointer(Swift.Int8) -> ??? -> ???">
				<isStatic="False">
			</Method>
			<Method>
				<name="withCString">
				<signature="func withCString(encodedAs: Meta , : Swift.UnsafePointer(???B1.CodeUnit) -> ???) -> ???">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.TextOutputStream">
			<Method>
				<name="write">
				<signature="func writeSwift.String">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.TextOutputStreamable">
			<Method>
				<name="write">
				<signature="func write(to: ???)">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.UnicodeCodec">
			<Method>
				<name="decode">
				<signature="func decode??? -> Swift.UnicodeDecodingResult">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(: Swift.Unicode.Scalar, into: Self.CodeUnit)">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.UnkeyedDecodingContainer">
			<Method>
				<name="codingPath">
				<signature="func codingPath() -> Swift.Array(Swift.CodingKey)">
				<isStatic="False">
			</Method>
			<Method>
				<name="count">
				<signature="func count() -> Int?">
				<isStatic="False">
			</Method>
			<Method>
				<name="currentIndex">
				<signature="func currentIndex() -> Int">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decodeMeta Swift.UInt8 -> Swift.UInt8">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decodeMeta Swift.String -> Swift.String">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decodeMeta  -> ???">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decodeMeta Swift.Int8 -> Swift.Int8">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decodeMeta Swift.Int16 -> Swift.Int16">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decodeMeta Swift.Int32 -> Swift.Int32">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decodeMeta Swift.Int64 -> Swift.Int64">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decodeMeta Swift.UInt16 -> Swift.UInt16">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decodeMeta Swift.UInt32 -> Swift.UInt32">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decodeMeta Swift.UInt64 -> Swift.UInt64">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decodeMeta Swift.Int16 -> Swift.Int16">
				<isStatic="False">
			</Method>
			<Method>
				<name="decode">
				<signature="func decodeMeta Swift.UInt16 -> Swift.UInt16">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresentMeta Swift.UInt64 -> UInt64?">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresentMeta Swift.UInt8 -> UInt8?">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresentMeta Swift.UInt16 -> UInt16?">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresentMeta Swift.String -> String?">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresentMeta  -> ????">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresentMeta Swift.Int8 -> Int8?">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresentMeta Swift.UInt32 -> UInt32?">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresentMeta Swift.Int16 -> Int16?">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresentMeta Swift.Int32 -> Int32?">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresentMeta Swift.Int64 -> Int64?">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresentMeta Swift.UInt8 -> UInt8?">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresentMeta Swift.UInt16 -> UInt16?">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresentMeta Swift.Int16 -> Int16?">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeIfPresent">
				<signature="func decodeIfPresentMeta Swift.UInt32 -> UInt32?">
				<isStatic="False">
			</Method>
			<Method>
				<name="decodeNil">
				<signature="func decodeNil() -> Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name="isAtEnd">
				<signature="func isAtEnd() -> Bool">
				<isStatic="False">
			</Method>
			<Method>
				<name="nestedContainer">
				<signature="func nestedContainer(keyedBy: Meta ) -> Swift.KeyedDecodingContainer(???)">
				<isStatic="False">
			</Method>
			<Method>
				<name="nestedUnkeyedContainer">
				<signature="func nestedUnkeyedContainer() -> Swift.UnkeyedDecodingContainer">
				<isStatic="False">
			</Method>
			<Method>
				<name="superDecoder">
				<signature="func superDecoder() -> Swift.Decoder">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.UnkeyedEncodingContainer">
			<Method>
				<name="codingPath">
				<signature="func codingPath() -> Swift.Array(Swift.CodingKey)">
				<isStatic="False">
			</Method>
			<Method>
				<name="count">
				<signature="func count() -> Int">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(contentsOf: ???)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeDouble">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeBool">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeSwift.String">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeFloat">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(contentsOf: ???)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeSwift.String">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeFloat">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeUInt">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeInt">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeSwift.UInt16">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeUInt">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encode???">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeSwift.Int8">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeSwift.Int16">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeSwift.Int32">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeSwift.Int64">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeInt">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(contentsOf: ???)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeSwift.UInt64">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeSwift.UInt32">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeSwift.UInt16">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(contentsOf: ???)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeSwift.UInt8">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encode(contentsOf: ???)">
				<isStatic="False">
			</Method>
			<Method>
				<name="encode">
				<signature="func encodeSwift.UInt8">
				<isStatic="False">
			</Method>
			<Method>
				<name="encodeConditional">
				<signature="func encodeConditional???">
				<isStatic="False">
			</Method>
			<Method>
				<name="encodeNil">
				<signature="func encodeNil()">
				<isStatic="False">
			</Method>
			<Method>
				<name="nestedContainer">
				<signature="func nestedContainer(keyedBy: Meta ) -> Swift.KeyedEncodingContainer(???)">
				<isStatic="False">
			</Method>
			<Method>
				<name="nestedUnkeyedContainer">
				<signature="func nestedUnkeyedContainer() -> Swift.UnkeyedEncodingContainer">
				<isStatic="False">
			</Method>
			<Method>
				<name="superEncoder">
				<signature="func superEncoder() -> Swift.Encoder">
				<isStatic="False">
			</Method>
		</Protocol>
		<Protocol name="Swift.UnsignedInteger">
		</Protocol>
	</Protocols>
</Module>
