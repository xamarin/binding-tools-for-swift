<manualbinderfinder version="1.011" encoding="UTF - 8">
<Module name="libswiftOSLogTestHelper">
	<Classes>
	</Classes>
	<Structs>
		<Struct name="OSLogTestHelper.OSLogArguments">
			<Property>
				<name="argumentClosures">
				<signature="var argumentClosures: Swift.Array((Swift.UnsafeMutablePointer(Swift.UInt8), Swift.Array(Swift.AnyObject))-)()>">
				<Static="False">
			</Property>
			<Method>
				<name="append">
				<signature="func append() -> Swift.String">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="OSLogTestHelper.OSLogIntegerFormatting">
			<Property>
				<name="decimal">
				<signature="static var decimal: OSLogTestHelper.OSLogIntegerFormatting">
				<Static="False">
			</Property>
			<Property>
				<name="explicitPositiveSign">
				<signature="var explicitPositiveSign: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="hex">
				<signature="static var hex: OSLogTestHelper.OSLogIntegerFormatting">
				<Static="False">
			</Property>
			<Property>
				<name="includePrefix">
				<signature="var includePrefix: Bool">
				<Static="False">
			</Property>
			<Property>
				<name="minDigits">
				<signature="var minDigits: ()->Int?">
				<Static="False">
			</Property>
			<Property>
				<name="octal">
				<signature="static var octal: OSLogTestHelper.OSLogIntegerFormatting">
				<Static="False">
			</Property>
			<Property>
				<name="radix">
				<signature="var radix: Int">
				<Static="False">
			</Property>
			<Property>
				<name="uppercase">
				<signature="var uppercase: Bool">
				<Static="False">
			</Property>
			<Method>
				<name="decimal">
				<signature="static func decimal(explicitPositiveSign: Bool) -> OSLogTestHelper.OSLogIntegerFormatting">
				<isStatic="True">
				<returnType="OSLogTestHelper.OSLogIntegerFormatting">
				<Parameters>
					<Parameter="explicitPositiveSign: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="formatSpecifier">
				<signature="func formatSpecifier(for: Meta , align: OSLogTestHelper.OSLogStringAlignment, privacy: OSLogTestHelper.OSLogPrivacy) -> Swift.String">
				<isStatic="False">
				<returnType="Swift.String">
				<Parameters>
					<Parameter="for: Meta ">
					<Parameter="align: OSLogTestHelper.OSLogStringAlignment">
					<Parameter="privacy: OSLogTestHelper.OSLogPrivacy">
				</Parameters>
			</Method>
			<Method>
				<name="formatSpecifierLengthModifier">
				<signature="static func formatSpecifierLengthModifierMeta  -> String?">
				<isStatic="True">
				<returnType="Swift.Optional<Swift.String>">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="hex">
				<signature="static func hex(explicitPositiveSign: Bool, includePrefix: Bool, uppercase: Bool) -> OSLogTestHelper.OSLogIntegerFormatting">
				<isStatic="True">
				<returnType="OSLogTestHelper.OSLogIntegerFormatting">
				<Parameters>
					<Parameter="explicitPositiveSign: Bool">
					<Parameter="includePrefix: Bool">
					<Parameter="uppercase: Bool">
				</Parameters>
			</Method>
			<Method>
				<name="octal">
				<signature="static func octal(explicitPositiveSign: Bool, includePrefix: Bool, uppercase: Bool) -> OSLogTestHelper.OSLogIntegerFormatting">
				<isStatic="True">
				<returnType="OSLogTestHelper.OSLogIntegerFormatting">
				<Parameters>
					<Parameter="explicitPositiveSign: Bool">
					<Parameter="includePrefix: Bool">
					<Parameter="uppercase: Bool">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="OSLogTestHelper.OSLogInterpolation">
			<Property>
				<name="argumentCount">
				<signature="var argumentCount: Swift.UInt8">
				<Static="False">
			</Property>
			<Property>
				<name="arguments">
				<signature="var arguments: OSLogTestHelper.OSLogArguments">
				<Static="False">
			</Property>
			<Property>
				<name="formatString">
				<signature="var formatString: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="preamble">
				<signature="var preamble: Swift.UInt8">
				<Static="False">
			</Property>
			<Property>
				<name="totalBytesForSerializingArguments">
				<signature="var totalBytesForSerializingArguments: Int">
				<Static="False">
			</Property>
			<Method>
				<name="addDoubleHeaders">
				<signature="func addDoubleHeadersOSLogTestHelper.OSLogPrivacy">
				<isStatic="False">
				<returnType="()">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="addIntHeaders">
				<signature="func addIntHeaders(OSLogTestHelper.OSLogPrivacy, Int)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="OSLogTestHelper.OSLogPrivacy">
					<Parameter="Int">
				</Parameters>
			</Method>
			<Method>
				<name="addNSObjectHeaders">
				<signature="func addNSObjectHeadersOSLogTestHelper.OSLogPrivacy">
				<isStatic="False">
				<returnType="()">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="addStringHeaders">
				<signature="func addStringHeadersOSLogTestHelper.OSLogPrivacy">
				<isStatic="False">
				<returnType="()">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="appendInteger">
				<signature="func appendInteger(: () -> Self, format: OSLogTestHelper.OSLogIntegerFormatting, align: OSLogTestHelper.OSLogStringAlignment, privacy: OSLogTestHelper.OSLogPrivacy)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter=": (">
				</Parameters>
			</Method>
			<Method>
				<name="appendLiteral">
				<signature="func appendLiteralSwift.String">
				<isStatic="False">
				<returnType="()">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="appendPrecisionArgument">
				<signature="func appendPrecisionArgument() -> Int">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="getArgumentHeader">
				<signature="func getArgumentHeader(privacy: OSLogTestHelper.OSLogPrivacy, type: OSLogTestHelper.OSLogInterpolation.ArgumentType) -> Swift.UInt8">
				<isStatic="False">
				<returnType="Swift.UInt8">
				<Parameters>
					<Parameter="privacy: OSLogTestHelper.OSLogPrivacy">
					<Parameter="type: OSLogTestHelper.OSLogInterpolation.ArgumentType">
				</Parameters>
			</Method>
			<Method>
				<name="getArugmentFlag">
				<signature="func getArugmentFlagOSLogTestHelper.OSLogPrivacy -> OSLogTestHelper.OSLogInterpolation.ArgumentFlag">
				<isStatic="False">
				<returnType="OSLogTestHelper.OSLogInterpolation.ArgumentFlag">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="getDoubleFormatSpecifier">
				<signature="func getDoubleFormatSpecifier(privacy: OSLogTestHelper.OSLogPrivacy) -> Swift.String">
				<isStatic="False">
				<returnType="Swift.String">
				<Parameters>
					<Parameter="privacy: OSLogTestHelper.OSLogPrivacy">
				</Parameters>
			</Method>
			<Method>
				<name="getNSObjectFormatSpecifier">
				<signature="func getNSObjectFormatSpecifierOSLogTestHelper.OSLogPrivacy -> Swift.String">
				<isStatic="False">
				<returnType="Swift.String">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="getStringFormatSpecifier">
				<signature="func getStringFormatSpecifier(OSLogTestHelper.OSLogStringAlignment, OSLogTestHelper.OSLogPrivacy) -> Swift.String">
				<isStatic="False">
				<returnType="Swift.String">
				<Parameters>
					<Parameter="OSLogTestHelper.OSLogStringAlignment">
					<Parameter="OSLogTestHelper.OSLogPrivacy">
				</Parameters>
			</Method>
			<Method>
				<name="getUpdatedPreamble">
				<signature="func getUpdatedPreamble(privacy: OSLogTestHelper.OSLogPrivacy, isScalar: Bool) -> Swift.UInt8">
				<isStatic="False">
				<returnType="Swift.UInt8">
				<Parameters>
					<Parameter="privacy: OSLogTestHelper.OSLogPrivacy">
					<Parameter="isScalar: Bool">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="OSLogTestHelper.OSLogMessage">
			<Property>
				<name="bufferSize">
				<signature="var bufferSize: Int">
				<Static="False">
			</Property>
			<Property>
				<name="interpolation">
				<signature="var interpolation: OSLogTestHelper.OSLogInterpolation">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="OSLogTestHelper.OSLogStringAlignment">
			<Property>
				<name="anchor">
				<signature="var anchor: OSLogTestHelper.OSLogCollectionBound">
				<Static="False">
			</Property>
			<Property>
				<name="left">
				<signature="static var left: OSLogTestHelper.OSLogStringAlignment">
				<Static="False">
			</Property>
			<Property>
				<name="minimumColumnWidth">
				<signature="var minimumColumnWidth: ()->Int?">
				<Static="False">
			</Property>
			<Property>
				<name="none">
				<signature="static var none: OSLogTestHelper.OSLogStringAlignment">
				<Static="False">
			</Property>
			<Property>
				<name="right">
				<signature="static var right: OSLogTestHelper.OSLogStringAlignment">
				<Static="False">
			</Property>
		</Struct>
	</Structs>
	<Enums>
		<Enum name="OSLogTestHelper.OSLogCollectionBound">
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Method>
				<name="==">
				<signature="static func ==(OSLogTestHelper.OSLogCollectionBound, OSLogTestHelper.OSLogCollectionBound) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="OSLogTestHelper.OSLogCollectionBound">
					<Parameter="OSLogTestHelper.OSLogCollectionBound">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Enum>
		<Enum name="OSLogTestHelper.OSLogInterpolation.ArgumentFlag">
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="rawValue">
				<signature="var rawValue: Swift.UInt8">
				<Static="False">
			</Property>
			<Method>
				<name="==">
				<signature="static func ==(OSLogTestHelper.OSLogInterpolation.ArgumentFlag, OSLogTestHelper.OSLogInterpolation.ArgumentFlag) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="OSLogTestHelper.OSLogInterpolation.ArgumentFlag">
					<Parameter="OSLogTestHelper.OSLogInterpolation.ArgumentFlag">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Enum>
		<Enum name="OSLogTestHelper.OSLogInterpolation.ArgumentType">
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="rawValue">
				<signature="var rawValue: Swift.UInt8">
				<Static="False">
			</Property>
			<Method>
				<name="==">
				<signature="static func ==(OSLogTestHelper.OSLogInterpolation.ArgumentType, OSLogTestHelper.OSLogInterpolation.ArgumentType) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="OSLogTestHelper.OSLogInterpolation.ArgumentType">
					<Parameter="OSLogTestHelper.OSLogInterpolation.ArgumentType">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Enum>
		<Enum name="OSLogTestHelper.OSLogInterpolation.PreambleBitMask">
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="rawValue">
				<signature="var rawValue: Swift.UInt8">
				<Static="False">
			</Property>
			<Method>
				<name="==">
				<signature="static func ==(OSLogTestHelper.OSLogInterpolation.PreambleBitMask, OSLogTestHelper.OSLogInterpolation.PreambleBitMask) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="OSLogTestHelper.OSLogInterpolation.PreambleBitMask">
					<Parameter="OSLogTestHelper.OSLogInterpolation.PreambleBitMask">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Enum>
		<Enum name="OSLogTestHelper.OSLogPrivacy">
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Method>
				<name="==">
				<signature="static func ==(OSLogTestHelper.OSLogPrivacy, OSLogTestHelper.OSLogPrivacy) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="OSLogTestHelper.OSLogPrivacy">
					<Parameter="OSLogTestHelper.OSLogPrivacy">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Enum>
	</Enums>
	<Protocols>
	</Protocols>
</Module>
