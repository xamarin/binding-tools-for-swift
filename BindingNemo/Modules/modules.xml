<?xml version="1.0" encoding="utf-8"?>
<xamreflect version="1.0">
   <modulelist>
      <!-- swiftVersion not yet found -->
      <Module name="libswiftCore" swiftVersion="??">
         <typedeclaration kind="class" name="Swift.AnyKeyPath" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="rootType" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="valueType" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.AnyKeyPath" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.AnyKeyPath" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="class" name="Swift.AnyObject" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="class" name="Swift.KeyPath" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="class" name="Swift.ManagedBuffer" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="capacity" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="firstElementAddress" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="header" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="headerAddress" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="create" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="True" returnType="Swift.ManagedBuffer(Swift.Self, Swift.ZeroOne)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="minimumCapacity" privateName="minimumCapacity" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="makingHeaderWith" privateName="makingHeaderWith" type="Swift.ManagedBuffer" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withUnsafeMutablePointerToElements" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.ZeroOne" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withUnsafeMutablePointerToHeader" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withUnsafeMutablePointers" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.UnsafeMutablePointer" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.UnsafeMutablePointer" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="class" name="Swift.PartialKeyPath" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="class" name="Swift.ReferenceWritableKeyPath" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="class" name="Swift.WritableKeyPath" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.AnyBidirectionalCollection" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="underestimatedCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="distance" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.AnyIndex" isVariadic="False"/>
                        <parameter publicName="to" privateName="to" type="Swift.AnyIndex" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="drop" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.AnyBidirectionalCollection(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="while" privateName="while" type="Swift.Self -> Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dropFirst" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.AnyBidirectionalCollection(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dropLast" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.AnyBidirectionalCollection(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="filter" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.Array(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="forEach" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="formIndex" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.AnyIndex" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.AnyIndex" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.AnyIndex" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="makeIterator" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.AnyIterator(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="map" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.Array(Swift.OneZero)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.OneZero" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="prefix" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.AnyBidirectionalCollection(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="while" privateName="while" type="Swift.Self -> Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="suffix" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.AnyBidirectionalCollection(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.AnyCollection" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="underestimatedCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="distance" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.AnyIndex" isVariadic="False"/>
                        <parameter publicName="to" privateName="to" type="Swift.AnyIndex" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="drop" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.AnyCollection(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="while" privateName="while" type="Swift.Self -> Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dropFirst" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.AnyCollection(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dropLast" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.AnyCollection(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="filter" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.Array(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="forEach" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="formIndex" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.AnyIndex" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.AnyIndex" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.AnyIndex" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="makeIterator" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.AnyIterator(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="map" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.Array(Swift.OneZero)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.OneZero" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="prefix" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.AnyCollection(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="while" privateName="while" type="Swift.Self -> Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="suffix" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.AnyCollection(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.AnyHashable" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="base" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="description" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.AnyHashable" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.AnyHashable" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.AnyIndex" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="&lt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.AnyIndex" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.AnyIndex" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.AnyIndex" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.AnyIndex" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.AnyIterator" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.AnyRandomAccessCollection" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="underestimatedCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="distance" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.AnyIndex" isVariadic="False"/>
                        <parameter publicName="to" privateName="to" type="Swift.AnyIndex" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="drop" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.AnyRandomAccessCollection(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="while" privateName="while" type="Swift.Self -> Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dropFirst" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.AnyRandomAccessCollection(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dropLast" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.AnyRandomAccessCollection(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="filter" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.Array(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="forEach" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="formIndex" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.AnyIndex" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.AnyIndex" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.AnyIndex" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="makeIterator" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.AnyIterator(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="map" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.Array(Swift.OneZero)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.OneZero" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="prefix" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.AnyRandomAccessCollection(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="while" privateName="while" type="Swift.Self -> Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="suffix" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.AnyRandomAccessCollection(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.AnySequence" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="underestimatedCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="drop" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.AnySequence(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="while" privateName="while" type="Swift.Self -> Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dropFirst" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.AnySequence(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dropLast" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Array(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="filter" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.Array(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="forEach" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="makeIterator" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.AnyIterator(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="map" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.Array(Swift.OneZero)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.OneZero" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="prefix" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.Array(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="while" privateName="while" type="Swift.Self -> Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="suffix" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Array(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Array" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="capacity" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="description" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="+" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Array(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Array" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Array" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Array" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Array" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="distance" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="to" privateName="to" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="formIndex" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="remove" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="at" privateName="at" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="removeAll" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="keepingCapacity" privateName="keepingCapacity" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="reserveCapacity" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="reserveCapacityForAppend" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="newElementsCount" privateName="newElementsCount" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withContiguousMutableStorageIfAvailable" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withContiguousStorageIfAvailable" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withUnsafeBufferPointer" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withUnsafeBytes" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="withUnsafeMutableBufferPointer" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withUnsafeMutableBytes" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.ArraySlice" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="capacity" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="description" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="distance" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="to" privateName="to" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="formIndex" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="remove" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="at" privateName="at" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="removeAll" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="keepingCapacity" privateName="keepingCapacity" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="reserveCapacity" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="reserveCapacityForAppend" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="newElementsCount" privateName="newElementsCount" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withContiguousMutableStorageIfAvailable" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withContiguousStorageIfAvailable" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withUnsafeBufferPointer" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withUnsafeBytes" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="withUnsafeMutableBufferPointer" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withUnsafeMutableBytes" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.AutoreleasingUnsafeMutablePointer" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="pointee" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Bool" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="description" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="!" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Prefix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="&amp;&amp;" isPossiblyIncomplete="False" hasThrows="True" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Bool" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="() -> Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Bool" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Encoder" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="random" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="using" privateName="using" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="toggle" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="||" isPossiblyIncomplete="False" hasThrows="True" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Bool" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="() -> Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.CVaListPointer" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Character" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="asciiValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="description" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hexDigitValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isASCII" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isCased" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isCurrencySymbol" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isHexDigit" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isLetter" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isLowercase" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isMathSymbol" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isNewline" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isNumber" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isPunctuation" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isSymbol" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isUppercase" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isWhitespace" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isWholeNumber" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="unicodeScalars" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="utf16" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="utf8" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="wholeNumberValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="&lt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Character" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Character" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Character" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Character" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="lowercased" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.String" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="uppercased" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.String" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="write" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.ClosedRange" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="description" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isEmpty" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="lowerBound" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="upperBound" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.ClosedRange" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.ClosedRange" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="clamped" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.ClosedRange(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.ClosedRange" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="contains" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="overlaps" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="relative" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Range(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.OneZero" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.CodingUserInfoKey" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="rawValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.CodingUserInfoKey" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.CodingUserInfoKey" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.CollectionDifference" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="inverse" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.CollectionDifference(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.CollectionDifference.Index" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.CollectionOfOne" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.CollectionOfOne.Iterator" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.ContiguousArray" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="capacity" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="description" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="distance" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="to" privateName="to" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="formIndex" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="remove" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="at" privateName="at" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="removeAll" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="keepingCapacity" privateName="keepingCapacity" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="reserveCapacity" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="reserveCapacityForAppend" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="newElementsCount" privateName="newElementsCount" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withContiguousMutableStorageIfAvailable" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withContiguousStorageIfAvailable" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withUnsafeBufferPointer" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withUnsafeBytes" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="withUnsafeMutableBufferPointer" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withUnsafeMutableBytes" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.DecodingError.Context" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="codingPath" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="underlyingError" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.DefaultIndicies" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="indices" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="formIndex" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.Self.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self.Index" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.Self.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.DefaultStringInterpolation" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="description" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="appendInterpolation" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="appendLiteral" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="make" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.String" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="write" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Dictionary" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="capacity" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="description" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isEmpty" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="compactMapValues" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.Dictionary(Swift.Self, Swift.OneZero)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.OneZero" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="filter" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.Dictionary(Swift.Self, Swift.ZeroOne)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="(key" privateName="(key" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="mapValues" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.Dictionary(Swift.Self, Swift.OneZero)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.OneZero" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="popFirst" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(key: Swift.Self, value: Swift.ZeroOne)?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="removeAll" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="keepingCapacity" privateName="keepingCapacity" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="removeValue" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.ZeroOne?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="reserveCapacity" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Dictionary.Index" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Dictionary.Iterator" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(key: Swift.Self, value: Swift.ZeroOne)?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Dictionary.Keys" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="description" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isEmpty" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Dictionary.Keys.Iterator" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Dictionary.Values" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="description" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isEmpty" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Dictionary.Values.Iterator" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.ZeroOne?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Double" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="binade" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="bitPattern" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="description" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="exponent" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="exponentBitCount" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="exponentBitPattern" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="greatestFiniteMagnitude" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="infinity" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isCanonical" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isFinite" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isInfinite" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isNaN" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isNormal" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isSignMinus" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isSignalingNaN" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isSubnormal" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isZero" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="leastNonzeroMagnitude" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="leastNormalMagnitude" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="magnitude" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="nan" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="nextUp" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="pi" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="quietNaN" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="sign" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="signalingNaN" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="significand" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="significandBitCount" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="significandBitPattern" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="significandWidth" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="ulp" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="ulpOfOne" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="*" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Double" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Double" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Double" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="*=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Double" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Double" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Double" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Double" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Double" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Double" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Double" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="-" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Double" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Double" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Double" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="-=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Double" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Double" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Double" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Double" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Double" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Double" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Double" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="addProduct" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Double" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Double" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="advanced" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Double" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Double" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="distance" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Double" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Double" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Encoder" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="formRemainder" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="dividingBy" privateName="dividingBy" type="Double" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="formSquareRoot" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="formTruncatingRemainder" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="dividingBy" privateName="dividingBy" type="Double" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="isEqual" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Double" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="isLess" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="than" privateName="than" type="Double" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="isLessThanOrEqualTo" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="negate" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="round" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="write" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Double.SIMD16Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Double.SIMD2Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Double.SIMD32Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Double.SIMD4Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Double.SIMD64Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Double.SIMD8Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.DropFirstSequence" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="dropFirst" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.DropFirstSequence(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="makeIterator" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self.Iterator" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.DropWhileSequence" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="drop" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.DropWhileSequence(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="while" privateName="while" type="Swift.Self.Element -> Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.DropWhileSequence.Iterator" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self.Element?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.EmptyCollection" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.EmptyCollection" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.EmptyCollection" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="distance" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="to" privateName="to" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.EmptyCollection.Iterator" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.EncodingError.Context" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="codingPath" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="underlyingError" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.EnumeratedSequence" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.EnumeratedSequence.Iterator" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(offset: Swift.Int, element: Swift.Self.Element)?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.FlattenSequence" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.FlattenSequence.Iterator" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self.Element.Element?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Float" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="binade" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="bitPattern" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="description" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="exponent" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="exponentBitCount" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="exponentBitPattern" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="greatestFiniteMagnitude" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="infinity" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isCanonical" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isFinite" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isInfinite" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isNaN" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isNormal" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isSignMinus" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isSignalingNaN" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isSubnormal" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isZero" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="leastNonzeroMagnitude" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="leastNormalMagnitude" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="magnitude" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="nan" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="nextUp" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="pi" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="quietNaN" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="sign" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="signalingNaN" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="significand" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="significandBitCount" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="significandBitPattern" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="significandWidth" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="ulp" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="ulpOfOne" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="*" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Float" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Float" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Float" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="*=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Float" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Float" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Float" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Float" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Float" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Float" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Float" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="-" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Float" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Float" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Float" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="-=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Float" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Float" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Float" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Float" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Float" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Float" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Float" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="addProduct" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Float" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Float" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="advanced" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Float" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Float" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="distance" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Float" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Float" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Encoder" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="formRemainder" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="dividingBy" privateName="dividingBy" type="Float" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="formSquareRoot" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="formTruncatingRemainder" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="dividingBy" privateName="dividingBy" type="Float" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="isEqual" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Float" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="isLess" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="than" privateName="than" type="Float" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="isLessThanOrEqualTo" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="negate" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="round" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="write" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Float.SIMD16Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Float.SIMD2Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Float.SIMD32Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Float.SIMD4Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Float.SIMD64Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Float.SIMD8Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Float16" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="binade" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="bitPattern" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="description" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="exponent" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="exponentBitCount" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="exponentBitPattern" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="greatestFiniteMagnitude" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="infinity" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isCanonical" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isFinite" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isInfinite" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isNaN" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isNormal" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isSignMinus" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isSignalingNaN" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isSubnormal" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isZero" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="leastNonzeroMagnitude" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="leastNormalMagnitude" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="magnitude" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="nan" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="nextUp" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="pi" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="quietNaN" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="sign" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="signalingNaN" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="significand" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="significandBitCount" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="significandBitPattern" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="significandWidth" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="ulp" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="ulpOfOne" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="*" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Float16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Float16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Float16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="*=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Float16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Float16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Float16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Float16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Float16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Float16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Float16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="-" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Float16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Float16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Float16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="-=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Float16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Float16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Float16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Float16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Float16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Float16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Float16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="addProduct" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Float16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Float16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="advanced" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Float16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.Float16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="distance" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Float16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Float16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Encoder" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="formRemainder" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="dividingBy" privateName="dividingBy" type="Swift.Float16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="formSquareRoot" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="formTruncatingRemainder" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="dividingBy" privateName="dividingBy" type="Swift.Float16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="isEqual" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Float16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="isLess" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="than" privateName="than" type="Swift.Float16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="isLessThanOrEqualTo" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="negate" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="round" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="write" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Float16.SIMD16Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Float16.SIMD2Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Float16.SIMD32Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Float16.SIMD4Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Float16.SIMD64Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Float16.SIMD8Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Float80" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Hasher" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="combine" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="bytes" privateName="bytes" type="Swift.UnsafeRawBufferPointer" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="finalize" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.IndexingIterator" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self.Element?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="bitWidth" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="byteSwapped" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="leadingZeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="magnitude" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="nonzeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="trailingZeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="words" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="%" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="%=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&lt;&lt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&lt;&lt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&gt;&gt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&gt;&gt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="*" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="*=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="-" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="-=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&lt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&lt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&gt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&gt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="^" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="^=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="addingReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Int, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="partialValue" privateName="partialValue" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="overflow" privateName="overflow" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="advanced" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="distance" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dividedReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Int, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dividingFullWidth" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(quotient: Swift.Int, remainder: Swift.Int)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="(high" privateName="(high" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Encoder" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="multipliedFullWidth" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(high: Swift.Int, low: USwift.Int)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="multipliedReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Int, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="remainderReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Int, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="dividingBy" privateName="dividingBy" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="signum" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="subtractingReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Int, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="partialValue" privateName="partialValue" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="overflow" privateName="overflow" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="|" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="|=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int.SIMD16Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int.SIMD2Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int.SIMD32Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int.SIMD4Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int.SIMD64Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int.SIMD8Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int.Words" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="indices" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int16" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="bitWidth" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="byteSwapped" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="leadingZeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="magnitude" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="nonzeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="trailingZeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="words" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="%" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="%=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&lt;&lt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&lt;&lt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&gt;&gt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&gt;&gt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="*" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="*=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="-" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="-=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&lt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&lt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&gt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&gt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="^" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="^=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="addingReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Swift.Int16, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="partialValue" privateName="partialValue" type="Swift.Swift.Int16" isVariadic="False"/>
                        <parameter publicName="overflow" privateName="overflow" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dividedReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Swift.Int16, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dividingFullWidth" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(quotient: Swift.Swift.Int16, remainder: Swift.Swift.Int16)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="(high" privateName="(high" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Encoder" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="multipliedFullWidth" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(high: Swift.Swift.Int16, low: Swift.USwift.Int16)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="multipliedReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Swift.Int16, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="remainderReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Swift.Int16, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="dividingBy" privateName="dividingBy" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="signum" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="subtractingReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Swift.Int16, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="partialValue" privateName="partialValue" type="Swift.Swift.Int16" isVariadic="False"/>
                        <parameter publicName="overflow" privateName="overflow" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="|" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="|=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int16.SIMD16Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int16.SIMD2Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int16.SIMD32Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int16.SIMD4Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int16.SIMD64Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int16.SIMD8Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int16.Words" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="indices" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int32" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="bitWidth" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="byteSwapped" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="leadingZeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="magnitude" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="nonzeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="trailingZeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="words" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="%" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int32" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="%=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int32" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&lt;&lt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int32" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&lt;&lt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&gt;&gt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int32" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&gt;&gt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="*" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int32" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="*=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int32" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="-" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int32" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="-=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int32" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&lt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&lt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&gt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&gt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="^" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int32" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="^=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="addingReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Swift.Int32, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="partialValue" privateName="partialValue" type="Swift.Swift.Int32" isVariadic="False"/>
                        <parameter publicName="overflow" privateName="overflow" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dividedReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Swift.Int32, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dividingFullWidth" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(quotient: Swift.Swift.Int32, remainder: Swift.Swift.Int32)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="(high" privateName="(high" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Encoder" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="multipliedFullWidth" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(high: Swift.Swift.Int32, low: Swift.USwift.Int32)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="multipliedReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Swift.Int32, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="remainderReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Swift.Int32, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="dividingBy" privateName="dividingBy" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="signum" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int32" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="subtractingReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Swift.Int32, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="partialValue" privateName="partialValue" type="Swift.Swift.Int32" isVariadic="False"/>
                        <parameter publicName="overflow" privateName="overflow" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="|" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int32" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="|=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int32.SIMD16Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int32.SIMD2Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int32.SIMD32Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int32.SIMD4Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int32.SIMD64Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int32.SIMD8Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int32.Words" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="indices" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int64" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="bitWidth" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="byteSwapped" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="leadingZeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="magnitude" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="nonzeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="trailingZeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="words" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="%" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int64" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="%=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int64" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&lt;&lt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int64" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&lt;&lt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&gt;&gt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int64" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&gt;&gt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="*" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int64" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="*=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int64" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="-" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int64" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="-=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int64" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&lt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&lt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&gt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&gt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="^" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int64" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="^=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="addingReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Swift.Int64, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="partialValue" privateName="partialValue" type="Swift.Swift.Int64" isVariadic="False"/>
                        <parameter publicName="overflow" privateName="overflow" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dividedReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Swift.Int64, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dividingFullWidth" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(quotient: Swift.Swift.Int64, remainder: Swift.Swift.Int64)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="(high" privateName="(high" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Encoder" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="multipliedFullWidth" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(high: Swift.Swift.Int64, low: Swift.USwift.Int64)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="multipliedReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Swift.Int64, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="remainderReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Swift.Int64, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="dividingBy" privateName="dividingBy" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="signum" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int64" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="subtractingReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Swift.Int64, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="partialValue" privateName="partialValue" type="Swift.Swift.Int64" isVariadic="False"/>
                        <parameter publicName="overflow" privateName="overflow" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="|" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int64" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="|=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int64.SIMD16Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int64.SIMD2Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int64.SIMD32Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int64.SIMD4Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int64.SIMD64Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int64.SIMD8Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int64.Words" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="indices" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int8" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="bitWidth" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="byteSwapped" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="leadingZeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="magnitude" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="nonzeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="trailingZeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="words" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="%" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int8" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="%=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int8" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&lt;&lt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int8" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&lt;&lt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&gt;&gt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int8" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&gt;&gt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="*" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int8" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="*=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int8" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="-" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int8" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="-=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int8" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&lt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&lt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&gt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&gt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="^" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int8" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="^=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="addingReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Swift.Int8, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="partialValue" privateName="partialValue" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="overflow" privateName="overflow" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dividedReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Swift.Int8, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dividingFullWidth" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(quotient: Swift.Swift.Int8, remainder: Swift.Swift.Int8)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="(high" privateName="(high" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Encoder" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="multipliedFullWidth" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(high: Swift.Swift.Int8, low: Swift.USwift.Int8)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="multipliedReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Swift.Int8, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="remainderReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Swift.Int8, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="dividingBy" privateName="dividingBy" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="signum" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int8" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="subtractingReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Swift.Int8, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="partialValue" privateName="partialValue" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="overflow" privateName="overflow" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="|" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Swift.Int8" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="|=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int8.SIMD16Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int8.SIMD2Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int8.SIMD32Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int8.SIMD4Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int8.SIMD64Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int8.SIMD8Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Int8.Words" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="indices" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.IteratorSequence" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self.Element?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.JoinedSequence" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.JoinedSequence.Iterator" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self.Element.Element?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.KeyValuePairs" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="description" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.KeyedDecodingContainer" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="allKeys" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="codingPath" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="contains" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decode" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.String" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.String?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decodeNil" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="nestedContainer" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.KeyedDecodingContainer(Swift.OneZero)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="keyedBy" privateName="keyedBy" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="nestedUnkeyedContainer" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.UnkeyedDecodingContainer" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="superDecoder" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.Decoder" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.KeyedEncodingContainer" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="codingPath" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="encode" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.String" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encodeConditional" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.OneZero" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encodeIfPresent" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Optional<Swift.String>" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encodeNil" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="nestedContainer" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.KeyedEncodingContainer(Swift.OneZero)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="keyedBy" privateName="keyedBy" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="nestedUnkeyedContainer" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.UnkeyedEncodingContainer" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="superEncoder" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Encoder" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.LazyDropWhileSequence" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.LazyDropWhileSequence.Iterator" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self.Element?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.LazyFilterSequence" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="filter" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.LazyFilterSequence(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.LazyFilterSequence.Iterator" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="base" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self.Element?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.LazyMapSequence" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="underestimatedCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="map" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.LazyMapSequence(Swift.Self, Swift.OneZero)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.OneZero" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.LazyMapSequence.Iterator" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="base" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.ZeroOne?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.LazyPrefixWhileSequence" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.LazyPrefixWhileSequence.Iterator" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self.Element?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.LazySequence" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="elements" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="underestimatedCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="makeIterator" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self.Iterator" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.ManagedBufferPointer" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="buffer" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="capacity" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="header" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.ManagedBufferPointer" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.ManagedBufferPointer" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="isUniqueReference" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="withUnsafeMutablePointerToElements" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.ZeroOne" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withUnsafeMutablePointerToHeader" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withUnsafeMutablePointers" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.UnsafeMutablePointer" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.UnsafeMutablePointer" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Mirror" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="children" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="description" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="displayStyle" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="subjectType" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="superclassMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="descendant" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Any?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.MirrorPath" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Array" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.ObjectIdentifier" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="&lt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.ObjectIdentifier" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.ObjectIdentifier" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.ObjectIdentifier" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.ObjectIdentifier" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.OpaquePointer" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.OpaquePointer" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.OpaquePointer" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.PartialRangeFrom" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="lowerBound" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="contains" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="relative" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Range(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.OneZero" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.PartialRangeThrough" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="upperBound" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="contains" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="relative" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Range(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.OneZero" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.PartialRangeUpTo" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="upperBound" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="contains" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="relative" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Range(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.OneZero" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.PrefixSequence" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="prefix" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.PrefixSequence(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.PrefixSequence.Iterator" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self.Element?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Range" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="description" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isEmpty" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="lowerBound" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="upperBound" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Range" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Range" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="clamped" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Range(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Range" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="contains" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="overlaps" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="relative" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Range(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.OneZero" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Repeated" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="repeatedValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.ReversedCollection" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="reversed" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.ReversedCollection.Index" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="base" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.ReversedCollection.Iterator" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self.Element?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.SIMD16" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="evenHalf" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="highHalf" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="lowHalf" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="oddHalf" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.SIMD2" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="x" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="y" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.SIMD3" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="x" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="y" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="z" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.SIMD32" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="evenHalf" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="highHalf" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="lowHalf" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="oddHalf" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.SIMD4" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="evenHalf" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="highHalf" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="lowHalf" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="oddHalf" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="w" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="x" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="y" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="z" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.SIMD64" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="evenHalf" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="highHalf" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="lowHalf" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="oddHalf" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.SIMD8" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="evenHalf" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="highHalf" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="lowHalf" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="oddHalf" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.SIMDMask" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="random" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="Swift.SIMDMask(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="using" privateName="using" type="Swift.OneZero" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Set" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="capacity" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="description" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isEmpty" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Set" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Set" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="contains" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="filter" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.Set(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="formIntersection" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="intersection" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Set(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="isDisjoint" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="with" privateName="with" type="Swift.Set" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="isStrictSubset" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="of" privateName="of" type="Swift.Set" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="isStrictSuperset" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="of" privateName="of" type="Swift.Set" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="isSubset" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="of" privateName="of" type="Swift.Set" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="isSuperset" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="of" privateName="of" type="Swift.Set" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="popFirst" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="remove" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="removeAll" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="keepingCapacity" privateName="keepingCapacity" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="removeFirst" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="reserveCapacity" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="subtract" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="subtracting" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Set(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Set.Index" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Set.Iterator" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Slice" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="base" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="indices" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="distance" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.Self.Index" isVariadic="False"/>
                        <parameter publicName="to" privateName="to" type="Swift.Self.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="formIndex" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.Self.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self.Index" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.Self.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.StaticString" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="description" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hasPointerRepresentation" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isASCII" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="unicodeScalar" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="utf8CodeUnitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="utf8Start" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="withUTF8Buffer" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.StrideThrough" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="underestimatedCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="makeIterator" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.StrideThroughIterator(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.StrideThroughIterator" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.StrideTo" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="underestimatedCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="makeIterator" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.StrideToIterator(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.StrideToIterator" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.String" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="characters" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="description" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isEmpty" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="unicodeScalars" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="utf16" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="utf8" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="utf8CString" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="+" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.String" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.String" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.String" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.String" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.String" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&lt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.String" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.String" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.String" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.String" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="append" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="contentsOf" privateName="contentsOf" type="Swift.String" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decodeCString" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="(result: Swift.String, repairsMade: Swift.Bool)?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.UnsafePointer" isVariadic="False"/>
                        <parameter publicName="as" privateName="as" type="Meta" isVariadic="False"/>
                        <parameter publicName="repairingInvalidCodeUnits" privateName="repairingInvalidCodeUnits" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="distance" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.String.Index" isVariadic="False"/>
                        <parameter publicName="to" privateName="to" type="Swift.String.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Encoder" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hasPrefix" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="hasSuffix" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.String.Index" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.String.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="insert" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="contentsOf" privateName="contentsOf" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="at" privateName="at" type="Swift.String.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="lowercased" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.String" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="makeIterator" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.String.Iterator" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="max" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="min" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="remove" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Character" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="at" privateName="at" type="Swift.String.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="removeAll" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="keepingCapacity" privateName="keepingCapacity" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="removeSubrange" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.String.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="replaceSubrange" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Range" isVariadic="False"/>
                        <parameter publicName="with" privateName="with" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="reserveCapacity" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="uppercased" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.String" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="withCString" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.Self" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="encodedAs" privateName="encodedAs" type="Meta" isVariadic="False"/>
                        <parameter publicName="" privateName="" type="Swift.UnsafePointer" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withMutableCharacters" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="withUnsafeBytes" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.Self" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="write" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.String.Index" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="characterStride" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="encodedOffset" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isZeroPosition" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="nextEncoded" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="nextTranscoded" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="orderingValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="priorEncoded" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="priorTranscoded" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="strippingTranscoding" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="transcodedOffset" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="&lt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.String.Index" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.String.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.String.Index" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.String.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encoded" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.String.Index" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="offsetBy" privateName="offsetBy" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="samePosition" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.String.Index?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="in" privateName="in" type="Swift.String.UnicodeScalarView" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="transcoded" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.String.Index" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="withOffset" privateName="withOffset" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="utf16Offset" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="in" privateName="in" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.String.Iterator" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Character?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.String.UTF16View" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="description" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="distance" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.String.Index" isVariadic="False"/>
                        <parameter publicName="to" privateName="to" type="Swift.String.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.String.Index" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.String.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="makeIterator" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.String.UTF16View.Iterator" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.String.UTF16View.Iterator" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int16?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.String.UTF8View" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="description" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="distance" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.String.Index" isVariadic="False"/>
                        <parameter publicName="to" privateName="to" type="Swift.String.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.String.Index" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.String.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withContiguousStorageIfAvailable" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.Self?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.String.UnicodeScalarView" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="description" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="append" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="contentsOf" privateName="contentsOf" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.String.Index" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.String.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="makeIterator" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.String.UnicodeScalarView.Iterator" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="replaceSubrange" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Range" isVariadic="False"/>
                        <parameter publicName="with" privateName="with" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="reserveCapacity" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.String.UnicodeScalarView.Iterator" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Unicode.Scalar?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Substring" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="characters" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="description" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="unicodeScalars" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="utf16" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="utf8" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="append" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="contentsOf" privateName="contentsOf" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="distance" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.String.Index" isVariadic="False"/>
                        <parameter publicName="to" privateName="to" type="Swift.String.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="filter" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.String" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.String.Index" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.String.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="lowercased" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.String" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="replaceSubrange" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Range" isVariadic="False"/>
                        <parameter publicName="with" privateName="with" type="Swift.Substring" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="uppercased" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.String" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="withCString" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.Self" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="encodedAs" privateName="encodedAs" type="Meta" isVariadic="False"/>
                        <parameter publicName="" privateName="" type="Swift.UnsafePointer" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withMutableCharacters" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="withUnsafeBytes" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.Self" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="write" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Substring.UTF16View" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="indices" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="distance" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.String.Index" isVariadic="False"/>
                        <parameter publicName="to" privateName="to" type="Swift.String.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="formIndex" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.String.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.String.Index" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.String.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Substring.UTF8View" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="indices" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="distance" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.String.Index" isVariadic="False"/>
                        <parameter publicName="to" privateName="to" type="Swift.String.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="formIndex" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.String.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.String.Index" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.String.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Substring.UnicodeScalarView" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="indices" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="distance" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.String.Index" isVariadic="False"/>
                        <parameter publicName="to" privateName="to" type="Swift.String.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="formIndex" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.String.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.String.Index" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.String.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="replaceSubrange" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Range" isVariadic="False"/>
                        <parameter publicName="with" privateName="with" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.SystemRandomNumberGenerator" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int64" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="bitWidth" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="byteSwapped" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="leadingZeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="nonzeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="trailingZeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="words" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="%" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="USwift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="%=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="USwift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&lt;&lt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="USwift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&lt;&lt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&gt;&gt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="USwift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&gt;&gt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="*" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="USwift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="*=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="USwift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="-" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="USwift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="-=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="USwift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&lt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&lt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&gt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&gt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="^" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="USwift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="^=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="addingReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: USwift.Int, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="partialValue" privateName="partialValue" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="overflow" privateName="overflow" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dividedReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: USwift.Int, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dividingFullWidth" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(quotient: USwift.Int, remainder: USwift.Int)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="(high" privateName="(high" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Encoder" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="multipliedFullWidth" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(high: USwift.Int, low: USwift.Int)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="multipliedReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: USwift.Int, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="remainderReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: USwift.Int, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="dividingBy" privateName="dividingBy" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="signum" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="USwift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="subtractingReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: USwift.Int, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="partialValue" privateName="partialValue" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="overflow" privateName="overflow" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="|" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="USwift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="|=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="USwift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt.SIMD16Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt.SIMD2Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt.SIMD32Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt.SIMD4Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt.SIMD64Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt.SIMD8Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt.Words" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="indices" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt16" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="bitWidth" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="byteSwapped" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="leadingZeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="nonzeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="trailingZeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="words" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="%" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="%=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&lt;&lt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&lt;&lt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&gt;&gt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&gt;&gt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="*" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="*=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="-" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="-=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&lt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&lt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&gt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&gt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="^" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="^=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="addingReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.USwift.Int16, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="partialValue" privateName="partialValue" type="Swift.USwift.Int16" isVariadic="False"/>
                        <parameter publicName="overflow" privateName="overflow" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dividedReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.USwift.Int16, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dividingFullWidth" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(quotient: Swift.USwift.Int16, remainder: Swift.USwift.Int16)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="(high" privateName="(high" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Encoder" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="multipliedFullWidth" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(high: Swift.USwift.Int16, low: Swift.USwift.Int16)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="multipliedReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.USwift.Int16, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="remainderReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.USwift.Int16, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="dividingBy" privateName="dividingBy" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="signum" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="subtractingReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.USwift.Int16, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="partialValue" privateName="partialValue" type="Swift.USwift.Int16" isVariadic="False"/>
                        <parameter publicName="overflow" privateName="overflow" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="|" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="|=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt16.SIMD16Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt16.SIMD2Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt16.SIMD32Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt16.SIMD4Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt16.SIMD64Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt16.SIMD8Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt16.Words" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="indices" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt32" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="bitWidth" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="byteSwapped" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="leadingZeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="nonzeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="trailingZeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="words" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="%" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int32" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="%=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int32" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&lt;&lt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int32" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&lt;&lt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&gt;&gt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int32" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&gt;&gt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="*" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int32" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="*=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int32" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="-" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int32" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="-=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int32" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&lt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&lt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&gt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&gt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="^" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int32" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="^=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="addingReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.USwift.Int32, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="partialValue" privateName="partialValue" type="Swift.USwift.Int32" isVariadic="False"/>
                        <parameter publicName="overflow" privateName="overflow" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dividedReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.USwift.Int32, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dividingFullWidth" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(quotient: Swift.USwift.Int32, remainder: Swift.USwift.Int32)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="(high" privateName="(high" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Encoder" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="multipliedFullWidth" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(high: Swift.USwift.Int32, low: Swift.USwift.Int32)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="multipliedReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.USwift.Int32, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="remainderReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.USwift.Int32, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="dividingBy" privateName="dividingBy" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="signum" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int32" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="subtractingReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.USwift.Int32, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="partialValue" privateName="partialValue" type="Swift.USwift.Int32" isVariadic="False"/>
                        <parameter publicName="overflow" privateName="overflow" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="|" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int32" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="|=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt32.SIMD16Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt32.SIMD2Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt32.SIMD32Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt32.SIMD4Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt32.SIMD64Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt32.SIMD8Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt32.Words" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="indices" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt64" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="bitWidth" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="byteSwapped" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="leadingZeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="nonzeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="trailingZeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="words" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="%" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int64" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="%=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int64" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&lt;&lt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int64" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&lt;&lt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&gt;&gt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int64" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&gt;&gt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="*" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int64" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="*=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int64" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="-" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int64" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="-=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int64" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&lt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&lt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&gt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&gt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="^" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int64" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="^=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="addingReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.USwift.Int64, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="partialValue" privateName="partialValue" type="Swift.USwift.Int64" isVariadic="False"/>
                        <parameter publicName="overflow" privateName="overflow" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dividedReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.USwift.Int64, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dividingFullWidth" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(quotient: Swift.USwift.Int64, remainder: Swift.USwift.Int64)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="(high" privateName="(high" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Encoder" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="multipliedFullWidth" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(high: Swift.USwift.Int64, low: Swift.USwift.Int64)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="multipliedReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.USwift.Int64, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="remainderReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.USwift.Int64, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="dividingBy" privateName="dividingBy" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="signum" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int64" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="subtractingReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.USwift.Int64, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="partialValue" privateName="partialValue" type="Swift.USwift.Int64" isVariadic="False"/>
                        <parameter publicName="overflow" privateName="overflow" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="|" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int64" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="|=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int64" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt64.SIMD16Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt64.SIMD2Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt64.SIMD32Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt64.SIMD4Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt64.SIMD64Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt64.SIMD8Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt64.Words" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="indices" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt8" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="bitWidth" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="byteSwapped" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="leadingZeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="nonzeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="trailingZeroBitCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="words" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="%" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int8" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="%=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int8" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&lt;&lt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int8" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&lt;&lt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&gt;&gt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int8" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&gt;&gt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="*" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int8" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="*=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int8" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="-" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int8" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="-=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int8" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&lt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&lt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&gt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&gt;=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="^" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int8" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="^=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="addingReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.USwift.Int8, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="partialValue" privateName="partialValue" type="Swift.USwift.Int8" isVariadic="False"/>
                        <parameter publicName="overflow" privateName="overflow" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dividedReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.USwift.Int8, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dividingFullWidth" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(quotient: Swift.USwift.Int8, remainder: Swift.USwift.Int8)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="(high" privateName="(high" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Encoder" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="multipliedFullWidth" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(high: Swift.USwift.Int8, low: Swift.USwift.Int8)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="multipliedReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.USwift.Int8, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="remainderReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.USwift.Int8, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="dividingBy" privateName="dividingBy" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="signum" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int8" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="subtractingReportingOverflow" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.USwift.Int8, overflow: Swift.Bool)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="partialValue" privateName="partialValue" type="Swift.USwift.Int8" isVariadic="False"/>
                        <parameter publicName="overflow" privateName="overflow" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="|" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.USwift.Int8" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="|=" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt8.SIMD16Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt8.SIMD2Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt8.SIMD32Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt8.SIMD4Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt8.SIMD64Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt8.SIMD8Storage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="scalarCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UInt8.Words" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="indices" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UnfoldSequence" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Unicode.ASCII.Parser" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="parseScalar" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Unicode.ParseResult(Swift.CollectionOfOne(Swift.USwift.Int8))" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Unicode.CanonicalCombiningClass" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="above" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="aboveLeft" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="aboveRight" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="attachedAbove" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="attachedAboveRight" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="attachedBelow" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="attachedBelowLeft" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="below" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="belowLeft" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="belowRight" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="doubleAbove" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="doubleBelow" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="iotaSubscript" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="kanaVoicing" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="left" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="notReordered" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="nukta" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="overlay" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="rawValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="right" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="virama" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="&lt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Unicode.CanonicalCombiningClass" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Unicode.CanonicalCombiningClass" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Unicode.CanonicalCombiningClass" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Unicode.CanonicalCombiningClass" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Unicode.Scalar" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="description" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isASCII" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="properties" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="utf16" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="utf8" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="value" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="&lt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Unicode.Scalar" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Unicode.Scalar" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Unicode.Scalar" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Unicode.Scalar" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="escaped" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.String" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="asASCII" privateName="asASCII" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withUTF8CodeUnits" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.Self" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="write" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Unicode.Scalar.Properties" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="age" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="canonicalCombiningClass" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="changesWhenCaseFolded" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="changesWhenCaseMapped" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="changesWhenLowercased" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="changesWhenNFKCCaseFolded" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="changesWhenTitlecased" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="changesWhenUppercased" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="generalCategory" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isASCIIHexDigit" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isAlphabetic" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isBidiControl" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isBidiMirrored" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isCaseIgnorable" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isCased" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isDash" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isDefaultIgnorableCodePoint" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isDeprecated" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isDiacritic" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isEmoji" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isEmojiModifier" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isEmojiModifierBase" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isEmojiPresentation" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isExtender" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isFullCompositionExclusion" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isGraphemeBase" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isGraphemeExtend" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isHexDigit" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isIDContinue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isIDSBinaryOperator" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isIDSTrinaryOperator" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isIDStart" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isIdeographic" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isJoinControl" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isLogicalOrderException" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isLowercase" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isMath" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isNoncharacterCodePoint" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isPatternSyntax" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isPatternWhitespace" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isQuotationMark" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isRadical" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isSentenceTerminal" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isSoftDotted" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isTerminalPunctuation" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isUnifiedIdeograph" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isUppercase" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isVariationSelector" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isWhitespace" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isXIDContinue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="isXIDStart" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="lowercaseMapping" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="name" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="nameAlias" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="numericType" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="numericValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="titlecaseMapping" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="uppercaseMapping" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Unicode.Scalar.UTF16View" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="value" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Unicode.Scalar.UTF8View" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="value" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Unicode.UTF16.ForwardParser" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Unicode.UTF16.ReverseParser" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Unicode.UTF32.Parser" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="parseScalar" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Unicode.ParseResult(Swift.CollectionOfOne(Swift.USwift.Int32))" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Unicode.UTF8.ForwardParser" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Unicode.UTF8.ReverseParser" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Unmanaged" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="autorelease" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Unmanaged(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="fromOpaque" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="Swift.Unmanaged(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="passRetained" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="Swift.Unmanaged(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="passUnretained" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="Swift.Unmanaged(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="release" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="retain" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Unmanaged(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="takeRetainedValue" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="takeUnretainedValue" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="toOpaque" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.UnsafeMutableRawPointer" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UnsafeBufferPointer" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="baseAddress" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="indices" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="deallocate" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="distance" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="to" privateName="to" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="formIndex" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withContiguousStorageIfAvailable" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withMemoryRebound" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneOne" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Meta" isVariadic="False"/>
                        <parameter publicName="" privateName="" type="Swift.UnsafeBufferPointer" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withUnsafeBytes" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UnsafeBufferPointer.Iterator" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UnsafeMutableBufferPointer" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="baseAddress" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="indices" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="allocate" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="Swift.UnsafeMutableBufferPointer(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="capacity" privateName="capacity" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="assign" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="repeating" privateName="repeating" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="deallocate" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="distance" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="to" privateName="to" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="formIndex" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="index" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="initialize" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(Swift.OneZeroB0.Iterator, Swift.Int)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.OneZero" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="swapAt" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withContiguousMutableStorageIfAvailable" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withContiguousStorageIfAvailable" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withMemoryRebound" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneOne" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Meta" isVariadic="False"/>
                        <parameter publicName="" privateName="" type="Swift.UnsafeMutableBufferPointer" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withUnsafeBytes" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UnsafeMutablePointer" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="pointee" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="allocate" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="Swift.UnsafeMutablePointer(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="capacity" privateName="capacity" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="assign" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.UnsafePointer" isVariadic="False"/>
                        <parameter publicName="count" privateName="count" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="deallocate" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="capacity" privateName="capacity" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="deinitialize" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.UnsafeMutableRawPointer" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="count" privateName="count" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="initialize" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="count" privateName="count" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="move" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="moveAssign" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.UnsafeMutablePointer" isVariadic="False"/>
                        <parameter publicName="count" privateName="count" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="moveInitialize" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.UnsafeMutablePointer" isVariadic="False"/>
                        <parameter publicName="count" privateName="count" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withMemoryRebound" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneOne" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Meta" isVariadic="False"/>
                        <parameter publicName="capacity" privateName="capacity" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="" privateName="" type="Swift.UnsafeMutablePointer" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UnsafeMutableRawBufferPointer" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="baseAddress" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="indices" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="allocate" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="Swift.UnsafeMutableRawBufferPointer" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="count" privateName="count" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="bindMemory" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.UnsafeMutableBufferPointer(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Meta" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="copyBytes" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.UnsafeRawBufferPointer" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="copyMemory" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.UnsafeRawBufferPointer" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="deallocate" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="initializeMemory" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(unwritten: Swift.Self.Iterator, initialized: Swift.UnsafeMutableBufferPointer(Swift.Self.Element))" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="as" privateName="as" type="Meta" isVariadic="False"/>
                        <parameter publicName="from" privateName="from" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="load" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="fromByteOffset" privateName="fromByteOffset" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="as" privateName="as" type="Meta" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="makeIterator" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.UnsafeRawBufferPointer.Iterator" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="storeBytes" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="of" privateName="of" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="toByteOffset" privateName="toByteOffset" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="as" privateName="as" type="Meta" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="swapAt" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withUnsafeBytes" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.Self" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UnsafeMutableRawPointer" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="advanced" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.UnsafeMutableRawPointer" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="allocate" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="Swift.UnsafeMutableRawPointer" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="bytes" privateName="bytes" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="alignedTo" privateName="alignedTo" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="assumingMemoryBound" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.UnsafeMutablePointer(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Meta" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="bindMemory" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.UnsafeMutablePointer(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Meta" isVariadic="False"/>
                        <parameter publicName="capacity" privateName="capacity" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="copyBytes" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.UnsafeRawPointer" isVariadic="False"/>
                        <parameter publicName="count" privateName="count" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="copyMemory" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.UnsafeRawPointer" isVariadic="False"/>
                        <parameter publicName="byteCount" privateName="byteCount" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="deallocate" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="bytes" privateName="bytes" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="alignedTo" privateName="alignedTo" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="initializeMemory" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.UnsafeMutablePointer(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="as" privateName="as" type="Meta" isVariadic="False"/>
                        <parameter publicName="at" privateName="at" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="count" privateName="count" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="to" privateName="to" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="load" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="fromByteOffset" privateName="fromByteOffset" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="as" privateName="as" type="Meta" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="moveInitializeMemory" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.UnsafeMutablePointer(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="as" privateName="as" type="Meta" isVariadic="False"/>
                        <parameter publicName="from" privateName="from" type="Swift.UnsafeMutablePointer" isVariadic="False"/>
                        <parameter publicName="count" privateName="count" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="storeBytes" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="of" privateName="of" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="toByteOffset" privateName="toByteOffset" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="as" privateName="as" type="Meta" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UnsafePointer" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="pointee" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="deallocate" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="withMemoryRebound" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneOne" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Meta" isVariadic="False"/>
                        <parameter publicName="capacity" privateName="capacity" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="" privateName="" type="Swift.UnsafePointer" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UnsafeRawBufferPointer" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="baseAddress" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="count" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="endIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="indices" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="startIndex" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="bindMemory" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.UnsafeBufferPointer(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Meta" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="deallocate" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="load" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="fromByteOffset" privateName="fromByteOffset" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="as" privateName="as" type="Meta" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="makeIterator" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.UnsafeRawBufferPointer.Iterator" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="withUnsafeBytes" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.Self" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UnsafeRawBufferPointer.Iterator" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int8?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.UnsafeRawPointer" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="advanced" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.UnsafeRawPointer" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="assumingMemoryBound" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.UnsafePointer(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Meta" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="bindMemory" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.UnsafePointer(Swift.Self)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Meta" isVariadic="False"/>
                        <parameter publicName="capacity" privateName="capacity" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="deallocate" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="load" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Self" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="fromByteOffset" privateName="fromByteOffset" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="as" privateName="as" type="Meta" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Zip2Sequence" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="underestimatedCount" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="struct" name="Swift.Zip2Sequence.Iterator" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="next" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="(Swift.Self.Element, Swift.ZeroOneA1.Element)?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="enum" name="Swift.CollectionDifference.Change" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="enum" name="Swift.CommandLine" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="argc" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="arguments" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="unsafeArgv" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
            </members>
         </typedeclaration>
         <typedeclaration kind="enum" name="Swift.DecodingError" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="dataCorruptedError" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="Swift.DecodingError" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="in" privateName="in" type="Swift.SingleValueDecodingContainer" isVariadic="False"/>
                        <parameter publicName="debugDescription" privateName="debugDescription" type="Swift.String" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="enum" name="Swift.EncodingError" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="enum" name="Swift.FloatingPointClassification" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.FloatingPointClassification" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.FloatingPointClassification" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="enum" name="Swift.FloatingPointRoundingRule" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.FloatingPointRoundingRule" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.FloatingPointRoundingRule" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="enum" name="Swift.FloatingPointSign" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="rawValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.FloatingPointSign" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.FloatingPointSign" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="enum" name="Swift.MemoryLayout" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="alignment" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="size" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="stride" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="alignment" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="ofValue" privateName="ofValue" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="offset" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="Swift.Int?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="of" privateName="of" type="Swift.PartialKeyPath" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="size" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="ofValue" privateName="ofValue" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="stride" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="ofValue" privateName="ofValue" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="enum" name="Swift.Mirror.AncestorRepresentation" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="enum" name="Swift.Mirror.DisplayStyle" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Mirror.DisplayStyle" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Mirror.DisplayStyle" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="enum" name="Swift.Never" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="&lt;" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Never" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Never" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Never" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Never" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="enum" name="Swift.Optional" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="customMirror" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="debugDescription" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="unsafelyUnwrapped" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="flatMap" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="map" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="enum" name="Swift.Result" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="flatMap" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Result(Swift.OneZero, Swift.ZeroOne)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.OneZero" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.ZeroOne" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="flatMapError" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Result(Swift.Self, Swift.OneZero)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.OneZero" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="get" isPossiblyIncomplete="False" hasThrows="True" operatorKind="None" isStatic="False" returnType="Swift.Self" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="map" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Result(Swift.OneZero, Swift.ZeroOne)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.OneZero" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.ZeroOne" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="mapError" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.Result(Swift.Self, Swift.OneZero)" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.OneZero" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="enum" name="Swift.Unicode" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="enum" name="Swift.Unicode.ASCII" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="encodedReplacementCharacter" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="decode" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="Swift.Unicode.Scalar" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="Swift.CollectionOfOne(Swift.USwift.Int8)?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="transcode" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="Swift.CollectionOfOne(Swift.USwift.Int8)?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Self.EncodedScalar" isVariadic="False"/>
                        <parameter publicName="from" privateName="from" type="Meta" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="enum" name="Swift.Unicode.GeneralCategory" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Unicode.GeneralCategory" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Unicode.GeneralCategory" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="enum" name="Swift.Unicode.NumericType" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Unicode.NumericType" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Unicode.NumericType" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="enum" name="Swift.Unicode.ParseResult" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="enum" name="Swift.Unicode.UTF16" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="decode" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.UnicodeDecodingResult" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Unicode.Scalar" isVariadic="False"/>
                        <parameter publicName="into" privateName="into" type="Swift.USwift.Int16" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="isLeadSurrogate" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="isTrailSurrogate" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="leadSurrogate" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="Swift.USwift.Int16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="trailSurrogate" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="Swift.USwift.Int16" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="transcodedLength" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="(count: Swift.Int, isASCII: Swift.Bool)?" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="of" privateName="of" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="decodedAs" privateName="decodedAs" type="Meta" isVariadic="False"/>
                        <parameter publicName="repairingIllFormedSequences" privateName="repairingIllFormedSequences" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="width" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="Swift.Int" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="enum" name="Swift.Unicode.UTF32" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <property name="encodedReplacementCharacter" isPossiblyIncomplete="False" isStatic="True" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <property name="hashValue" isPossiblyIncomplete="False" isStatic="False" accessibility="True" isDeprecated="False" isUnavailable="False" isOptional="False" type="Named" storage="Addressed"/>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Unicode.UTF32" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Unicode.UTF32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decode" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.UnicodeDecodingResult" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decode" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="Swift.Unicode.Scalar" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Unicode.Scalar" isVariadic="False"/>
                        <parameter publicName="into" privateName="into" type="Swift.USwift.Int32" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hash" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="enum" name="Swift.Unicode.UTF8" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="decode" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="False" returnType="Swift.UnicodeDecodingResult" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Unicode.Scalar" isVariadic="False"/>
                        <parameter publicName="into" privateName="into" type="Swift.USwift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="isContinuation" isPossiblyIncomplete="False" hasThrows="False" operatorKind="None" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="enum" name="Swift.UnicodeDecodingResult" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="==" isPossiblyIncomplete="False" hasThrows="False" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.UnicodeDecodingResult" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.UnicodeDecodingResult" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.AdditiveArithmetic" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="+" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="+=" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="-" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="-=" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="zero" isPossiblyIncomplete="True" operatorKind="None" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.BidirectionalCollection" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="distance" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Int" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.Self.Index" isVariadic="False"/>
                        <parameter publicName="to" privateName="to" type="Swift.Self.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="formIndex" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="before" privateName="before" type="Swift.Self.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="index" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.Index" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="before" privateName="before" type="Swift.Self.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="index" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.Index?" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Self.Index" isVariadic="False"/>
                        <parameter publicName="offsetBy" privateName="offsetBy" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="limitedBy" privateName="limitedBy" type="Swift.Self.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="index" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.Index" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Self.Index" isVariadic="False"/>
                        <parameter publicName="offsetBy" privateName="offsetBy" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.BinaryFloatingPoint" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="binade" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="exponentBitCount" isPossiblyIncomplete="True" operatorKind="None" isStatic="True" returnType="Swift.Int" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="exponentBitPattern" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.RawExponent" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="significandBitCount" isPossiblyIncomplete="True" operatorKind="None" isStatic="True" returnType="Swift.Int" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="significandBitPattern" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.RawSignificand" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="significandWidth" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Int" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.BinaryInteger" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="%" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="%=" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;=" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/=" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&lt;&lt;" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.OneZero" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&lt;&lt;=" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.OneZero" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&gt;&gt;" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.OneZero" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&gt;&gt;=" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.OneZero" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="^" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="^=" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="bitWidth" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Int" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="isMultiple" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="of" privateName="of" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="isSigned" isPossiblyIncomplete="True" operatorKind="None" isStatic="True" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="quotientAndRemainder" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="(quotient: Swift.Self, remainder: Swift.Self)" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="dividingBy" privateName="dividingBy" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="signum" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="trailingZeroBitCount" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Int" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="words" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.Words" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="|" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="|=" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="~" isPossiblyIncomplete="True" operatorKind="Prefix" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.CVarArg" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.CaseIterable" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="allCases" isPossiblyIncomplete="True" operatorKind="None" isStatic="True" returnType="Swift.Self.AllCases" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.CodingKey" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="intValue" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Int?" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="stringValue" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.String" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.Collection" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="count" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Int" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="distance" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Int" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.Self.Index" isVariadic="False"/>
                        <parameter publicName="to" privateName="to" type="Swift.Self.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="endIndex" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.Index" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="formIndex" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.Self.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="index" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.Index?" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Self.Index" isVariadic="False"/>
                        <parameter publicName="offsetBy" privateName="offsetBy" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="limitedBy" privateName="limitedBy" type="Swift.Self.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="index" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.Index" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Self.Index" isVariadic="False"/>
                        <parameter publicName="offsetBy" privateName="offsetBy" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="index" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.Index" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="after" privateName="after" type="Swift.Self.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="indices" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.Indices" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="isEmpty" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="startIndex" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.Index" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="subscript" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.SubSequence" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.Comparable" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="&lt;" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&lt;=" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&gt;" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&gt;=" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.CustomDebugStringConvertible" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="debugDescription" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.String" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.CustomLeafReflectable" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.CustomPlaygroundDisplayConvertible" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="playgroundDescription" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Any" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.CustomReflectable" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="customMirror" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Mirror" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.CustomStringConvertible" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="description" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.String" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.Decodable" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.Decoder" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="codingPath" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Array(Swift.CodingKey)" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="container" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.KeyedDecodingContainer(Swift.OneZero)" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="keyedBy" privateName="keyedBy" type="Meta" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="singleValueContainer" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.SingleValueDecodingContainer" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="unkeyedContainer" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.UnkeyedDecodingContainer" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="userInfo" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Dictionary(Swift.CodingUserInfoKey, Swift.Any)" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.Encodable" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Encoder" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.Encoder" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="codingPath" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Array(Swift.CodingKey)" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="container" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.KeyedEncodingContainer(Swift.OneZero)" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="keyedBy" privateName="keyedBy" type="Meta" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="singleValueContainer" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.SingleValueEncodingContainer" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="unkeyedContainer" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.UnkeyedEncodingContainer" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="userInfo" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Dictionary(Swift.CodingUserInfoKey, Swift.Any)" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.Equatable" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="==" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.Error" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.ExpressibleByArrayLiteral" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.ExpressibleByBooleanLiteral" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.ExpressibleByDictionaryLiteral" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.ExpressibleByExtendedGraphemeClusterLiteral" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.ExpressibleByFloatLiteral" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.ExpressibleByIntegerLiteral" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.ExpressibleByNilLiteral" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.ExpressibleByStringInterpolation" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.ExpressibleByStringLiteral" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.ExpressibleByUnicodeScalarLiteral" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.FixedWidthInteger" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="&amp;&lt;&lt;" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&lt;&lt;=" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&gt;&gt;" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="&amp;&gt;&gt;=" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="addingReportingOverflow" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Self, overflow: Swift.Bool)" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="partialValue" privateName="partialValue" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="overflow" privateName="overflow" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="bigEndian" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="bitWidth" isPossiblyIncomplete="True" operatorKind="None" isStatic="True" returnType="Swift.Int" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="byteSwapped" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="dividedReportingOverflow" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Self, overflow: Swift.Bool)" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="dividingFullWidth" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="(quotient: Swift.Self, remainder: Swift.Self)" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="(high" privateName="(high" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="leadingZeroBitCount" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Int" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="littleEndian" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="max" isPossiblyIncomplete="True" operatorKind="None" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="min" isPossiblyIncomplete="True" operatorKind="None" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="multipliedFullWidth" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="(high: Swift.Self, low: Swift.Self.Magnitude)" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="multipliedReportingOverflow" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Self, overflow: Swift.Bool)" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="nonzeroBitCount" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Int" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="remainderReportingOverflow" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Self, overflow: Swift.Bool)" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="dividingBy" privateName="dividingBy" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="subtractingReportingOverflow" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="(partialValue: Swift.Self, overflow: Swift.Bool)" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="partialValue" privateName="partialValue" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="overflow" privateName="overflow" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.FloatingPoint" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="/" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="/=" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="addProduct" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="addingProduct" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="exponent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.Exponent" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="floatingPointClass" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.FloatingPointClassification" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="formRemainder" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="dividingBy" privateName="dividingBy" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="formSquareRoot" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="formTruncatingRemainder" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="dividingBy" privateName="dividingBy" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="greatestFiniteMagnitude" isPossiblyIncomplete="True" operatorKind="None" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="infinity" isPossiblyIncomplete="True" operatorKind="None" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="isCanonical" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="isEqual" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="isFinite" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="isInfinite" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="isLess" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="than" privateName="than" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="isLessThanOrEqualTo" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="isNaN" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="isNormal" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="isSignalingNaN" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="isSubnormal" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="isTotallyOrdered" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="belowOrEqualTo" privateName="belowOrEqualTo" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="isZero" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="leastNonzeroMagnitude" isPossiblyIncomplete="True" operatorKind="None" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="leastNormalMagnitude" isPossiblyIncomplete="True" operatorKind="None" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="maximum" isPossiblyIncomplete="True" operatorKind="None" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="maximumMagnitude" isPossiblyIncomplete="True" operatorKind="None" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="minimum" isPossiblyIncomplete="True" operatorKind="None" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="minimumMagnitude" isPossiblyIncomplete="True" operatorKind="None" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="nan" isPossiblyIncomplete="True" operatorKind="None" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="nextDown" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="nextUp" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="pi" isPossiblyIncomplete="True" operatorKind="None" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="radix" isPossiblyIncomplete="True" operatorKind="None" isStatic="True" returnType="Swift.Int" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="remainder" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="dividingBy" privateName="dividingBy" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="round" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="rounded" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="sign" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.FloatingPointSign" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="signalingNaN" isPossiblyIncomplete="True" operatorKind="None" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="significand" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="squareRoot" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="truncatingRemainder" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="dividingBy" privateName="dividingBy" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="ulp" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="ulpOfOne" isPossiblyIncomplete="True" operatorKind="None" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.Hashable" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="hash" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="into" privateName="into" type="Swift.Hasher" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="hashValue" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Int" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.Identifiable" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="id" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.ID" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.IteratorProtocol" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="next" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.Element?" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.KeyedDecodingContainerProtocol" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="allKeys" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Array(Swift.Self.Key)" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="codingPath" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Array(Swift.CodingKey)" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="contains" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int16" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.String" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int16" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int8" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int16" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int64" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int32" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int64" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int8" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int32" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int64" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int32" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int32" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int64?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int8?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int16?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.String?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int8?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int32?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int16?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int32?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int64?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int8?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int16?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int16?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int32?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="decodeNil" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Bool" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="nestedContainer" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.KeyedDecodingContainer(Swift.OneZero)" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="keyedBy" privateName="keyedBy" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="nestedUnkeyedContainer" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.UnkeyedDecodingContainer" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="superDecoder" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Decoder" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="superDecoder" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Decoder" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.KeyedEncodingContainerProtocol" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="codingPath" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Array(Swift.CodingKey)" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Swift.Int64" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.String" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Bool" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Double" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Float" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.OneZero" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="USwift.Int" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.USwift.Int64" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.USwift.Int32" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.OneZero" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.USwift.Int16" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Swift.Int32" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Swift.Int16" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Swift.Int8" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.USwift.Int8" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encodeConditional" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.OneZero" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Optional<Swift.USwift.Int32>" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Optional<Swift.USwift.Int64>" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Optional<Swift.Swift.Int64>" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Optional<Swift.USwift.Int16>" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Optional<Swift.String>" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Optional<Swift.Bool>" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Optional<Double>" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Optional<Float>" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Optional<Swift.Int>" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Optional<USwift.Int>" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Optional<Swift.OneZero>" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Optional<Swift.Swift.Int8>" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Optional<Swift.Swift.Int16>" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Optional<Swift.Swift.Int32>" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Optional<Swift.Swift.Int64>" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Optional<Swift.USwift.Int8>" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Optional<Swift.USwift.Int16>" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Optional<Swift.USwift.Int32>" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encodeNil" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="nestedContainer" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.KeyedEncodingContainer(Swift.OneZero)" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="keyedBy" privateName="keyedBy" type="Meta" isVariadic="False"/>
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="nestedUnkeyedContainer" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.UnkeyedEncodingContainer" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="superEncoder" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Encoder" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="superEncoder" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Encoder" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="forKey" privateName="forKey" type="Swift.Self.Key" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.LazyCollectionProtocol" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.LazySequenceProtocol" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="elements" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.Elements" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.LosslessStringConvertible" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.MirrorPath" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.MutableCollection" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="partition" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.Index" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.Self.Element -> Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="subscript" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.SubSequence" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="subscript" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self.SubSequence" isVariadic="False"/>
                        <parameter publicName="a" privateName="a" type="Swift.Range" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="subscript" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.Element" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="subscript" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self.Element" isVariadic="False"/>
                        <parameter publicName="a" privateName="a" type="Swift.Self.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="swapAt" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self.Index" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withContiguousMutableStorageIfAvailable" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self.Element" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.Numeric" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="*" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="*=" isPossiblyIncomplete="True" operatorKind="Infix" isStatic="True" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                        <parameter publicName="_" privateName="_" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="magnitude" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.Magnitude" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.OptionSet" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.RandomAccessCollection" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="distance" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Int" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="from" privateName="from" type="Swift.Self.Index" isVariadic="False"/>
                        <parameter publicName="to" privateName="to" type="Swift.Self.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="index" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.Index?" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Self.Index" isVariadic="False"/>
                        <parameter publicName="offsetBy" privateName="offsetBy" type="Swift.Int" isVariadic="False"/>
                        <parameter publicName="limitedBy" privateName="limitedBy" type="Swift.Self.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="index" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.Index" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Self.Index" isVariadic="False"/>
                        <parameter publicName="offsetBy" privateName="offsetBy" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.RandomNumberGenerator" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="next" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int64" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.RangeExpression" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="contains" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="relative" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Range(Swift.Self.Bound)" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.OneZero" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.RangeReplaceableCollection" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="remove" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.Element" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="at" privateName="at" type="Swift.Self.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="removeAll" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="keepingCapacity" privateName="keepingCapacity" type="Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="removeAll" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="where" privateName="where" type="Swift.Self.Element -> Swift.Bool" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="removeFirst" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="removeFirst" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.Element" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="removeSubrange" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self.Index" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="reserveCapacity" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.RawRepresentable" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="rawValue" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.RawValue" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.SIMD" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.SIMDScalar" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.SIMDStorage" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="scalarCount" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Int" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="subscript" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.Scalar" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="subscript" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self.Scalar" isVariadic="False"/>
                        <parameter publicName="a" privateName="a" type="Swift.Int" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.Sequence" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="makeIterator" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.Iterator" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="underestimatedCount" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Int" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="withContiguousStorageIfAvailable" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Self.Element" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.SetAlgebra" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="contains" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="formIntersection" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="intersection" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="isDisjoint" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="with" privateName="with" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="isEmpty" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="isSubset" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="of" privateName="of" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="isSuperset" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="of" privateName="of" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="remove" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.Element?" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="subtract" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="subtracting" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.SignedInteger" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.SignedNumeric" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="-" isPossiblyIncomplete="True" operatorKind="Prefix" isStatic="True" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="negate" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.SingleValueDecodingContainer" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="codingPath" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Array(Swift.CodingKey)" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int64" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int32" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int16" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int8" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int64" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int32" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int16" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int8" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.String" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decodeNil" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.SingleValueEncodingContainer" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="codingPath" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Array(Swift.CodingKey)" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encodeNil" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.Strideable" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="advanced" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="by" privateName="by" type="Swift.Self.Stride" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="distance" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.Stride" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.Self" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.StringInterpolationProtocol" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="appendLiteral" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.StringProtocol" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="hasPrefix" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="hasSuffix" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="lowercased" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.String" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="unicodeScalars" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.UnicodeScalarView" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="uppercased" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.String" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="utf16" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.UTF16View" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="utf8" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Self.UTF8View" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="withCString" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="encodedAs" privateName="encodedAs" type="Meta" isVariadic="False"/>
                        <parameter publicName="" privateName="" type="Swift.UnsafePointer" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withCString" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="_" privateName="_" type="Swift.Swift.Int8" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="withCString" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="encodedAs" privateName="encodedAs" type="Meta" isVariadic="False"/>
                        <parameter publicName="" privateName="" type="Swift.UnsafePointer" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.TextOutputStream" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="write" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.TextOutputStreamable" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="write" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="to" privateName="to" type="Swift.OneZero" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.UnicodeCodec" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.UnicodeDecodingResult" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="True" returnType="" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="" privateName="" type="Swift.Unicode.Scalar" isVariadic="False"/>
                        <parameter publicName="into" privateName="into" type="Swift.Self.CodeUnit" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.UnkeyedDecodingContainer" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="codingPath" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Array(Swift.CodingKey)" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="count" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Int?" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="currentIndex" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Int" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int8" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.String" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int8" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int16" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int32" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int64" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int16" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int32" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int64" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int16" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int16" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int64?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int8?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int16?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.String?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.OneZero?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int8?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int32?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int16?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int32?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int64?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int8?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int16?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Swift.Int16?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decodeIfPresent" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.USwift.Int32?" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="decodeNil" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Bool" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="isAtEnd" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Bool" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="nestedContainer" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.KeyedDecodingContainer(Swift.OneZero)" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="keyedBy" privateName="keyedBy" type="Meta" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="nestedUnkeyedContainer" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.UnkeyedDecodingContainer" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="superDecoder" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Decoder" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.UnkeyedEncodingContainer" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
            <members>
               <func name="codingPath" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Array(Swift.CodingKey)" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="count" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Int" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="contentsOf" privateName="contentsOf" type="Swift.OneZero" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="contentsOf" privateName="contentsOf" type="Swift.OneZero" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="contentsOf" privateName="contentsOf" type="Swift.OneZero" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="contentsOf" privateName="contentsOf" type="Swift.OneZero" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="contentsOf" privateName="contentsOf" type="Swift.OneZero" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="encode" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encodeConditional" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="encodeNil" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="" hasThrows="True" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="nestedContainer" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.KeyedEncodingContainer(Swift.OneZero)" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
                  <parameterlists>
                     <parameterlist index="0">
                        <parameter publicName="keyedBy" privateName="keyedBy" type="Meta" isVariadic="False"/>
                     </parameterlist>
                  </parameterlists>
               </func>
               <func name="nestedUnkeyedContainer" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.UnkeyedEncodingContainer" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
               <func name="superEncoder" isPossiblyIncomplete="True" operatorKind="None" isStatic="False" returnType="Swift.Encoder" hasThrows="False" accessibility="Public" isProperty="False" isFinal="False" isDeprecated="False" isUnavailable="False" isOptional="False" isRequired="False" isConvenienceInit="False" objcSelector = "">
               </func>
            </members>
         </typedeclaration>
         <typedeclaration kind="protocol" name="Swift.UnsignedInteger" accessibility="Public" isObjC="False" isFinal="False" isDeprecated="False" isUnavailable="False">
         </typedeclaration>
      </Module>
   </modulelist>
</xamreflect>
