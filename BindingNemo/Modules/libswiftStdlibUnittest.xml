<manualbinderfinder version="1.011" encoding="UTF - 8">
<Module name="libswiftStdlibUnittest">
	<Classes>
		<Class name="StdlibUnittest.Box">
			<Property>
				<name="value">
				<signature="var value: Self">
				<Static="False">
			</Property>
		</Class>
		<Class name="StdlibUnittest.GenericMinimalHashableClass">
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="identity">
				<signature="var identity: Int">
				<Static="False">
			</Property>
			<Property>
				<name="value">
				<signature="var value: Self">
				<Static="False">
			</Property>
			<Method>
				<name="==">
				<signature="static func ==(StdlibUnittest.GenericMinimalHashableClass(???), StdlibUnittest.GenericMinimalHashableClass(???)) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="StdlibUnittest.GenericMinimalHashableClass(???">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Class>
		<Class name="StdlibUnittest.LifetimeTracked">
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="identity">
				<signature="var identity: Int">
				<Static="False">
			</Property>
			<Property>
				<name="instances">
				<signature="static var instances: Int">
				<Static="False">
			</Property>
			<Property>
				<name="serialNumber">
				<signature="var serialNumber: Int">
				<Static="False">
			</Property>
			<Property>
				<name="value">
				<signature="var value: Int">
				<Static="False">
			</Property>
			<Method>
				<name="==">
				<signature="static func ==(StdlibUnittest.LifetimeTracked, StdlibUnittest.LifetimeTracked) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="StdlibUnittest.LifetimeTracked">
					<Parameter="StdlibUnittest.LifetimeTracked">
				</Parameters>
			</Method>
			<Method>
				<name="advanced">
				<signature="func advanced(by: Int) -> StdlibUnittest.LifetimeTracked">
				<isStatic="False">
				<returnType="StdlibUnittest.LifetimeTracked">
				<Parameters>
					<Parameter="by: Int">
				</Parameters>
			</Method>
			<Method>
				<name="distance">
				<signature="func distance(to: StdlibUnittest.LifetimeTracked) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="to: StdlibUnittest.LifetimeTracked">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Class>
		<Class name="StdlibUnittest.MinimalHashableClass">
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="equalImpl">
				<signature="static var equalImpl: StdlibUnittest.ResettableValue((Int, Int)-)Bool>">
				<Static="False">
			</Property>
			<Property>
				<name="hashIntoImpl">
				<signature="static var hashIntoImpl: StdlibUnittest.ResettableValue((Int, Swift.Hasher)-)()>">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="identity">
				<signature="var identity: Int">
				<Static="False">
			</Property>
			<Property>
				<name="timesEqualEqualWasCalled">
				<signature="static var timesEqualEqualWasCalled: Int">
				<Static="False">
			</Property>
			<Property>
				<name="timesHashIntoWasCalled">
				<signature="static var timesHashIntoWasCalled: Int">
				<Static="False">
			</Property>
			<Property>
				<name="value">
				<signature="var value: Int">
				<Static="False">
			</Property>
			<Method>
				<name="==">
				<signature="static func ==(StdlibUnittest.MinimalHashableClass, StdlibUnittest.MinimalHashableClass) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="StdlibUnittest.MinimalHashableClass">
					<Parameter="StdlibUnittest.MinimalHashableClass">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Class>
		<Class name="StdlibUnittest.ResettableValue">
			<Property>
				<name="defaultValue">
				<signature="var defaultValue: Self">
				<Static="False">
			</Property>
			<Property>
				<name="value">
				<signature="var value: Self">
				<Static="False">
			</Property>
			<Method>
				<name="reset">
				<signature="func reset()">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Class>
		<Class name="StdlibUnittest.TestSuite">
			<Method>
				<name="setUp">
				<signature="func setUp()">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="tearDown">
				<signature="func tearDown()">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Class>
		<Class name="StdlibUnittest.TypeIndexed">
			<Method>
				<name="reset">
				<signature="func reset()">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Class>
	</Classes>
	<Structs>
		<Struct name="StdlibUnittest.AssertionResult">
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Method>
				<name="withDescription">
				<signature="func withDescriptionSwift.String -> StdlibUnittest.AssertionResult">
				<isStatic="False">
				<returnType="StdlibUnittest.AssertionResult">
				<Parameters>
				</Parameters>
			</Method>
		</Struct>
		<Struct name="StdlibUnittest.CustomPrintableValue">
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="debugDescriptionImpl">
				<signature="static var debugDescriptionImpl: StdlibUnittest.ResettableValue((Int, Int)-)Swift.String>">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="descriptionImpl">
				<signature="static var descriptionImpl: StdlibUnittest.ResettableValue((Int, Int)-)Swift.String>">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="identity">
				<signature="var identity: Int">
				<Static="False">
			</Property>
			<Property>
				<name="timesDebugDescriptionWasCalled">
				<signature="static var timesDebugDescriptionWasCalled: StdlibUnittest.ResettableValue(Int)">
				<Static="False">
			</Property>
			<Property>
				<name="timesDescriptionWasCalled">
				<signature="static var timesDescriptionWasCalled: StdlibUnittest.ResettableValue(Int)">
				<Static="False">
			</Property>
			<Property>
				<name="value">
				<signature="var value: Int">
				<Static="False">
			</Property>
			<Method>
				<name="advanced">
				<signature="func advanced(by: Int) -> StdlibUnittest.CustomPrintableValue">
				<isStatic="False">
				<returnType="StdlibUnittest.CustomPrintableValue">
				<Parameters>
					<Parameter="by: Int">
				</Parameters>
			</Method>
			<Method>
				<name="distance">
				<signature="func distance(to: StdlibUnittest.CustomPrintableValue) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="to: StdlibUnittest.CustomPrintableValue">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="StdlibUnittest.GenericMinimalHashableValue">
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="identity">
				<signature="var identity: Int">
				<Static="False">
			</Property>
			<Property>
				<name="value">
				<signature="var value: Self">
				<Static="False">
			</Property>
			<Method>
				<name="==">
				<signature="static func ==(StdlibUnittest.GenericMinimalHashableValue(???), StdlibUnittest.GenericMinimalHashableValue(???)) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="StdlibUnittest.GenericMinimalHashableValue(???">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="StdlibUnittest.LinearCongruentialGenerator">
			<Method>
				<name="next">
				<signature="func next() -> Swift.UInt64">
				<isStatic="False">
				<returnType="Swift.UInt64">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="StdlibUnittest.MinimalComparableValue">
			<Property>
				<name="equalImpl">
				<signature="static var equalImpl: StdlibUnittest.ResettableValue((Int, Int)-)Bool>">
				<Static="False">
			</Property>
			<Property>
				<name="identity">
				<signature="var identity: Int">
				<Static="False">
			</Property>
			<Property>
				<name="lessImpl">
				<signature="static var lessImpl: StdlibUnittest.ResettableValue((Int, Int)-)Bool>">
				<Static="False">
			</Property>
			<Property>
				<name="timesEqualEqualWasCalled">
				<signature="static var timesEqualEqualWasCalled: StdlibUnittest.ResettableValue(Int)">
				<Static="False">
			</Property>
			<Property>
				<name="timesLessWasCalled">
				<signature="static var timesLessWasCalled: StdlibUnittest.ResettableValue(Int)">
				<Static="False">
			</Property>
			<Property>
				<name="value">
				<signature="var value: Int">
				<Static="False">
			</Property>
			<Method>
				<name="<">
				<signature="static func ((StdlibUnittest.MinimalComparableValue, StdlibUnittest.MinimalComparableValue) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="(StdlibUnittest.MinimalComparableValue">
					<Parameter="StdlibUnittest.MinimalComparableValue">
				</Parameters>
			</Method>
			<Method>
				<name="==">
				<signature="static func ==(StdlibUnittest.MinimalComparableValue, StdlibUnittest.MinimalComparableValue) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="StdlibUnittest.MinimalComparableValue">
					<Parameter="StdlibUnittest.MinimalComparableValue">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="StdlibUnittest.MinimalEquatableValue">
			<Property>
				<name="equalImpl">
				<signature="static var equalImpl: StdlibUnittest.ResettableValue((Int, Int)-)Bool>">
				<Static="False">
			</Property>
			<Property>
				<name="identity">
				<signature="var identity: Int">
				<Static="False">
			</Property>
			<Property>
				<name="timesEqualEqualWasCalled">
				<signature="static var timesEqualEqualWasCalled: Int">
				<Static="False">
			</Property>
			<Property>
				<name="value">
				<signature="var value: Int">
				<Static="False">
			</Property>
			<Method>
				<name="==">
				<signature="static func ==(StdlibUnittest.MinimalEquatableValue, StdlibUnittest.MinimalEquatableValue) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="StdlibUnittest.MinimalEquatableValue">
					<Parameter="StdlibUnittest.MinimalEquatableValue">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="StdlibUnittest.MinimalHashableValue">
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="equalImpl">
				<signature="static var equalImpl: StdlibUnittest.ResettableValue((Int, Int)-)Bool>">
				<Static="False">
			</Property>
			<Property>
				<name="hashIntoImpl">
				<signature="static var hashIntoImpl: StdlibUnittest.ResettableValue((Int, Swift.Hasher)-)()>">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="identity">
				<signature="var identity: Int">
				<Static="False">
			</Property>
			<Property>
				<name="timesEqualEqualWasCalled">
				<signature="static var timesEqualEqualWasCalled: Int">
				<Static="False">
			</Property>
			<Property>
				<name="timesHashIntoWasCalled">
				<signature="static var timesHashIntoWasCalled: Int">
				<Static="False">
			</Property>
			<Property>
				<name="value">
				<signature="var value: Int">
				<Static="False">
			</Property>
			<Method>
				<name="==">
				<signature="static func ==(StdlibUnittest.MinimalHashableValue, StdlibUnittest.MinimalHashableValue) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="StdlibUnittest.MinimalHashableValue">
					<Parameter="StdlibUnittest.MinimalHashableValue">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="StdlibUnittest.MinimalStrideableValue">
			<Property>
				<name="equalImpl">
				<signature="static var equalImpl: StdlibUnittest.ResettableValue((Int, Int)-)Bool>">
				<Static="False">
			</Property>
			<Property>
				<name="identity">
				<signature="var identity: Int">
				<Static="False">
			</Property>
			<Property>
				<name="lessImpl">
				<signature="static var lessImpl: StdlibUnittest.ResettableValue((Int, Int)-)Bool>">
				<Static="False">
			</Property>
			<Property>
				<name="timesAdvancedWasCalled">
				<signature="static var timesAdvancedWasCalled: StdlibUnittest.ResettableValue(Int)">
				<Static="False">
			</Property>
			<Property>
				<name="timesDistanceWasCalled">
				<signature="static var timesDistanceWasCalled: StdlibUnittest.ResettableValue(Int)">
				<Static="False">
			</Property>
			<Property>
				<name="timesEqualEqualWasCalled">
				<signature="static var timesEqualEqualWasCalled: StdlibUnittest.ResettableValue(Int)">
				<Static="False">
			</Property>
			<Property>
				<name="timesLessWasCalled">
				<signature="static var timesLessWasCalled: StdlibUnittest.ResettableValue(Int)">
				<Static="False">
			</Property>
			<Property>
				<name="value">
				<signature="var value: Int">
				<Static="False">
			</Property>
			<Method>
				<name="<">
				<signature="static func ((StdlibUnittest.MinimalStrideableValue, StdlibUnittest.MinimalStrideableValue) -) Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="(StdlibUnittest.MinimalStrideableValue">
					<Parameter="StdlibUnittest.MinimalStrideableValue">
				</Parameters>
			</Method>
			<Method>
				<name="==">
				<signature="static func ==(StdlibUnittest.MinimalStrideableValue, StdlibUnittest.MinimalStrideableValue) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="StdlibUnittest.MinimalStrideableValue">
					<Parameter="StdlibUnittest.MinimalStrideableValue">
				</Parameters>
			</Method>
			<Method>
				<name="advanced">
				<signature="func advanced(by: Int) -> StdlibUnittest.MinimalStrideableValue">
				<isStatic="False">
				<returnType="StdlibUnittest.MinimalStrideableValue">
				<Parameters>
					<Parameter="by: Int">
				</Parameters>
			</Method>
			<Method>
				<name="distance">
				<signature="func distance(to: StdlibUnittest.MinimalStrideableValue) -> Int">
				<isStatic="False">
				<returnType="Int">
				<Parameters>
					<Parameter="to: StdlibUnittest.MinimalStrideableValue">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="StdlibUnittest.Observation1UInt">
			<Property>
				<name="data1">
				<signature="var data1: UInt">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="StdlibUnittest.Observation3Int">
			<Property>
				<name="data1">
				<signature="var data1: Int">
				<Static="False">
			</Property>
			<Property>
				<name="data2">
				<signature="var data2: Int">
				<Static="False">
			</Property>
			<Property>
				<name="data3">
				<signature="var data3: Int">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="StdlibUnittest.Observation4Int">
			<Property>
				<name="data1">
				<signature="var data1: Int">
				<Static="False">
			</Property>
			<Property>
				<name="data2">
				<signature="var data2: Int">
				<Static="False">
			</Property>
			<Property>
				<name="data3">
				<signature="var data3: Int">
				<Static="False">
			</Property>
			<Property>
				<name="data4">
				<signature="var data4: Int">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="StdlibUnittest.Observation4UInt">
			<Property>
				<name="data1">
				<signature="var data1: UInt">
				<Static="False">
			</Property>
			<Property>
				<name="data2">
				<signature="var data2: UInt">
				<Static="False">
			</Property>
			<Property>
				<name="data3">
				<signature="var data3: UInt">
				<Static="False">
			</Property>
			<Property>
				<name="data4">
				<signature="var data4: UInt">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="StdlibUnittest.Observation5Int">
			<Property>
				<name="data1">
				<signature="var data1: Int">
				<Static="False">
			</Property>
			<Property>
				<name="data2">
				<signature="var data2: Int">
				<Static="False">
			</Property>
			<Property>
				<name="data3">
				<signature="var data3: Int">
				<Static="False">
			</Property>
			<Property>
				<name="data4">
				<signature="var data4: Int">
				<Static="False">
			</Property>
			<Property>
				<name="data5">
				<signature="var data5: Int">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="StdlibUnittest.Observation9Int">
			<Property>
				<name="data1">
				<signature="var data1: Int">
				<Static="False">
			</Property>
			<Property>
				<name="data2">
				<signature="var data2: Int">
				<Static="False">
			</Property>
			<Property>
				<name="data3">
				<signature="var data3: Int">
				<Static="False">
			</Property>
			<Property>
				<name="data4">
				<signature="var data4: Int">
				<Static="False">
			</Property>
			<Property>
				<name="data5">
				<signature="var data5: Int">
				<Static="False">
			</Property>
			<Property>
				<name="data6">
				<signature="var data6: Int">
				<Static="False">
			</Property>
			<Property>
				<name="data7">
				<signature="var data7: Int">
				<Static="False">
			</Property>
			<Property>
				<name="data8">
				<signature="var data8: Int">
				<Static="False">
			</Property>
			<Property>
				<name="data9">
				<signature="var data9: Int">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="StdlibUnittest.OpaqueValue">
			<Property>
				<name="identity">
				<signature="var identity: Int">
				<Static="False">
			</Property>
			<Property>
				<name="value">
				<signature="var value: Self">
				<Static="False">
			</Property>
		</Struct>
		<Struct name="StdlibUnittest.SourceLoc">
			<Property>
				<name="comment">
				<signature="var comment: String?">
				<Static="False">
			</Property>
			<Property>
				<name="file">
				<signature="var file: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="line">
				<signature="var line: UInt">
				<Static="False">
			</Property>
			<Method>
				<name="withCurrentLoc">
				<signature="func withCurrentLoc(: Swift.String, line: UInt) -> StdlibUnittest.SourceLocStack">
				<isStatic="False">
				<returnType="StdlibUnittest.SourceLocStack">
				<Parameters>
					<Parameter=": Swift.String">
					<Parameter="line: UInt">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="StdlibUnittest.SourceLocStack">
			<Method>
				<name="print">
				<signature="func print()">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="pushIf">
				<signature="func pushIf(: Bool, file: Swift.String, line: UInt) -> StdlibUnittest.SourceLocStack">
				<isStatic="False">
				<returnType="StdlibUnittest.SourceLocStack">
				<Parameters>
					<Parameter=": Bool">
					<Parameter="file: Swift.String">
					<Parameter="line: UInt">
				</Parameters>
			</Method>
			<Method>
				<name="with">
				<signature="func withStdlibUnittest.SourceLoc -> StdlibUnittest.SourceLocStack">
				<isStatic="False">
				<returnType="StdlibUnittest.SourceLocStack">
				<Parameters>
				</Parameters>
			</Method>
			<Method>
				<name="withCurrentLoc">
				<signature="func withCurrentLoc(file: Swift.String, line: UInt) -> StdlibUnittest.SourceLocStack">
				<isStatic="False">
				<returnType="StdlibUnittest.SourceLocStack">
				<Parameters>
					<Parameter="file: Swift.String">
					<Parameter="line: UInt">
				</Parameters>
			</Method>
		</Struct>
		<Struct name="StdlibUnittest.TypeIdentifier">
			<Property>
				<name="debugDescription">
				<signature="var debugDescription: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Property>
				<name="value">
				<signature="var value: Existential Metatype Swift.Any">
				<Static="False">
			</Property>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
		</Struct>
	</Structs>
	<Enums>
		<Enum name="StdlibUnittest.ExpectedComparisonResult">
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Property>
				<name="hashValue">
				<signature="var hashValue: Int">
				<Static="False">
			</Property>
			<Method>
				<name="==">
				<signature="static func ==(StdlibUnittest.ExpectedComparisonResult, StdlibUnittest.ExpectedComparisonResult) -> Bool">
				<isStatic="True">
				<returnType="Bool">
				<Parameters>
					<Parameter="StdlibUnittest.ExpectedComparisonResult">
					<Parameter="StdlibUnittest.ExpectedComparisonResult">
				</Parameters>
			</Method>
			<Method>
				<name="flip">
				<signature="func flip() -> StdlibUnittest.ExpectedComparisonResult">
				<isStatic="False">
				<returnType="StdlibUnittest.ExpectedComparisonResult">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="hash">
				<signature="func hash(into: Swift.Hasher)">
				<isStatic="False">
				<returnType="()">
				<Parameters>
					<Parameter="into: Swift.Hasher">
				</Parameters>
			</Method>
			<Method>
				<name="isEQ">
				<signature="func isEQ() -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="isGE">
				<signature="func isGE() -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="isGT">
				<signature="func isGT() -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="isLE">
				<signature="func isLE() -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="isLT">
				<signature="func isLT() -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
			<Method>
				<name="isNE">
				<signature="func isNE() -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Enum>
		<Enum name="StdlibUnittest.OSVersion">
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
		</Enum>
		<Enum name="StdlibUnittest.RaceTestObservationEvaluation">
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
		</Enum>
		<Enum name="StdlibUnittest.SwiftRuntime">
			<Method>
				<name="metadataKind">
				<signature="static func metadataKind(of: Self) -> Swift.String">
				<isStatic="True">
				<returnType="Swift.String">
				<Parameters>
					<Parameter="of: Self">
				</Parameters>
			</Method>
		</Enum>
		<Enum name="StdlibUnittest.TestRunPredicate">
			<Property>
				<name="description">
				<signature="var description: Swift.String">
				<Static="False">
			</Property>
			<Method>
				<name="evaluate">
				<signature="func evaluate() -> Bool">
				<isStatic="False">
				<returnType="Bool">
				<Parameters>
					<Parameter="">
				</Parameters>
			</Method>
		</Enum>
	</Enums>
	<Protocols>
		<Protocol name="StdlibUnittest.RaceTestWithPerTrialData">
			<Method>
				<name="evaluateObservations">
				<signature="func evaluateObservations(Swift.Array(Self.Observation), StdlibUnittest.RaceTestObservationEvaluation)">
				<isStatic="False">
			</Method>
			<Method>
				<name="makeRaceData">
				<signature="func makeRaceData() -> Self.RaceData">
				<isStatic="False">
			</Method>
			<Method>
				<name="makeThreadLocalData">
				<signature="func makeThreadLocalData() -> Self.ThreadLocalData">
				<isStatic="False">
			</Method>
			<Method>
				<name="thread1">
				<signature="func thread1(Self.RaceData, Self.ThreadLocalData) -> Self.Observation">
				<isStatic="False">
			</Method>
		</Protocol>
	</Protocols>
</Module>
