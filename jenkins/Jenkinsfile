#!/bin/groovy

// global variables
repository = "xamarin/maccore"
isPr = false
branchName = null
workspace = null
gitHash = null
earlyExit = false

packageUrl = null
utils = null
errorMessage = null
currentStage = null
resultMessage = ""

packageFilename = null
packages = null
deviceTestZipUrl = null

def githubFindModifiedFiles ()
{
    def base = null
    if (isPr) {
        sh ("cd '${workspace}/maccore' && git fetch --no-tags --progress git@github.com:${repository} +refs/pull/${env.CHANGE_ID}/*:refs/remotes/origin/pr/${env.CHANGE_ID}/*")
        // The dot at the end is significant: https://stackoverflow.com/a/463027/183422
        // Otherwise we'll get files from commits only done on the branch to be merged into as well.
        base = "origin/pr/${env.CHANGE_ID}/merge^."
    } else {
        base = "HEAD^"
    }
    return sh (script: "cd '${workspace}/maccore' && git diff '${base}..HEAD' --name-only", returnStdout: true).split ("\n")
}

def checkModifiedFilesForPrefix (prefix)
{
    def files = githubFindModifiedFiles ()
    echo ("Checking ${files.size ()} modified files:\n${files}")
    for (int i = 0; i < files.size (); i++) {
        def file = files [i]
        if (file.startsWith (prefix))
            return true
    }
    return false
}

def githubAddComment (url, markdown)
{
    def json = groovy.json.JsonOutput.toJson ([body: markdown])
    def jsonFile = ".github-comment-tmp.json"
    try {
        writeFile (file: "${jsonFile}", text: "${json}")
        sh ("cat '${jsonFile}'")
        withCredentials ([string (credentialsId: 'macios_github_comment_token', variable: 'GITHUB_COMMENT_TOKEN')]) {
            sh ("curl -i -H 'Authorization: token ${GITHUB_COMMENT_TOKEN}' ${url} --data '@${jsonFile}'")
        }
    } finally {
        sh ("rm -f ${jsonFile}")
    }
}

def commentOnCommit (repository, gitHash, markdown)
{
    githubAddComment ("https://api.github.com/repos/${repository}/commits/${gitHash}/comments", markdown)
}

def commentOnPullRequest (repository, pullRequestId, markdown)
{
    githubAddComment ("https://api.github.com/repos/${repository}/issues/${pullRequestId}/comments", markdown)
}

def addComment (repository, pullRequestId, gitHash, markdown)
{
    if (pullRequestId != null && pullRequestId != "" && pullRequestId != "null") {
        commentOnPullRequest (repository, pullRequestId, markdown)
    } else {
        commentOnCommit (repository, gitHash, markdown)
    }
}

def reportFinalStatus (repository, err, pullRequestId, gitHash, currentStage, extraContent = null)
{
    node {
        def comment = null
        def status = currentBuild.currentResult

        if ("${status}" == "SUCCESS" && err == "") {
            comment = "✅ [Jenkins job](${env.RUN_DISPLAY_URL}) for ${gitHash} succeeded"
        } else {
            comment = "🔥 [Jenkins job](${env.RUN_DISPLAY_URL}) for ${gitHash} failed in stage '${currentStage}' 🔥"
            if (err != "")
                comment += " : ${err}"
            manager.addErrorBadge (comment)
            manager.buildFailure ()
        }
        comment += "\n"

        if (extraContent != null && extraContent != "")
            comment += "\n" + extraContent

        addComment (repository, pullRequestId, gitHash, comment)
    }
}

def uploadFilesToAzure (pattern, virtualPath)
{
    def files = findFiles (glob: pattern)
    if (files.length > 0) {
        step ([
            $class: 'WAStoragePublisher',
            allowAnonymousAccess: true,
            cleanUpContainer: false,
            cntPubAccess: true,
            containerName: "wrench",
            doNotFailIfArchivingReturnsNothing: false,
            doNotUploadIndividualFiles: false,
            doNotWaitForPreviousBuild: true,
            excludeFilesPath: '',
            filesPath: pattern,
            storageAccName: 'bosstoragemirror',
            storageCredentialId: 'bc6a99d18d7d9ca3f6bf6b19e364d564',
            uploadArtifactsOnlyIfSuccessful: false,
            uploadZips: false,
            virtualPath: virtualPath
        ])
        echo ("Uploaded ${files.length} files for the pattern '${pattern}' to ${virtualPath}")
    } else {
        echo ("No files to upload for the pattern '${pattern}'")
    }

}

try {
    timestamps {
        // Compiling Swift apparently requires a machine that supports metal,
        // otherwise there will be linker errors because CMake decides to not link
        // with MetalKit (resulting in undefined symbols errors). Any mac
        // introduced in or after 2012 should be Metal-compatible.
        node ('xamarin-macios && supports-metal && macos-10.14') {
            try {
                timeout (time: 12, unit: 'HOURS') {
                    // Hard-code a workspace, since branch-based and PR-based
                    // builds would otherwise use different workspaces, which
                    // wastes a lot of disk space.
                    workspace = "${env.HOME}/jenkins/workspace/binding-tools-for-swift"
                    withEnv ([
                        "PATH=/Library/Frameworks/Mono.framework/Versions/Current/Commands:${env.PATH}",
                        "SOM_PATH=${workspace}/maccore/tools/tom-swifty/Pack-Man/binding-tools-for-swift",
                        "WORKSPACE=${workspace}"
                        ]) {
                        sh ("mkdir -p '${workspace}/maccore'")
                        dir ("${workspace}") {
                            dir ("maccore") {
                                stage ('Checkout') {
                                    echo ("Executing on ${env.NODE_NAME}")
                                    currentStage = "${STAGE_NAME}"
                                    sh ('env') // print out environment for debug purposes
                                    scmVars = checkout scm
                                    isPr = (env.CHANGE_ID && !env.CHANGE_ID.empty ? true : false)
                                    branchName = env.BRANCH_NAME
                                    if (isPr) {
                                        gitHash = sh (script: "git log -1 --pretty=%H refs/remotes/origin/${env.BRANCH_NAME}", returnStdout: true).trim ()
                                    } else {
                                        gitHash = scmVars.GIT_COMMIT
                                    }
                                    sh ('git clean -xffd')
                                    sh ('git submodule foreach --recursive git clean -xffd')
                                }
                            }

                            // Check if any SoM files were modified, and if not then bail out immediately.
                            // This is done after the checkout stage, since we need the repository to calculate the list of modified files.
                            // The checkout stage also sets the current hash, which is required to properly report results back to github.
                            stage ('Precheck') {
                                echo ("Executing on ${env.NODE_NAME}")
                                currentStage = "${STAGE_NAME}"
                                earlyExit = !checkModifiedFilesForPrefix ("tools/tom-swifty");
                            }
                            if (earlyExit) {
                                def msg = "ℹ️ Not executing Binding Tools for Swift because no required files were modified ℹ️"
                                echo (msg)
                                resultMessage += msg + "\n"
                                return
                            }

                            dir ("maccore") {
                                stage ('Provision') {
                                    withCredentials ([string (credentialsId: 'codesign_keychain_pw', variable: 'LOGIN_KEYCHAIN_PASSWORD')]) {
                                        echo ("Executing on ${env.NODE_NAME}")
                                        currentStage = "${STAGE_NAME}"
                                        sh ('./tools/tom-swifty/jenkins/provision-deps.sh')
                                    }
                                }
                                stage ('Build Swift') {
                                    echo ("Executing on ${env.NODE_NAME}")
                                    currentStage = "${STAGE_NAME}"
                                    sh ('./tools/tom-swifty/jenkins/build-swift.sh --publish')
                                    dir ("tools/tom-swifty/Pack-Man") {
                                        uploadFilesToAzure ("SwiftToolchain-*.zip", "binding-tools-for-swift/toolchains")
                                    }
                                }
                                stage ('Build') {
                                    echo ("Executing on ${env.NODE_NAME}")
                                    currentStage = "${STAGE_NAME}"
                                    sh ("SOM_BRANCH=${branchName} ./tools/tom-swifty/jenkins/build.sh")
                                }
                            }
                            stage ('Package') {
                                echo ("Executing on ${env.NODE_NAME}")
                                currentStage = "${STAGE_NAME}"
                                sh ('./maccore/tools/tom-swifty/jenkins/build-package.sh')
                                sh (script: 'ls -la package', returnStatus: true /* don't throw exceptions if something goes wrong */)
                                packages = findFiles (glob: "package/*");
                                if (packages.length > 0) {
                                    packageFilename = packages [0].name
                                    echo ("Created ${packageFilename}")
                                }
                            }

                            stage ('Sign') {
                                currentStage = "${STAGE_NAME}"
                                if (packageFilename != null) {
                                    echo "Created package: ${packageFilename}"
                                    withCredentials ([string(credentialsId: 'codesign_keychain_pw', variable: 'PRODUCTSIGN_KEYCHAIN_PASSWORD')]) {
                                        sh ("./maccore/tools/tom-swifty/jenkins/productsign.sh")
                                    }
                                } else {
                                    echo ("Nothing to sign")
                                }
                            }

                            stage('Upload to Azure') {
                                currentStage = "${STAGE_NAME}"
                                uploadFilesToAzure ("package/*", "binding-tools-for-swift/${branchName}/${gitHash}/${env.BUILD_NUMBER}/")
                            }

                            stage ('Publish builds to GitHub') {
                                currentStage = "${STAGE_NAME}"
                                utils = load ("./maccore/tools/tom-swifty/jenkins/utils.groovy")
                                if (packageFilename != null) {
                                    packageUrl = "https://bosstoragemirror.blob.core.windows.net/wrench/binding-tools-for-swift/${branchName}/${gitHash}/${env.BUILD_NUMBER}/package/${packageFilename}"
                                    resultMessage += "✅ Package: [${packageFilename}](${packageUrl})\n"
                                    utils.reportGitHubStatus (gitHash, 'PKG-Binding-Tools-for-Swift', "${packageUrl}", 'SUCCESS', "${packageFilename}")
                                }
                            }

                            stage ('Install Provisioning Profiles') {
                                currentStage = "${STAGE_NAME}"
                                withCredentials ([string (credentialsId: 'codesign_keychain_pw', variable: 'LOGIN_KEYCHAIN_PASSWORD')]) {
                                    sh ("${workspace}/maccore/tools/install-qa-provisioning-profiles.sh --keychain=binding-tools-for-swift -v")
                                    sh ("${workspace}/maccore/tools/unlock-keychain.sh --keychain=binding-tools-for-swift")
                                }
                            }

                            stage ('Run tests') {
                                currentStage = "${STAGE_NAME}"
                                echo ("Executing on ${env.NODE_NAME}")
                                try {
                                    sh ("./maccore/tools/tom-swifty/jenkins/run-tests.sh")
                                    resultMessage += "✅ Tests passed\n"
                                } catch (e) {
                                    def msg = "🔥 Tests failed: ${e}"
                                    echo (msg)
                                    resultMessage += msg + "\n"
                                    throw e
                                }
                                // Upload the zip of the device tests to Azure.
                                dir ("maccore/tools/tom-swifty/tests/tom-swifty-test") {
                                    def deviceTestZip = "*.zip"
                                    def files = findFiles (glob: deviceTestZip)
                                    if (files.length > 0) {
                                        uploadFilesToAzure (deviceTestZip, "binding-tools-for-swift/${branchName}/${gitHash}/${env.BUILD_NUMBER}/")
                                        deviceTestZipUrl = "https://bosstoragemirror.blob.core.windows.net/wrench/binding-tools-for-swift/${branchName}/${gitHash}/${env.BUILD_NUMBER}/tomswiftydevicetests.zip"
                                    }
                                }
                            }

                            currentStage = null
                        } // dir
                    } // withEnv
                } // timeout
            } finally {
                sh (script: "cd ${workspace}/maccore && git clean -xffd", returnStatus: true /* don't throw exceptions if something goes wrong */)
                sh (script: "cd ${workspace}/swift/swift && git clean -xffd", returnStatus: true /* don't throw exceptions if something goes wrong */)
                sh (script: "rm -Rf ${workspace}/swift/build", returnStatus: true /* don't throw exceptions if something goes wrong */)
                sh (script: "rm -Rf ${workspace}/package", returnStatus: true /* don't throw exceptions if something goes wrong */)
            } // try
        } // node

        if (earlyExit)
            return

        // Run the device tests after the normal tests have completed, since they need to run on a different bot
        def runDeviceTests = false
        if (deviceTestZipUrl == null) {
            def msg = "🚫 Not executing device tests because there were no device tests to run (did they fail to build?) 🚫"
            echo (msg)
            resultMessage += msg + "\n"
        } else {
            runDeviceTests = true
        }
        if (runDeviceTests) {
            node ('xamarin-macios && xamarin-macios-device-tests') {
                try {
                    timeout (time: 30, unit: 'MINUTES') {
                        // Hard-code a workspace, since branch-based and PR-based
                        // builds would otherwise use different workspaces, which
                        // wastes a lot of disk space.
                        workspace = "${env.HOME}/jenkins/workspace/binding-tools-for-swift"
                        withEnv ([
                            "PATH=/Library/Frameworks/Mono.framework/Versions/Current/Commands:${env.PATH}",
                            "WORKSPACE=${workspace}"
                            ]) {
                            // Download & unzip the tests we want to run
                            stage ('Run device tests') {
                                sh ("rm -Rf '${workspace}/device-tests'")
                                sh ("mkdir -p '${workspace}/device-tests'")
                                dir ("${workspace}/device-tests") {
                                    currentStage = "${STAGE_NAME}"
                                    echo ("Executing on ${env.NODE_NAME}")
                                    try {
                                        sh ("curl -f -L '${deviceTestZipUrl}' --output devicetests.zip")
                                        sh ("unzip -d tmp devicetests.zip")
                                        sh ("cd tmp && ./runtests.sh")
                                        resultMessage += "✅ Device tests passed\n"
                                    } catch (Exception e) {
                                        def msg = "🔥 Device tests failed: ${e}"
                                        echo (msg)
                                        resultMessage += msg + "\n"
                                        throw e
                                    }
                                } // dir

                                currentStage = null
                            } // stage
                        } // withEnv
                    } // timeout
                } finally {
                    sh (script: "rm -Rf ${workspace}/device-tests", returnStatus: true /* don't throw exceptions if something goes wrong */)
                } // try
            } // node
        } // if (runDeviceTests)
    } // timestamps
    reportFinalStatus (repository, "", env.CHANGE_ID, gitHash, "${currentStage}", resultMessage)
} catch (err) {
    reportFinalStatus (repository, "${err}", env.CHANGE_ID, gitHash, "${currentStage}", resultMessage)
}
