# Pipeline for Binding Tools for Swift.
#
# yaml help: https://aka.ms/yaml

parameters:
- name: RunningTests
  type: boolean
  default: true # we can change this to true or check the box in pipelines when we want to run tests

- name: provisionatorChannel
  type: string
  default: 'latest'

trigger:
  branches:
    include:
    - '*'

pr:
  autoCancel: true
  branches:
    include:
    - '*'

resources:
  repositories:
  - repository: maccore
    type: github
    name: xamarin/maccore
    ref: refs/heads/main
    endpoint: xamarin

variables:
  - group: xamops-azdev-secrets
  - group: Xamarin-Secrets
  - name: GitHub.Token                                          # Override the GitHub.Token setting defined in the Xamarin Release group
    value: $(github--pat--vs-mobiletools-engineering-service2)  # Use a token dedicated to critical production workflows and help avoid GitHub throttling
  - name: PROVISIONATOR_CHANNEL
    value: ${{ parameters.provisionatorChannel }}

jobs:
- job: ContinuousIntegration
  timeoutInMinutes: 720 # 12 hours (but 6 is max on hosted agents)
  pool:
    vmImage: 'macOS-10.15'

  steps:
  - checkout: maccore
    clean: true
    persistCredentials: true
  - checkout: self
    clean: true

  - bash: |
      # set env vars used by bash scripts so that we do not need to worry about locations after the checkout
      maccoreTop="$(Build.SourcesDirectory)/maccore"
      btfsTop="$(Build.SourcesDirectory)/binding-tools-for-swift"
      echo "##vso[task.setvariable variable=MACCORE_TOP]$maccoreTop"
      echo "##vso[task.setvariable variable=BTFS_TOP]$btfsTop"
      echo "$(System.PullRequest.SourceBranch)"
    displayName: 'Configure build'

  - bash: |
      if [ -L /Applications/Xcode_12.0.1.app ]
      then
        unlink /Applications/Xcode_12.0.1.app
      fi
      if [ -L /Applications/Xcode_12.0.0.app ]
      then
        unlink /Applications/Xcode_12.0.0.app
      fi
      if [ -L /Applications/Xcode.app ]
      then
        unlink /Applications/Xcode.app
      fi
      ln -s /Applications/Xcode_12.app /Applications/Xcode_12.0.1.app
      ln -s /Applications/Xcode_12.app /Applications/Xcode.app
      xcode-select -p
    displayName: 'Managing Xcode Symlinks'

  - bash: |
      set -x
      set -e
      rm -f ~/Library/Caches/com.xamarin.provisionator/Provisions/*p12
      rm -f ~/Library/Caches/com.xamarin.provisionator/Provisions/*mobileprovision
      cd $(System.DefaultWorkingDirectory)
      ./maccore/tools/install-qa-provisioning-profiles.sh -v
    displayName: 'Add provisioning profiles'
    workingDirectory: $(Build.SourcesDirectory)
    env:
      AUTH_TOKEN_GITHUB_COM: $(github--pat--vs-mobiletools-engineering-service2)
      AUTH_TOKEN_LA_DEV_APPLE_P12: $(xqa--certificates--password)
      AUTH_TOKEN_LA_DISTR_APPLE_P12: $(xqa--certificates--password)
      AUTH_TOKEN_LA_MAC_INSTALLER_DISTR_P12: $(xqa--certificates--password)
      AUTH_TOKEN_VSENG_XAMARIN_MAC_DEVICES_P12: $(xqa--certificates--password)
      AUTH_TOKEN_VSENG_XAMARIN_MAC_DEVICES_2_P12: $(xqa--certificates--password)
      LOGIN_KEYCHAIN_PASSWORD: $(OSX_KEYCHAIN_PASS)

  - bash: |
      set +e # we don't care about errors here
      set -x
      pwd
      env | sort
      ls -la /Applications
      system_profiler SPHardwareDataType
      curl -s https://support-sp.apple.com/sp/product?cc=$(system_profiler SPHardwareDataType | awk '/Serial/ {print $4}' | cut -c 9-) | sed 's|.*<configCode>\(.*\)</configCode>.*|\1|'
      sysctl -a | grep cpu
      exit 0 # make sure we don't return an error code if the last command failed
    displayName: 'Environment info'

  - bash: |
      set -e
      set -x
      ./binding-tools-for-swift/devops/automation/provision-deps.sh
    displayName: 'Provision dependencies'
    workingDirectory: $(Build.SourcesDirectory)

  - bash: |
      set -e
      set -x
      cd ./binding-tools-for-swift/
      git clean -xdf
    displayName: 'Clean workspace'
    workingDirectory: $(Build.SourcesDirectory)

  - bash: |
      set -e
      set -x
      ./binding-tools-for-swift/devops/automation/build.sh
    displayName: 'Build'
    workingDirectory: $(Build.SourcesDirectory)

  - bash: |
      set -e
      set -x
      ./binding-tools-for-swift/devops/automation/run-tests.sh
    displayName: 'Run tests'
    workingDirectory: $(Build.SourcesDirectory)
    condition: and(succeeded(), eq('${{ parameters.RunningTests }}', true))

  - task: PublishTestResults@2
    displayName: 'Publish NUnit Device Test Results'
    inputs:
      testResultsFormat: NUnit
      testResultsFiles: '**/TestResult*.xml'
      failTaskOnFailedTests: true
    continueOnError: true
    condition: and(succeededOrFailed(), eq('${{ parameters.RunningTests }}', true))

  - script: |
      set -e
      set -x
      $(Build.SourcesDirectory)/binding-tools-for-swift/devops/automation/build-package.sh
      ls -la ./package || true
    displayName: 'Package'

  # This will upload the packages to Azure Devops
  # A later job further down will then publish the package to Azure Blob Storage.
  # This is a two-step process because the task that can publish to Azure Blob Storage only works on Windows :/
  - task: PublishBuildArtifacts@1
    displayName: 'Upload Packages'
    inputs:
      PathtoPublish: './package'
      ArtifactName: 'drop'
      publishLocation: 'Container'

  - task: PublishPipelineArtifact@1
    displayName: 'Publish Artifact: TestResult'
    inputs:
      targetPath: $(System.DefaultWorkingDirectory)/binding-tools-for-swift/tests/tom-swifty-test/TestResult.xml
      artifactName: TestResults
    continueOnError: true
    condition: and(succeededOrFailed(), eq('${{ parameters.RunningTests }}', true))

- job: UploadPackages
  dependsOn: ContinuousIntegration
  pool:
    vmImage: windows-latest

  steps:
  - checkout: maccore
    clean: true
    persistCredentials: true
  - checkout: self
    clean: true

  - bash: |
      # set env vars used by bash scripts so that we do not need to worry about locations after the checkout
      maccoreTop="$(System.DefaultWorkingDirectory)/maccore"
      btfsTop="$(System.DefaultWorkingDirectory)/binding-tools-for-swift"
      echo "##vso[task.setvariable variable=MACCORE_TOP]$maccoreTop"
      echo "##vso[task.setvariable variable=BTFS_TOP]$btfsTop"
      echo "$(System.PullRequest.SourceBranch)"
    displayName: 'Configure build'

  - task: DownloadPipelineArtifact@2
    inputs:
      source: current
      artifact: drop
      path: 'drop'

  - task: AzureFileCopy@2
    displayName: 'Publish package to Azure'
    inputs:
      SourcePath: 'drop'
      azureSubscription: BOSStorageMirror
      Destination: AzureBlob
      storage: bosstoragemirror
      ContainerName: wrench
      BlobPrefix: 'binding-tools-for-swift/$(Build.SourceBranchName)/$(Build.SourceVersion)/$(Build.BuildId)'
      outputStorageUri: PackageUrl
      outputStorageContainerSasToken: PackageSasToken

  - bash: |
      set -e
      set -x
      ZIPS=(drop/*.zip)
      if (( ${#ZIPS[@]} == 1 )); then
        if test -f "${ZIPS[0]}"; then
          FILE=${ZIPS[0]}
        else
          echo "Could not find any zip files"
          exit 1
        fi
      elif (( ${#ZIPS[@]} > 1 )); then
        echo "More than one zip file!"
        exit 1
      fi
      FILENAME="$(basename "$FILE")"
      TARGET_URL="https://bosstoragemirror.blob.core.windows.net/wrench/binding-tools-for-swift/$BUILD_SOURCEBRANCHNAME/$BUILD_SOURCEVERSION/$BUILD_BUILDID/$FILENAME"
      echo "Build reason is $BUILD_REASON for $BUILD_SOURCEBRANCHNAME"
      if [[ "$BUILD_REASON" == "PullRequest" ]]; then
        echo "Setting commit id to $SYSTEM_PULLREQUEST_SOURCECOMMITID"
        binding-tools-for-swift/devops/automation/add-commit-status.sh --token=$(GitHub.Token) --hash=$SYSTEM_PULLREQUEST_SOURCECOMMITID --azdo-state=$AGENT_JOBSTATUS --target-url=$TARGET_URL "--description=$FILENAME" --context=PKG-Binding-Tools-For-Swift
      else
        binding-tools-for-swift/devops/automation/add-commit-status.sh --token=$(GitHub.Token) --hash=$BUILD_SOURCEVERSION --azdo-state=$AGENT_JOBSTATUS --target-url=$TARGET_URL "--description=$FILENAME" --context=PKG-Binding-Tools-For-Swift
      fi
    displayName: 'Add Packages as GitHub Status'
    workingDirectory: $(Build.SourcesDirectory)
